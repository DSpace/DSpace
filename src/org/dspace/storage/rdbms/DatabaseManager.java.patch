*** /dspace/orig-1.2.2/dspace-1.2.1-source/src/org/dspace/storage/rdbms/DatabaseManager.java	Wed Dec 22 12:48:44 2004
--- /dspace/orig-1.2.2/dspace-1.2.2-source/src/org/dspace/storage/rdbms/DatabaseManager.java	Wed Feb  9 11:52:23 2005
***************
*** 1,9 ****
  /*
   * DatabaseManager.java
   *
!  * Version: $Revision: 1.31 $
   *
!  * Date: $Date: 2004/12/22 17:48:44 $
   *
   * Copyright (c) 2002, Hewlett-Packard Company and Massachusetts
   * Institute of Technology.  All rights reserved.
--- 1,9 ----
  /*
   * DatabaseManager.java
   *
!  * Version: $Revision: 1.32 $
   *
!  * Date: $Date: 2005/02/09 16:52:23 $
   *
   * Copyright (c) 2002, Hewlett-Packard Company and Massachusetts
   * Institute of Technology.  All rights reserved.
***************
*** 84,90 ****
   * 
   * @author Peter Breton
   * @author Jim Downing
!  * @version $Revision: 1.31 $
   */
  public class DatabaseManager
  {
--- 84,90 ----
   * 
   * @author Peter Breton
   * @author Jim Downing
!  * @version $Revision: 1.32 $
   */
  public class DatabaseManager
  {
***************
*** 132,139 ****
  
          Statement statement = context.getDBConnection().createStatement();
  
!         return new TableRowIterator(statement.executeQuery(query),
                  canonicalize(table));
      }
  
      /**
--- 132,142 ----
  
          Statement statement = context.getDBConnection().createStatement();
  
!         TableRowIterator retTRI = new TableRowIterator(statement.executeQuery(query),
                  canonicalize(table));
+ 
+         retTRI.setStatement(statement);
+         return retTRI;
      }
  
      /**
***************
*** 157,163 ****
  
          Statement statement = context.getDBConnection().createStatement();
  
!         return new TableRowIterator(statement.executeQuery(query));
      }
  
      /**
--- 160,169 ----
  
          Statement statement = context.getDBConnection().createStatement();
  
!         TableRowIterator retTRI = new TableRowIterator(statement.executeQuery(query));
! 
!         retTRI.setStatement(statement);
!         return retTRI;
      }
  
      /**
***************
*** 177,184 ****
      public static TableRowIterator query(String table,
              PreparedStatement statement) throws SQLException
      {
!         return new TableRowIterator(statement.executeQuery(),
                  canonicalize(table));
      }
  
      /**
--- 183,193 ----
      public static TableRowIterator query(String table,
              PreparedStatement statement) throws SQLException
      {
!         TableRowIterator retTRI = new TableRowIterator(statement.executeQuery(),
                  canonicalize(table));
+ 
+         retTRI.setStatement(statement);
+         return retTRI;
      }
  
      /**
***************
*** 194,200 ****
      public static TableRowIterator query(PreparedStatement statement)
              throws SQLException
      {
!         return new TableRowIterator(statement.executeQuery());
      }
  
      /**
--- 203,212 ----
      public static TableRowIterator query(PreparedStatement statement)
              throws SQLException
      {
!         TableRowIterator retTRI = new TableRowIterator(statement.executeQuery());
! 
!         retTRI.setStatement(statement);
!         return retTRI;
      }
  
      /**
***************
*** 214,220 ****
      {
          TableRowIterator iterator = query(context, query);
  
!         return (!iterator.hasNext()) ? null : iterator.next();
      }
  
      /**
--- 226,234 ----
      {
          TableRowIterator iterator = query(context, query);
  
!         TableRow retRow = (!iterator.hasNext()) ? null : iterator.next();
!         iterator.close();
!         return (retRow);
      }
  
      /**
***************
*** 236,242 ****
      {
          TableRowIterator iterator = query(context, canonicalize(table), query);
  
!         return (!iterator.hasNext()) ? null : iterator.next();
      }
  
      /**
--- 250,258 ----
      {
          TableRowIterator iterator = query(context, canonicalize(table), query);
  
!         TableRow retRow = (!iterator.hasNext()) ? null : iterator.next();
!         iterator.close();
!         return (retRow);
      }
  
      /**
***************
*** 483,488 ****
--- 499,505 ----
          rs.next();
  
          int newID = rs.getInt(1);
+         rs.close();
  
          statement.close();
  
