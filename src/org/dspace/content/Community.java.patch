*** /dspace/orig-1.2.2/dspace-1.2.1-source/src/org/dspace/content/Community.java	Wed Dec 22 12:48:40 2004
--- /dspace/orig-1.2.2/dspace-1.2.2-source/src/org/dspace/content/Community.java	Mon Feb 28 21:59:48 2005
***************
*** 1,9 ****
  /*
   * Community.java
   *
!  * Version: $Revision: 1.31 $
   *
!  * Date: $Date: 2004/12/22 17:48:40 $
   *
   * Copyright (c) 2002, Hewlett-Packard Company and Massachusetts
   * Institute of Technology.  All rights reserved.
--- 1,9 ----
  /*
   * Community.java
   *
!  * Version: $Revision: 1.33 $
   *
!  * Date: $Date: 2005/03/01 02:59:48 $
   *
   * Copyright (c) 2002, Hewlett-Packard Company and Massachusetts
   * Institute of Technology.  All rights reserved.
***************
*** 68,74 ****
   * <code>update</code> is called.
   * 
   * @author Robert Tansley
!  * @version $Revision: 1.31 $
   */
  public class Community extends DSpaceObject
  {
--- 68,74 ----
   * <code>update</code> is called.
   * 
   * @author Robert Tansley
!  * @version $Revision: 1.33 $
   */
  public class Community extends DSpaceObject
  {
***************
*** 239,244 ****
--- 239,246 ----
                  communities.add(new Community(context, row));
              }
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
  
          Community[] communityArray = new Community[communities.size()];
          communityArray = (Community[]) communities.toArray(communityArray);
***************
*** 283,288 ****
--- 285,292 ----
                  topCommunities.add(new Community(context, row));
              }
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
  
          Community[] communityArray = new Community[topCommunities.size()];
          communityArray = (Community[]) topCommunities.toArray(communityArray);
***************
*** 461,466 ****
--- 465,472 ----
                  collections.add(new Collection(ourContext, row));
              }
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
  
          // Put them in an array
          Collection[] collectionArray = new Collection[collections.size()];
***************
*** 508,513 ****
--- 514,521 ----
                  subcommunities.add(new Community(ourContext, row));
              }
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
  
          // Put them in an array
          Community[] communityArray = new Community[subcommunities.size()];
***************
*** 554,559 ****
--- 562,569 ----
                  parentCommunity = new Community(ourContext, row);
              }
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
  
          return parentCommunity;
      }
***************
*** 632,637 ****
--- 642,649 ----
  
              DatabaseManager.update(ourContext, mappingRow);
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
      }
  
      /**
***************
*** 683,688 ****
--- 695,702 ----
  
              DatabaseManager.update(ourContext, mappingRow);
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
      }
  
      /**
***************
*** 727,732 ****
--- 741,748 ----
              // Orphan; delete it
              c.delete();
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
      }
  
      /**
***************
*** 771,776 ****
--- 787,794 ----
              // Orphan; delete it
              c.delete();
          }
+         // close the TableRowIterator to free up resources
+         tri.close();
      }
  
      /**
***************
*** 910,913 ****
  
          AuthorizeManager.authorizeAction(ourContext, this, Constants.WRITE);
      }
! }
--- 928,962 ----
  
          AuthorizeManager.authorizeAction(ourContext, this, Constants.WRITE);
      }
! 
! 	/**
!      * counts items in this community
!      *
!      * @return  total items
!      */
!     public int countItems()
!         throws SQLException
!     {
!         /** item count in a collection */
!         int collitems = 0;
! 
!         /** item count in a community */
!         int commitems = 0;
! 
!         Collection[] cols = getCollections();
! 
!         if ( cols.length > 0 )
!         {
!             for (int j = 0; j < cols.length; j++)
!             {
!                 // Get total items of a collection
!                 collitems = cols[j].countItems();
! 
!                 commitems += collitems;
! 
!             }
!         }
! 
!         return commitems;
!     }
! }
