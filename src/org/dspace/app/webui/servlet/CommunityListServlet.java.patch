*** /dspace/orig-1.2.1/dspace-1.2-source/src/org/dspace/app/webui/servlet/CommunityListServlet.java	Tue Jun 15 12:23:45 2004
--- /dspace/dev-1.2/dspace-1.2-source/src/org/dspace/app/webui/servlet/CommunityListServlet.java	Thu Oct 21 16:33:33 2004
***************
*** 55,60 ****
--- 55,61 ----
  import org.dspace.authorize.AuthorizeException;
  import org.dspace.content.Collection;
  import org.dspace.content.Community;
+ import org.dspace.content.CommunityGroup;
  import org.dspace.core.Context;
  import org.dspace.core.LogManager;
  
***************
*** 67,72 ****
--- 68,83 ----
   */
  public class CommunityListServlet extends DSpaceServlet
  {
+     /**
+      * <pre>
+      * Revision History:
+      *
+      *   2004/10/21: Ben
+      *   - initial version
+      *
+      * </pre>
+      */
+ 
      /** log4j category */
      private static Logger log = Logger.getLogger(CommunityListServlet.class);
      
***************
*** 78,104 ****
      {
          log.info(LogManager.getHeader(context, "view_community_list", ""));
          
  	// This will map community IDs to arrays of collections
  	Map colMap = new HashMap();
          // This will map communityIDs to arrays of sub-communities
          Map commMap = new HashMap();
          
!         Community[] communities = Community.findAllTop(context);
!         
!         for (int com = 0; com < communities.length; com++)
!         {
!             Integer comID = new Integer(communities[com].getID());
  
!             // Find collections in community
!             Collection[] colls = communities[com].getCollections();
!             colMap.put(comID, colls);
  
!             // Find subcommunties in community
!             Community[] comms = communities[com].getSubcommunities();
!             commMap.put(comID, comms);
  
!         }
  
          // can they admin communities?
          if(AuthorizeManager.isAdmin(context))
          {
--- 89,123 ----
      {
          log.info(LogManager.getHeader(context, "view_community_list", ""));
          
+ 	// This will map group IDs to top level communities
+ 	Map topcommMap = new HashMap();
  	// This will map community IDs to arrays of collections
  	Map colMap = new HashMap();
          // This will map communityIDs to arrays of sub-communities
          Map commMap = new HashMap();
          
! 	CommunityGroup[] groups = CommunityGroup.findAll(context);
! 	for (int k=0; k < groups.length; k++) {
!             Integer groupID = new Integer(groups[k].getID());
  
! 	    Community[] communities = groups[k].getCommunities();
! 	    topcommMap.put(groupID, communities);
  
! 	    for (int com = 0; com < communities.length; com++)
! 	    {
! 		Integer comID = new Integer(communities[com].getID());
  
! 		// Find collections in community
! 		Collection[] colls = communities[com].getCollections();
! 		colMap.put(comID, colls);
  
+ 		// Find subcommunties in community
+ 		Community[] comms = communities[com].getSubcommunities();
+ 		commMap.put(comID, comms);
+ 		
+ 	    }
+ 	}
+ 
          // can they admin communities?
          if(AuthorizeManager.isAdmin(context))
          {
***************
*** 106,112 ****
              request.setAttribute("admin_button", new Boolean(true));
          }
          
!         request.setAttribute("communities", communities);
          request.setAttribute("collections.map", colMap);
          request.setAttribute("subcommunities.map", commMap);
          JSPManager.showJSP(request, response, "/community-list.jsp");
--- 125,132 ----
              request.setAttribute("admin_button", new Boolean(true));
          }
          
!         request.setAttribute("groups", groups);
!         request.setAttribute("communities.map", topcommMap);
          request.setAttribute("collections.map", colMap);
          request.setAttribute("subcommunities.map", commMap);
          JSPManager.showJSP(request, response, "/community-list.jsp");
