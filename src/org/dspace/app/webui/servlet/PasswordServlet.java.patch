*** /dspace/orig-1.2.1/dspace-1.2-source/src/org/dspace/app/webui/servlet/PasswordServlet.java	Fri Nov  1 12:59:10 2002
--- /dspace/dev-1.2/dspace-1.2-source/src/org/dspace/app/webui/servlet/PasswordServlet.java	Fri Jan 21 12:01:46 2005
***************
*** 46,62 ****
--- 46,67 ----
  import javax.servlet.http.HttpServlet;
  import javax.servlet.http.HttpServletRequest;
  import javax.servlet.http.HttpServletResponse;
+ import javax.servlet.http.HttpSession;
+ import javax.naming.NamingException;
  
  import org.apache.log4j.Logger;
  
  import org.dspace.app.webui.util.Authenticate;
  import org.dspace.app.webui.util.JSPManager;
+ import org.dspace.app.webui.servlet.RegisterServlet;
  import org.dspace.authorize.AuthorizeException;
  import org.dspace.core.Context;
  import org.dspace.core.LogManager;
  import org.dspace.eperson.EPerson;
  
+ import edu.umd.lims.dspace.Ldap;
  
+ 
  /**
   * Simple username and password authentication servlet.  Displays the
   * login form <code>/login/password.jsp</code> on a GET,
***************
*** 67,72 ****
--- 72,105 ----
   */
  public class PasswordServlet extends DSpaceServlet
  {
+     /**
+      * <pre>
+      * Revision History:
+      *
+      *   2005/01/21: Ben
+      *     - additional logging if unable to create EPerson
+      *     - handle more missing ldap entries
+      *
+      *   2005/01/19: Ben
+      *     - handle ldap entries with no 'mail' attribute
+      *
+      *   2004/12/22: Ben
+      *     - save the entire ldap object in the session
+      *     - close the ldap connection sooner, it can be closed
+      *       and still have the ldap entry available
+      *
+      *   2004/12/20: Ben
+      *     - save ou ldap information in the session
+      *
+      *   2004/12/17: Ben
+      *     - add email notification for new ldap users registered
+      *
+      *   2004/10/25: Ben
+      *     - initial version
+      *
+      * </pre>
+      */
+ 
      /** log4j logger */
      private static Logger log = Logger.getLogger(PasswordServlet.class);
  
***************
*** 85,94 ****
          HttpServletResponse response)
          throws ServletException, IOException, SQLException, AuthorizeException
      {
!         // Process the POSTed email and password
          String email = request.getParameter("login_email");
          String password = request.getParameter("login_password");
!         
          // Locate the eperson
          EPerson eperson = EPerson.findByEmail(context, email.toLowerCase());
          boolean loggedIn = false;
--- 118,149 ----
          HttpServletResponse response)
          throws ServletException, IOException, SQLException, AuthorizeException
      {
!         // Process the POSTed information
          String email = request.getParameter("login_email");
+ 	String uid = request.getParameter("login_uid");
          String password = request.getParameter("login_password");
! 
! 	if (email != null) {
! 	    doLocalLogin(context, request, response, email, password);
! 	} else if (uid != null) {
! 	    doUmLogin(context, request, response, uid, password);
! 	} else {
! 	    // should not reach here
! 	    log.info(LogManager.getHeader(context,
! 					  "failed_login",
! 					  "no login provided"));
! 	    JSPManager.showJSP(request, response, "/login/password.jsp");
! 	}
!     }
! 
! 
!     protected void doLocalLogin(Context context,
!         HttpServletRequest request,
! 	HttpServletResponse response, 
! 	String email,
! 	String password)
!         throws ServletException, IOException, SQLException, AuthorizeException
!     {
          // Locate the eperson
          EPerson eperson = EPerson.findByEmail(context, email.toLowerCase());
          boolean loggedIn = false;
***************
*** 127,130 ****
--- 182,296 ----
              "email=" + email));
          JSPManager.showJSP(request, response, "/login/incorrect.jsp");
      }
+ 
+ 
+     protected void doUmLogin(Context context,
+         HttpServletRequest request,
+ 	HttpServletResponse response, 
+ 	String uid,
+ 	String password)
+         throws ServletException, IOException, SQLException, AuthorizeException
+     {
+ 	HttpSession session = request.getSession();
+ 
+ 	Ldap ldap = null;
+ 	try {
+ 	    // check for valid uid/password
+ 	    ldap = new Ldap(context);
+ 	    if (ldap.checkUid(uid) && ldap.checkPassword(password)) {
+ 		ldap.close();
+ 
+ 		String email = ldap.getEmail();
+ 		if (email == null) {
+ 		  email = uid + "@umd.edu";
+ 		}
+ 
+ 		// locate the eperson
+ 		EPerson eperson = EPerson.findByEmail(context, email.toLowerCase());
+ 
+ 		if (eperson == null) {
+ 		    try {
+ 			// Use the admin account to create the eperson
+ 			EPerson admin = EPerson.findByEmail(context, "ldap_um@drum.umd.edu");
+ 			context.setCurrentUser(admin);
+ 
+ 			// Create a new eperson
+ 			eperson = EPerson.create(context);
+ 			
+ 			String strFirstName = ldap.getFirstName();
+ 			if (strFirstName == null)
+ 			  strFirstName = "??";
+ 
+ 			String strLastName = ldap.getLastName();
+ 			if (strLastName == null)
+ 			  strLastName = "??";
+ 
+ 			String strPhone = ldap.getPhone();
+ 			if (strPhone == null)
+ 			  strPhone = "??";
+ 
+ 			eperson.setEmail(email);
+ 			eperson.setFirstName(strFirstName);
+ 			eperson.setLastName(strLastName);
+ 			eperson.setMetadata("phone", strPhone);
+ 			eperson.setCanLogIn(false);
+ 			eperson.setRequireCertificate(false);
+ 
+ 			eperson.update();
+ 			context.commit();
+ 			
+ 			log.info(LogManager.getHeader(context,
+ 						      "create_um_eperson",
+ 						      "eperson_id="+eperson.getID() +
+ 						      ", uid=" + uid));
+ 
+ 			// Send an email that the user has registered
+ 			RegisterServlet.notifyRegistration(context, eperson, "ldap auto registered");
+ 		    }
+ 		    catch (Exception e) {
+ 			log.info(LogManager.getHeader(context,
+ 						      "failed_login",
+ 						      "Unable to create new eperson for um uid="+uid+": " + e.getMessage()));
+ 			throw new ServletException("Error creating new eperson", e);
+ 		    }
+ 		    finally {
+ 			context.setCurrentUser(null);
+ 		    }			
+ 		}
+ 
+ 		
+ 		// Logged in OK.
+ 		Authenticate.loggedIn(context, request, eperson);
+ 			
+ 		log.info(LogManager.getHeader(context,
+                     "login",
+                     "type=um id"));
+                 
+ 		// Save the ldap object in the session
+ 		session.setAttribute("dspace.current.user.ldap", ldap);
+ 
+ 		// resume previous request
+ 		Authenticate.resumeInterruptedRequest(request, response);
+ 		
+ 		return;
+ 	    }
+ 
+ 	    // If we reach here, supplied uid/password was duff.
+ 	    log.info(LogManager.getHeader(context,
+ 					  "failed_login",
+ 					  "uid=" + uid));
+ 	    JSPManager.showJSP(request, response, "/login/incorrect-um.jsp");
+         }
+ 
+ 	catch (NamingException ne) {
+ 	    log.info(LogManager.getHeader(context,
+ 					  "failed_login",
+ 					  "ldap NamingException error:\n" + ne.getMessage()));
+ 	    JSPManager.showJSP(request, response, "/login/password.jsp");
+ 	}
+ 
+ 	finally {
+ 	    ldap.close();
+ 	}
+     }
  }
