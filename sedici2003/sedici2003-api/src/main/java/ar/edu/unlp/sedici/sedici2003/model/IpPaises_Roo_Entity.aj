// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.unlp.sedici.sedici2003.model;

import ar.edu.unlp.sedici.sedici2003.model.IpPaises;
import ar.edu.unlp.sedici.sedici2003.model.IpPaisesPK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect IpPaises_Roo_Entity {
    
    declare @type: IpPaises: @Entity;
    
    declare @type: IpPaises: @Table(name = "ip_paises");
    
    @PersistenceContext
    transient EntityManager IpPaises.entityManager;
    
    @EmbeddedId
    private IpPaisesPK IpPaises.id;
    
    public IpPaisesPK IpPaises.getId() {
        return this.id;
    }
    
    public void IpPaises.setId(IpPaisesPK id) {
        this.id = id;
    }
    
    @Transactional
    public void IpPaises.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void IpPaises.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            IpPaises attached = IpPaises.findIpPaises(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void IpPaises.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void IpPaises.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public IpPaises IpPaises.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        IpPaises merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager IpPaises.entityManager() {
        EntityManager em = new IpPaises().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long IpPaises.countIpPaiseses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM IpPaises o", Long.class).getSingleResult();
    }
    
    public static List<IpPaises> IpPaises.findAllIpPaiseses() {
        return entityManager().createQuery("SELECT o FROM IpPaises o", IpPaises.class).getResultList();
    }
    
    public static IpPaises IpPaises.findIpPaises(IpPaisesPK id) {
        if (id == null) return null;
        return entityManager().find(IpPaises.class, id);
    }
    
    public static List<IpPaises> IpPaises.findIpPaisesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM IpPaises o", IpPaises.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
