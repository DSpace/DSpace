// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.unlp.sedici.sedici2003.model;

import ar.edu.unlp.sedici.sedici2003.model.Ip;
import ar.edu.unlp.sedici.sedici2003.model.IpPK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Ip_Roo_Entity {
    
    declare @type: Ip: @Entity;
    
    declare @type: Ip: @Table(name = "ip");
    
    @PersistenceContext
    transient EntityManager Ip.entityManager;
    
    @EmbeddedId
    private IpPK Ip.id;
    
    public IpPK Ip.getId() {
        return this.id;
    }
    
    public void Ip.setId(IpPK id) {
        this.id = id;
    }
    
    @Transactional
    public void Ip.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Ip.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Ip attached = Ip.findIp(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Ip.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Ip.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Ip Ip.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Ip merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Ip.entityManager() {
        EntityManager em = new Ip().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Ip.countIps() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Ip o", Long.class).getSingleResult();
    }
    
    public static List<Ip> Ip.findAllIps() {
        return entityManager().createQuery("SELECT o FROM Ip o", Ip.class).getResultList();
    }
    
    public static Ip Ip.findIp(IpPK id) {
        if (id == null) return null;
        return entityManager().find(Ip.class, id);
    }
    
    public static List<Ip> Ip.findIpEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Ip o", Ip.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
