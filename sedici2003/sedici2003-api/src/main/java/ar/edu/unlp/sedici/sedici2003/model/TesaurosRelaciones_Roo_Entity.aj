// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.unlp.sedici.sedici2003.model;

import ar.edu.unlp.sedici.sedici2003.model.TesaurosRelaciones;
import ar.edu.unlp.sedici.sedici2003.model.TesaurosRelacionesPK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TesaurosRelaciones_Roo_Entity {
    
    declare @type: TesaurosRelaciones: @Entity;
    
    declare @type: TesaurosRelaciones: @Table(name = "tesauros_relaciones");
    
    @PersistenceContext
    transient EntityManager TesaurosRelaciones.entityManager;
    
    @EmbeddedId
    private TesaurosRelacionesPK TesaurosRelaciones.id;
    
    public TesaurosRelacionesPK TesaurosRelaciones.getId() {
        return this.id;
    }
    
    public void TesaurosRelaciones.setId(TesaurosRelacionesPK id) {
        this.id = id;
    }
    
    @Transactional
    public void TesaurosRelaciones.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TesaurosRelaciones.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TesaurosRelaciones attached = TesaurosRelaciones.findTesaurosRelaciones(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void TesaurosRelaciones.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TesaurosRelaciones.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TesaurosRelaciones TesaurosRelaciones.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TesaurosRelaciones merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager TesaurosRelaciones.entityManager() {
        EntityManager em = new TesaurosRelaciones().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TesaurosRelaciones.countTesaurosRelacioneses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TesaurosRelaciones o", Long.class).getSingleResult();
    }
    
    public static List<TesaurosRelaciones> TesaurosRelaciones.findAllTesaurosRelacioneses() {
        return entityManager().createQuery("SELECT o FROM TesaurosRelaciones o", TesaurosRelaciones.class).getResultList();
    }
    
    public static TesaurosRelaciones TesaurosRelaciones.findTesaurosRelaciones(TesaurosRelacionesPK id) {
        if (id == null) return null;
        return entityManager().find(TesaurosRelaciones.class, id);
    }
    
    public static List<TesaurosRelaciones> TesaurosRelaciones.findTesaurosRelacionesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TesaurosRelaciones o", TesaurosRelaciones.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
