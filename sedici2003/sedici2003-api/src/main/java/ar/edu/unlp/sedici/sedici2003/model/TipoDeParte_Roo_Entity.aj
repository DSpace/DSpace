// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.unlp.sedici.sedici2003.model;

import ar.edu.unlp.sedici.sedici2003.model.TipoDeParte;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TipoDeParte_Roo_Entity {
    
    declare @type: TipoDeParte: @Entity;
    
    declare @type: TipoDeParte: @Table(name = "tipo_de_parte");
    
    @PersistenceContext
    transient EntityManager TipoDeParte.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Integer TipoDeParte.id;
    
    public Integer TipoDeParte.getId() {
        return this.id;
    }
    
    public void TipoDeParte.setId(Integer id) {
        this.id = id;
    }
    
    @Transactional
    public void TipoDeParte.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TipoDeParte.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TipoDeParte attached = TipoDeParte.findTipoDeParte(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void TipoDeParte.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TipoDeParte.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TipoDeParte TipoDeParte.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TipoDeParte merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager TipoDeParte.entityManager() {
        EntityManager em = new TipoDeParte().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TipoDeParte.countTipoDePartes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TipoDeParte o", Long.class).getSingleResult();
    }
    
    public static List<TipoDeParte> TipoDeParte.findAllTipoDePartes() {
        return entityManager().createQuery("SELECT o FROM TipoDeParte o", TipoDeParte.class).getResultList();
    }
    
    public static TipoDeParte TipoDeParte.findTipoDeParte(Integer id) {
        if (id == null) return null;
        return entityManager().find(TipoDeParte.class, id);
    }
    
    public static List<TipoDeParte> TipoDeParte.findTipoDeParteEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TipoDeParte o", TipoDeParte.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
