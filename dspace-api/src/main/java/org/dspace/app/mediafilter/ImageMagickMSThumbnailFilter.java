/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * http://www.dspace.org/license/
 */
package org.dspace.app.mediafilter;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;

import org.apache.commons.io.FileUtils;
import org.dspace.content.Item;
import org.dspace.services.ConfigurationService;
import org.dspace.services.factory.DSpaceServicesFactory;

/**
 * Thumbnail filter for Microsoft file types which uses LibreOffice to create intermediate pdfs from
 * all Microsoft formats (DOC, XLS, PPT, etc). Then it uses ImageMagick to produce a thumbnail.
 * Requires configuration settings for libreoffice.libreoffice-path (the absolute path of the libreoffice executable)
 * and libreoffice.temp-directory (any writeable directory you choose).
 * LibreOffice documentation: https://libreoffice.org
 */
public class ImageMagickMSThumbnailFilter extends ImageMagickThumbnailFilter {
    @Override
    public InputStream getDestinationStream(Item currentItem, InputStream source, boolean verbose)
        throws Exception {
        // Get libreOffice configuration
        ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();
        String tmpDir =  configurationService.getProperty("libreoffice.temp-directory", "/tmp");
        String libreofficepath = configurationService.getProperty("libreoffice.libreoffice-path");

        // Save Microsoft source stream to disk (sourceFile)
        String itemId = currentItem.getID().toString();
        String msTmp = Paths.get(tmpDir, itemId).toString();
        File sourceFile = new File(msTmp);
        FileUtils.copyInputStreamToFile(source, sourceFile);

        // Generate pdf from sourceFile using libreOffice (pdfFile)
        List<String> params = new ArrayList<String>();
        params.add(libreofficepath);
        params.add("--headless");
        params.add("\"-env:UserInstallation=file://" + tmpDir + "/LibreOffice_Conversion_" + itemId + "\"");
        params.add("--convert-to");
        params.add("pdf");
        params.add("--outdir");
        params.add(tmpDir);
        params.add(msTmp);
        System.out.println("Command: " +  String.join(" ", params));
        System.out.println("Result: " + runCommandForOutput(params));

        // Open file created by libreOffice (pdfFile)
        String pdfTmp = Paths.get(tmpDir, itemId + ".pdf").toString();
        File pdfFile = new File(pdfTmp);

        // Generate thumbnail from pdfFile
        File f2 = null;
        File f3 = null;
        try {
            // Step 1: get an image from our PDF file, with PDF-specific processing options
            f2 = getImageFile(pdfFile, verbose);
            // Step 2: use the image above to create the final resized and rotated thumbnail
            f3 = getThumbnailFile(f2, verbose);
            byte[] bytes = Files.readAllBytes(f3.toPath());
            return new ByteArrayInputStream(bytes);
        } finally {
            sourceFile.delete();
            pdfFile.delete();
            if (f2 != null) {
                f2.delete();
            }
            if (f3 != null) {
                f3.delete();
            }
        }
    }

    /**
     * Executes a system command and returns the generated output
     * @param params commandline command and arguments as a List<String>
     * @return output generated by command
     */
    public static String runCommandForOutput(List<String> params) {
        ProcessBuilder pb = new ProcessBuilder(params);
        Process p;
        String result = "";
        try {
            p = pb.start();
            final BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
            StringJoiner sj = new StringJoiner(System.getProperty("line.separator"));
            reader.lines().iterator().forEachRemaining(sj::add);
            result = sj.toString();
            p.waitFor();
            p.destroy();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }
}