#!/bin/bash

# script-mail-wrapper
#
# Calls the wrapped script, and passes the output to the Splunk log
# and to the "mail" script.
#
# script-mail-wrapper <SERVER_TYPE> <LOG_DIR> <EMAIL_ADDRESS> <SCRIPT> <SCRIPT_ARGUMENTS>
#
# Sample usage with the "/dspace/bin/load-etd-nightly" script:
#
# script-mail-wrapper dev /dspace/log jsmith@example.com /dspace/bin/load-etd-nightly /dspace/proquest
#
# The Subject line of the email will be the basename of the script, and
# and the <SERVER_TYPE>. For the above example, the Subject link would be
# "load-etd-nightly: dev"

if  [ "$#" -lt 5 ]; then
    echo "Usage: $0"
    echo "    <SERVER_TYPE>: The type of server (test, qa, prod) for the email subject"
    echo "    <LOG_DIR>: The directory to write the RUN_LOG to, prior to emailing"
    echo "    <EMAIL_ADDRESS>: The email address to send the log to"
    echo "    <SCRIPT>: The full path of the script to call"
    echo "    <SCRIPT_ARGUMENTS>: Any additional script arguments"
    exit 0
fi

echo Running `basename $0` script

# Assumes that this script is in the same directory as the "mail" script
MAIL_SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
echo MAIL_SCRIPT_DIR=$MAIL_SCRIPT_DIR

# The server type (test, qa, prod) - used in the email subject line
SERVER_TYPE=$1
shift

# The directory where the log generated by the script should be written
LOG_DIR=$1
shift

# The email address to send the script log to
EMAIL_ADDRESS=$1
shift

# The script being wrapped
SCRIPT=$1
shift

# The arguments to send to the script
SCRIPT_ARGUMENTS=$@

echo SERVER_TYPE=\'$SERVER_TYPE\'
echo LOG_DIR=\'$LOG_DIR\'
echo EMAIL_ADDRESS=\'$EMAIL_ADDRESS\'
echo SCRIPT=\'$SCRIPT\'
echo SCRIPT_ARGUMENTS=\'$@\'

# Generate a time-stamped name for the log file, based on the script being run
SCRIPT_BASENAME=`basename "$SCRIPT"`
LOG_NAME=script-mail-wrapper-$SCRIPT_BASENAME-`date '+%Y%m%d-%H%M%S'`.log
LOG_FILE_PATH="$LOG_DIR/$LOG_NAME"

echo LOG_FILE_PATH=\'$LOG_FILE_PATH\'
echo SCRIPT_ARGUMENTS=\'$@\'

# Call the script being wrapped
$SCRIPT "$@" 2>&1 | tee "$LOG_FILE_PATH" || true

# Mail the log, passing all non-JSON unchanged, and filtering out DEBUG messages
jq -R -r '. as $line | try (fromjson | select(."log.level" != "DEBUG") | .message) catch $line' $LOG_FILE_PATH | \
$MAIL_SCRIPT_DIR/mail -s "$SCRIPT_BASENAME: $SERVER_TYPE" "$EMAIL_ADDRESS"

echo Done running `basename $0` script
