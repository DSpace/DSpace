###
# Configuration file for custom DSpace event consumers
#
# Curation tasks can be configured here to be queued on certain events
# such as 'on bitstream change' or 'on item install'. This can help with
# certain tasks that are hard to do purely with workflow curate or XML workflow
# processing (eg. performing tasks that require the item to be out of workspace or workflow)
# and / or hard to do purely with event consumers (eg. modify the object that is also the event subject)
#
# The use of queues here means there should be some scheduled running of the queues, eg. cronjobs calling
# [dspace.dir]/bin/dspace curate -q {queue_name} -e {eperson} which will actually process the tasks.
# The queue name used in the below default configuration is 'continually' which is just a name representing a
# fairly frequent schedule, eg. it might be called every 10-15 minutes for tasks which need to be processed
# ASAP, while allowing for large queues to be cleared before the next run (if the queues never get large, it could
# be processed much more frequently, with kernel startup overhead being the main delay). Examples of tasks that could
# be used in a frequently-processed queue: create cover page, map to new collection, send email notification.
#
# Other queues could be used for tasks that only need to be run overnight, perhaps because they're not time sensitive
# and might take a long time to run. Examples of these tasks could be pushing / pulling data from an integrated service
# or building / sending daily reports.
#
# The queued tasks are by default in [dspace.dir]/ctqueues/{queue_name}
#
# This work was based on https://github.com/UoW-IRRs/DSpace-Event-Consumers by Andrea Schweer for
# LCoNZ IRRs
#
# @see org.dspace.event.consumers.* and org.dspace.curate.QueueManager
# ------------------
# QueueTaskOnInstall
# ------------------
#
## Queue name for tasks when an item is installed
#
custom-events.queue.install.name = continually

## Tasks to queue when an item is installed (comma-separated)
#
#custom-events.queue.install.tasks = noop

## Event consumer configuration for 'on item install'
event.consumer.install_curate.class = org.dspace.event.consumers.QueueTaskOnInstall
event.consumer.install_curate.filters = Item+Install

# --------------------------
# QueueTaskOnBitstreamChange
# --------------------------
#
## Queue name for tasks when a bitstream changes
custom-events.queue.bitstreamchange.name = continually

## Tasks to queue when a bitstream is changed (comma-separated)
#custom-events.queue.bitstreamchange.tasks = noop

## Bundles to ignore
custom-events.queue.bitstreamchange.ignore_bundles = TEXT, THUMBNAIL

## Event consumer configuration for 'on bitstream change'
event.consumer.bitstreamchange_curate.class = org.dspace.event.consumers.QueueTaskOnBitstreamChange
event.consumer.bitstreamchange_curate.filters = Bundle|Bitstream+Add|Remove|Modify|Delete

# -------------------------------------------
# Consumers configured for default dispatcher
# -------------------------------------------
#
## Append our custom consumers to the default dispatcher (see: dspace.cfg)
#event.dispatcher.default.consumers = bitstreamchange_curate, install_curate