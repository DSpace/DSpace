user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    server {
       listen 80;
       server_name api.drum-local.lib.umd.edu;
       return 301 https://$server_name$request_uri;
    }

    server {
        # listen 8011;
        # HTTPS configuration
        listen 8443 ssl;
        server_name api.drum-local.lib.umd.edu;
        ssl_certificate /etc/nginx/certs/api.drum-local.pem;
        ssl_certificate_key /etc/nginx/certs/api.drum-local-key.pem;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        location / {
            # Using a variable so that Nginx will start, even if DSpace back-end
            # is down.
            # See https://stackoverflow.com/a/52319161 and/or
            # https://sandro-keil.de/blog/let-nginx-start-if-upstream-host-is-unavailable-or-down/
            resolver 127.0.0.11;
            set $DSPACE_BACKEND "dspace:8080";
            proxy_pass  http://$DSPACE_BACKEND;
            proxy_redirect                      off;
            proxy_set_header  Host              $http_host;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
            proxy_read_timeout                  900;
        }
    }
}
