h1. DSpace System Documentation: ConfigurationThere are a numbers of ways in which DSpace may be configured and/or customized. This chapter of the documentation will discuss the configuration of the software and will also reference customizations that may be performed in the chapter following.For ease of use, the Configuration documentation is broken into several parts:* Section 5.1 addresses general conventions used with configuring not only the dspace.cfg file, but other configuration files which use similar conventions. * Section 5.2 specifies the basic _dspace.cfg_ file settings* Section 5.3 contain other more advanced settings that are optional in the _dspace.cfg_ configuration file.h2. General ConfigurationIn the following sections you will learn about the different configuration files that you will need to edit so that you may make your DSpace installation work. Of the several configuration files which you will work with, it is the _dspace.cfg_ file you need to learn to configure first and foremost.In general, most of the configuration files, namely dspace.cfg and xmlui.xconf will provide a good source of information not only with configuration but also with customization (cf. Customization chapter)h3. Input ConventionsWe will use the _dspace.cfg_ as our example for input conventions used through out the system. It is a basic Java properties file, where lines are either comments, starting with a '_#_', blank lines, or property/value pairs of the form:_property.name = property value_Some property defaults are "commented out". That is, they have a "#" proceeding them, and the DSpace software ignores the config property. This may cause the feature not to be enabled, or, cause a default property to be used when the software is compiled and updated.The property value may contain _references_ to other configuration properties, in the form _$\{property.name\}_. This follows the _ant_ convention of allowing references in property files. A property may not refer to itself. Examples:{code}
property.name = word1 ${other.property.name} more words
property2.name = ${dspace.dir}/rest/of/path
{code}Property values can include other, previously defined values, by enclosing the property name in $\{...\}. For example, if your _dspace.cfg_ contains:{code}dspace.dir = /dspace
dspace.history = ${dspace.dir}/history
{code}Then the value of _dspace.history_ property is expanded to be _/dspace/history_. This method is especially useful for handling commonly used file paths.h3. Update ReminderThings you should know about editing _dspace.cfg_ files.It is important to rememeber that there are * two _dspace.cfg_ files after an installation of DSpace.*# The "source" file that is found in _\[dspace-source\]/dspace/config/dspace.cfg_# The "runtime" file that is found in _\[dspace\]/config/dspace.cfg_The runtime file is supposed to be the *copy* of the source file, which is considered the _master_ version. However, the DSpace server and command programs only look at the _runtime_ configuration file, so when you are revising your configuration values, it is tempting to _only edit the runtime file_. DO NOT do this. Always make the same changes to the source version of _dspace.cfg_ in addition to the runtime file. The two files _should_ always be identical, since the source _dspace.cfg_ will be the basis of your next upgrade.To keep the two files in synchronization, you can edit your files in _\[dspace-source\]/dspace/config/_ and then you would run the following commands:{code}
cd /[dspace-source]/dspace/target/dspace-<version>-build.dir
ant update_configs
{code}This will copy the source _dspace.cfg_ (along with other configuration files) into the runtime (_/\[dspace\]/config_) directory.You should remember that after editing your configuration file(s), and you are done and wish to implement the changes, you will need to:* To run _ant -Dconfig=/\[dspace\]/config/dspace.cfg update_ if you are updating your _dspace.cfg_ file and wish to see the changes appear. Follow the usual sequence with copying your webapps.* If you edit _dspace.cfg_ in _\[dspace-source\]/dspace/config/_, you should then run '_ant init_configs_' in the directory _\[dspace-source\]/dspace/target/dspace-1.5.2-build.dir_ so that any changes you may have made are reflected in the configuration files of other applications, for example Apache. You may then need to restart those applications, depending on what you changed. h2. The _dspace.cfg_ Configuration Properties FileThe primary way of configuring DSpace is to edit the _dspace.cfg_. You will definitely have to do this before you can run DSpace properly. _dspace.cfg_ contains basic information about a DSpace installation, including system path information, network host information, and other like items. To assist you in this endeavor, below is a place for you to write down some of the preliminary data so that you may facilitate faster configuration. Server IP:________________________________Host Name (Server name)________________________________dspace.url________________________________Administrator's email:________________________________handle prefix:________________________________assetstore directory:________________________________SMTP server:________________________________h3. The _dspace.cfg_ fileBelow is a brief "Properties" table for the _dspace.cfg_ file and the documented details are referenced. Please refer to those sections for the complete details of the parameter||*Property*||*Ref. Sect.*|||General Configurations ||{code}dspace.dir
dspace.url
dspace.baseUrl
dspace.oai.url
dspace.hostname
dspace.name{code}|5.2.2||Database Configurations ||{code}db.name
db.url
db.driver
db.username
db.password{code}|3.2.3 or 5.2.3||Advanced Database Configuration ||{code}db.schema
db.maxconnection
db.maxwait
db.maxidle
db.statementpool
db.poolname{code}|5.2.3||Email Settings ||{code}mail.server
mail.server.username
mail.server.password
mail.server.port
mail.from.address
feedback.recipient
mail.admin
alert.recipient
registration.notify
mail.charset
mail.allowed.referrers
mail.extraproperties
mail.server.disabled{code}|5.2.4||File Storage ||{code}assetstore.dir
[assetstore.dir.1
assetstore.dir.2
assetstore.incoming]{code}|5.2.5||SRB File Storage ||{code}srb.hosts.1
srb.port.1
srb.mcatzone.1
srb.mdasdomainname.1
srb.defaultstorageresource.1
srb.username.1
srb.password.1
srb.homedirectory.1
srb.parentdir.1{code}|5.2.6||Handle Configuration ||{code}handle.prefix
handle.dir{code}|5.2.7||Authorization System Configuration ||{code}core.authorization.community-admin.create-subelement
core.authorization.community-admin.delete-subelement
core.authorization.community-admin.policies
core.authorization.community-admin.admin-group
core.authorization.community-admin.collection.policies
core.authorization.community-admin.collection.template-item
core.authorization.community-admin.collection.submitters
core.authorization.community-admin.collection.workflows
core.authorization.community-admin.collection.admin-group
core.authorization.community-admin.item.delete
core.authorization.community-admin.item.withdraw
core.authorization.community-admin.item.reinstatiate
core.authorization.community-admin.item.policies
core.authorization.community-admin.item.create-bitstream
core.authorization.community-admin.item.delete-bitstream
core.authorization.community-admin.item-admin.cc-license
core.authorization.collection-admin.policies
core.authorization.collection-admin.template-item
core.authorization.collection-admin.submitters
core.authorization.collection-admin.workflows
core.authorization.collection-admin.admin-group
core.authorization.collection-admin.item.delete
core.authorization.collection-admin.item.withdraw
core.authorization.collection-admin.item.reinstatiate
core.authorization.collection-admin.item.policies
core.authorization.collection-admin.item.create-bitstream
core.authorization.collection-admin.item.delete-bitstream
core.authorization.collection-admin.item-admin.cc-license
core.authorization.item-admin.policies
core.authorization.item-admin.create-bitstream
core.authorization.item-admin.delete-bitstream
core.authorization.item-admin.cc-license{code}|5.2.45||Stackable Authentication Methods ||{code}plugin.sequence.org.dspace.authenticate.AuthenticationMethod{code}|5.2.8 or 5.2.9||LDAP Authentication ||{code}ldap.enable
ldap.provider_url
ldap.id_field
ldap.object_context
ldap.search_context
ldap.email_field
ldap.surname_field
ldap.givenname_field
ldap.phone_field
webui.ldap.autoregister
ldap.login.specialgroup{code}|5.2.8.5||_Hierarchical LDAP Settings:_{code}ldap.search_scope
ldap.search.user
ldap.netid_email_domain{code}|5.2.8.5||Shibboleth Authentication Settings ||{code}authentication.shib.email-header
authentication.shib.firstname-header
authentication.shib.lastname-header
authentication.shib.email-use-tomcat-remote-user
authentication.shib.autoregister
authentication.shib.role-header
authentication.shib.default-roles{code}|5.2.9-||Log Configuration ||_log.init.config_|5.2.10||Lucene Search Indexes ||{code}search.dir
search.max-clauses
search.analyzer
search.operator
search.maxfieldlengthsearch.index.n{code}|5.2.11||Proxy Settings ||{code}http.proxy.host
http.proxy.port{code}|5.2.12||Media Filter ||_filter.plugin_|5.2.13||{code}plugin.named.org.dspace.app.mediafilter.FormatFilter
     filter.org.dspace.app.mediafilter.PDFFilter.inputFormats
     filter.org.dspace.app.mediafilter.HTMLFilter.inputFormats
     filter.org.dspace.app.mediafilter.WordFilter.inputFormats
     filter.org.dspace.app.mediafilter.JPEGFilter.inputFormats
  filter.org.dspace.app.mediafilter.BrandedPreviewJPEGFilter.inputFormats{code}|5.2.13||{code}pdffilter.largepdfs
pdffilter.skiponmemoryexception{code}|5.2.13||Crosswalks (MODS, QDC, XSLT, etc.) ||{code}crosswalk.mods.properties.MODS
crosswalk.submission.MODS.stylesheet
crosswalk.qdc.namespace.QDC.dc
crosswalk.qdc.namespace.QDC.dcterms
crosswalk.qdc.schemaLocation.QDC
plugin.named.org.dspace.content.crosswalk.IngestionCrosswalk
plugin.named.org.dspace.content.crosswalk.DisseminationCrosswalk{code}|5.2.18||Event Settings ||{code}event.dispatcher.default.class
event.dispatcher.default.consumers
event.dispatcher.noindex.class
event.dispatcher.noindex.consumers
event.consumer.search.class
event.consumer.search.filters
event.consumer.browse.class
event.consumer.browse.filters
event.consumer.eperson.class
event.consumer.eperson.filters
event.consumer.test.class
event.consumer.test.filters
testConsumer.verbose{code}|5.2.19||Checksum Checker ||{code}plugin.single.org.dspace.checker.BitsreamDispatcher
checker.retention.default
checker.retention.CHECKSUM-MATCH{code}|5.2.20||Item Export and Download ||{code}org.dspace.app.itemexport.work.dir
org.dspace.app.itemexport.download.dir
org.dspace.app.itemexport.life.span.hours
org.dspace.app.itemexport.max.size{code}|5.2.21||Bulk Metadata Editing ||{code}bulkedit.valueseparator
bulkedit.fieldseparator
bulkedit.gui-item-limit
bulkedit.ignore-on-export{code}|5.2.46||Subscription Email Option ||_eperson.subscription.onlynew_|5.2.22||Submission Process ||_webui.submit.blocktheses_|5.2.23||_webui.submit.upload.required_|5.2.23||_webui.submit.enable-cc_|5.2.24||WEBUI Configurations \[General\] ||{code}webui.browse.thumbnail.max.height
webui.browse.thumbnail.max.width{code}|5.2.25||_webui.browse.thumbnail.linkbehaviour_|5.2.25||{code}thumbnail.maxwidth
thumbnail.maxheight{code}|5.2.25||_webui.preview.enabled_|5.2.25||{code}webui.preview.maxwidth
webui.preview.maxheight{code}|5.2.25||{code}webui.preview.brand
webui.preview.brand.abbrev{code}|5.2.25||_webui.preview.brand.height_|5.2.25||{code}webui.preview.brand.font
webui.preview.brank.fontpoint{code}|5.2.25||_webui.preview.dc_|5.2.25||{code}webui.strengths.show
webui.strengths.cache{code}|5.2.25||Browse Index Configuration ||_webui.browse.index.__n_|5.2.26||_webui.itemlist.sort-option.__n_|5.2.26||_webui.browse.medata.case-insensitive_|5.2.26.3||{code}webui.browse.value_columns.max
webui.browse.sort_columns.max
webui.browse.value_columns.omission_mark
plugin.named.org.dspace.sort.OrderFormatDelegate{code}|5.2.26.4||Mulitple Metadata Value Display ||_webui.browse.author-field_|5.2.27||_webui.browse.author-limit_|5.2.27||Other Browse Contexts ||_webui.browse.link.__n_|5.2.28||Recent Submission ||{code}recent.submission.sort-option
recent.submissions.count{code}|5.2.29||Syndication Feed (RSS) Settings ||{code}webui.feed.enable
webui.feed.items
webui.feed.cache.size
webui.cache.age
webui.feed.formats
webui.feed.localresolve
webui.feed.item.title
webui.feed.item.date
webui.feed.item.description{code}|5.2.30||Content Inline Disposition Threshold ||{code}webui.content_disposition_threshold
xmlui.content_disposition_threshold{code}|5.2.31||Multifile HTML Settings ||{code}webui.html.max-depth-guess
xmlui.html.max-depth-guess{code}|5.2.32||Other General Configuration Settings ||_sitemap.dir_|5.2.33||_sitemap.engineurls_|5.2.33||_upload.temp.dir_|5.2.34||_default.locale_|5.2.37||_itemmap.author.index_|5.2.38||_webui.mydspace.showgroupmembership_|5.2.39 ||_sfx.server.url_|5.2.40||{code}webui.suggest.enable
webui.suggest.loggedinusers.only{code}|5.2.41||_webui.controlledvocabulary.enable_|5.2.42||_oai.didl.maxresponse_|5.2.44||JSP Web Interface Settings ||{code}webui.licence_bundle.show
webui.itemdisplay.default
webui.resolver.1.urn
webui.resolver.1.baseurl
webui.resolver.2.urn
webui.resolver.2.baseurl
plugin.single.org.dspace.app.webui.util.StyleSelection
webui.itemdisplay.thesis.collections
webui.itemdisplay.metadata-style
webui.itemlist.column
webui.itemlist.width
webui.itemlist.browse.<index name>.sort.<sort name>.columns
webui.itemlist.sort<sort name>.columns
webui.itemlist.browse.<browse name>.columns
webui.itemlist.*lt;sort or index name>.columns
webui.itemlist.dateaccessioned.columns
webui.itemlist.dateaccessioned.widths
webui.itemlist.tablewidth{code}|5.2.36||XMLUI Settings (Manakin) ||{code}xmlui.supported.locales
xmlui.force.ssl
xmlui.user.registration
xmlui.user.assumelogon
xmlui.user.logindirect
xmlui.theme.allowoverrides
xmlui.bundle.upload
xmlui.community-list.render.full
xmlui.community-list.cache
xmlui.bitstream.mods
xmlui.bitstream.mets
xmlui.google.analytics.key
xmlui.controlpanel.activity.max
xmlui.controlpanel.activity.ipheader{code}|5.2.43|h3. Main DSpace Configurations|Property: |_dspace.dir_||Example Value: |_/dspace_||Informational Note: |Root directory of DSpace installation. Omit the trailing '_/_'. Note that if you change this, there are several other parameters you will probably want to change to match, e.g. _assetstore.dir_.|| ||Property: |_dspace.baseUrl_||Example Value: |_http://dspacetest.myu.edu:8080_||Informational Note: |Main URL at which DSpace Web UI webapp is deployed. Include any port number, but do not include the trailing '_/_'.|| ||Property: |_dspace.url_||Example Value: |_dspace.url = $\{dspace.baseUrl\}/jspui_||Informational note |DSpace base URL. Include port number etc., but NOT trailing slash. Change to _/xmlui_ if you wish to use the xmlui (Manakin) as the default, or remove "_/jspui_" and set webapp of your choice as the "ROOT" webapp in the servlet engine.|| ||Property: |_dspace.oai.url_||Example Value: |_dspace.oai.url = $\{dspace.baseUrl\}/oai_||Informational note: |The base URL of the OAI webapp (do not include /request). || ||Property: |_dspace.hostname _||Example Value: |_dspace.hostname = dspace.mysu.edu_||Informational Note: |Fully qualified hostname; do not include port number. || ||Property: |_dspace.name_||Example Value: |_dspace.name = DSpace at My University_||Informational Note: |Short and sweet site name, used throughout Web UI, e-mails and elsewhere (such as OAI protocol) |h3. DSpace Database ConfigurationMany of the database configurations are software-dependent. That is, it will be based on the choice of database software being used. Documentation is below shows PostgreSQL and Oracle examples.|Property: |_db.name_||Example Value: |_db.name = postgres_||Informational Note: |In _dspace.cfg_ you choose either _postgres_ or _oracle_.|| ||Property: |_db.url _||Example Value: |_db.url = jdbc:postgresql://localhost:5432/dspace_-services ||Informational Note: |The above value is the default value when configuring with PostgreSQL. When using Oracle, use this value: _jbdc.oracle.thin:@//host:port/dspace_|| ||Property: |_db.username_||Example Value: |_db.username = dspace_||Informational Note: |In the installation directions, the administrator is instructed to create the user "dspace" who will own the database "dspace". || ||Property: |_password_||Example Value: |_password = dspace5_||Informational Note: |This is the password that was prompted during the installation process (cf. 3.2.3. Installation) || ||Property: |_db.schema_||Example Value: |_db.schema = vra_||Informational Note: |If your database contains multiple schemas, you can avoid problems with retrieving the definitions of duplicate objects by specifying the schema name here that is used for DSpace by uncommenting the entry. *This is commented out*|| ||Property: |_db.maxconnections_||Example Value: |_db.maxconnections = 30_||Informational Note: |Maximum number of DB connections in pool || ||Property: |_db.maxwait_||Example Value: |_db.maxwait = 5000_||Informational Note: |Maximum time to wait before giving up if all connections in pool are busy (in milliseconds). || ||Property: |_db.maxidle_||Example Value: |_db.maxidle = -1_||Informational Note: |Maximum number of idle connections in pool. (_-1_ = unlimited)|| ||Property: |_db.statementpool_||Example Value: |_db.statementpool = true_||Informational Note: |Determines if prepared statement should be cached. (Default is set to true) || ||Property: |_db.poolname_||Example Value: |_db.poolname = dspacepool_||Informational Note: |Specify a name for the connection pool. This is useful if you have multiple applications sharing Tomcat's database connection pool. If nothing is specified, it will default to 'dspacepool' |h3. DSpace Email SettingsThe configuration of email is simple and provides a mechanism to alert the person(s) responsible for different features of the DSpace software.|Property: |_mail.server_||Example Value: |_mail.server = smtp.my.edu_||Informational Note: |SMTP Mail Server  || ||Property: |{code}mail.server.username
mail.server.password{code}||Example Value: |{code}mail.server.username = myusername
mypassword{code}||Informational Note: |SMTP mail server authentication username and password, if required. || ||Property: |_mail.server.port_||Example Value: |_mail.server.port = 25_||Informational Note: |SMTP mail server alternate port (Defaults to port 25 when commented out). || ||Property: |_mail.from.address_||Example Value: |_mail.from.address = dspace-noreply@myu.edu_||Informational Note: |The "From" address for email. Change the 'myu.edu' to the site's host name. || ||Property: |_feedback.recipient_||Example Value: |_feedback.recipient = dspace-help@myu.edu_||Informational Note: |When a user clicks on the feedback link/feature, the information will be send to the email address of choice. This configuration is currently limited to only one recipient. || ||Property: |_mail.admin_||Example Value: |_mail.admin = dspace-help@myu.edu_||Informational Note: |Email address of the general site administrator (Webmaster) || ||Property: |_alert.recipient_||Example Value: |_alert.recipient = john.doe@myu.edu_||Informational Note: |Enter the recipient for server errors and alerts. || ||Property: |_registration.notify_||Example Value: |_registration.notify = mike.smith@myu.edu_||Informational Note: |Enter the recipient that will be notified when a new user registers on DSpace. || ||Property: |_mail.charset_||Example Value: |_mail.charset = UTF8_||Informational Note: |Set the default mail character set. This may be over-ridden by providing a line inside the email template "_charset: <encoding>_", otherwise this default is used.|| ||Property: |_mail.allowed.referrers_||Example Value: |_mail.allowed.referrers = localhost_||Informational Note: |A comma separated list of hostnames that are allowed to refer browsers to email forms. Default behaviour is to accept referrals only from dspace.hostname || ||Property: |_mail.extraproperties_||Example Value: |{code}mail.extraproperties = mail.smtp.socketFactory.port=465, \
                           mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory, \
                           mail.smtp.socketFactory.fallback=false{code}||Informational Note: |If you need to pass extra settings to the Java mail library. Comma separated, equals sign between the key and the value. By default, commented out. || ||Property: |_mail.server.disabled_||Example Vavlue: |_mail.server.disabled = false_||Informational Note: |An option is added to disable the mailserver. By default, this property is set to false. By setting value to 'true', DSpace will not send out emails. It will instead log the subject of the email which should have been sent. This is especially useful for development and test environments where production data is used when testing functionality. |h4. Wording of E-mail MessagesSometimes DSpace automatically sends e-mail messages to users, for example to inform them of a new work flow task, or as a subscription e-mail alert. The wording of emails can be changed by editing the relevant file in _\[dspace\]/config/emails_. Each file is commented. Be careful to keep the right number 'placeholders' (e.g._\{2\}_).*Note:* You should replace the contact-information "_dspace-help@myu.edu or call us at xxx-555-xxxx_" with your own contact details in:_config/emails/change_password__config/emails/register_h3. File StorageThis is the default "technique" that is used by DSpace to store the bitstreams. DSpace can also use SRB (Storage Resource Brokerage) as an alternative. See section 5.2.6 for details regarding SRB.|Property: |_assetstore.dir_||Example Value: |_assetstore.dir = $\{dspace.dir\}/assetstore_||Informational Note: |This is Asset (bitstream) store number 0 (Zero). You need not place your assetstore under the _/dspace_ directory, but may want to place it on a different logical volume on the server that DSpace resides. So, you might have something like this: _ assetstore.dir = /storevgm/assestore_. || ||Property: |{code}assetstore.dir.1
assetstore.dir.2{code}||Example Value: |{code}assetstore.dir.1 = /second/assetstore
assetstore.dir.2 = /third/assetstore{code}||Informational Note: |This property specifies extra asset stores like the one above, counting from one (1) upwards. This property is commented out (#) until it is needed. || ||Property: |_assetstore.incoming_||Example Value: |_assetstore.incoming = 1_||Informational Note: |Specify the number of the store to use for new bitstreams with this property. The default is 0 \[zero\] which corresponds to the 'assestore.dir' above. |In the examples above, you can see that your storage does not have to be under the _/dspace_ directory. For the default installation it needs to reside on the same server (unless you plan to configure SRB (cf. below)). So, if you added storage space to your server, and it has a different logical volume/name/directory, you could have the following as an example:_assetstore.dir = /storevgm/assetstore__assetstore.dir.1 = /storevgm2/assetstore__assetstore.incoming = 1_*Please Note:* When adding additional storage configuration, you will then need to uncomment and declare _assestore.incoming = 1_h3. SRB (Storage Resource Brokerage) File StorageAn alternate to using the default storage framework is to use Storage Resource Brokerage (SRB). This can provide a different level of storage and disaster recovery. (Storage can take place on storage that is off-site.) Refer to [http://www.sdsc.edu/srb/index.php/Main_Page|http://www.sdsc.edu/srb/index.php/Main_Page|http://www.sdsc.edu/srb/index.php/Main_Page] for complete details regarding SRB.The same framework is used to configure SRB storage. That is, the asset store number (0..n) can reference a file system directory as above or it can reference a set of SRB account parameters. But any particular asset store number can reference one or the other but not both. This way traditional and SRB storage can both be used but with different asset store numbers. The same cautions mentioned above apply to SRB asset stores as well. The particular asset store a bitstream is stored in is held in the database, so don't move bitstreams between asset stores, and do not renumber them.|Property: |_srb.hosts.1_||Example value: |_srb.hosts.1 = mysrbmcathost.myu.edu_||Property: |_srb.port.1_||Example value: |_srb.port.1 = 5544_||Property: |_srb.mcatzone.1_||Example value: |_srb.mcatzone.1 = mysrbzone_||Property: |_srb.mdasdomainname.1_||Example value: |_srb.mdasdomainname.1 = mysrbdomain_||Property: |_srb.defaultstorageresource.1_||Example value: |_srb.defaultstorageresource.1 = mydefaultsrbresource_||Property: |_srb.username.1_||Example value: |_srb.username.1 = mysrbuser_||Property: |_srb.password.1_||Example value: |_srb.password.1 = mysrbpassword_||Property: |_srb.homedirectory.1_||Example value: |{code}srb.homedirectory.1 = /mysrbzone/home/mysrbuser.mysrbdomain
 {code}||Property: |_srb.parentdir.1_||Example value: |_srb.parentdir.1 = mysrbdspaceassetstore_||Informational Note: |Several of the terms, such as _mcatzone_, have meaning only in the SRB context and will be familiar to SRB users. The last, _srb.paratdir.n_, can be used for additional (SRB) upper directory structure within an SRB account. This property value could be blank as well.|The 'assetstore.incoming' property is an integer that references where *new* bitstreams will be stored. The default (say the starting reference) is zero. The value will be used to identify the storage where all new bitstreams will be stored until this number is changed. This number is stored in the Bitstream table (store_number column) in the DSpace database, so older bitstreams that may have been stored when 'asset.incoming' had a different value can be found.In the simple case in which DSpace uses local (or mounted) storage the number can refer to different directories (or partitions). This gives DSpace some level of scalability. The number links to another set of properties 'assetstore.dir', 'assetstore.dir.1' (remember zero is default), assetstore.dir.2', etc., where the values are directories.To support the use of SRB DSpace uses the same scheme but broaden to support:* using SRB instead of the local file system * using the local file system (native DSpace) * using a mix of SRB and local file system in this broadened use of the 'asset.incoming' integer will refer to one of the following storage locations:* a local file system directory (native DSpace) * a set of SRB account parameters (host, port, zone, domain, username, password, home directory, and resource Should the be any conflict, like '2' referring to a local directory and to a set of SRB parameters, the program will select the local directory.If SRB is chosen from the first install of DSpace, it is suggested that 'assetstore.dir' (no integer appended) be retained to reference a local directory (as above under File Storage) because build.xml uses this value to do a mkdir. In this case, 'assetstore.incoming' can be set to 1 (i.e. uncomment the line in File Storage above) and the 'assetstore.dir' will not be used.h3. Handle Server Configuration|Property: |_handle.prefix_||Example Value |_handle.prefix = 1234.56789_||Informational Note: |The default installed by DSpace is _123456789_ but you will replace this upon receiving a handle from CNRI.|| ||Property: |_handle.dir_||Example Value: |_handle.dir = $\{dspace.dir\}/handle-server_||Informational Note: |The default files, as shown in the Example Value is where DSpace will install the files used for the Handle Server. |For complete information regarding the Handle server, the user should consult 3.3.4. The Handle Server section of Installing DSpace.h3. Stackable Authentication Method(s)(formally Custom Authentication)Since many institutions and organizations have existing authentication systems, DSpace has been designed to allow these to be easily integrated into an existing authentication infrastructure. It keeps a series, or "stack", of _authentication methods_, so each one can be tried in turn. This makes it easy to add new authentication methods or rearrange the order without changing any existing code. You can also share authentication code with other sites.|Property: |_plugin.sequence.org.dspace.authenticate.AuthenticationMethod_||Example Value: |{code}plugin.sequence.org.dspace.authenticate.AuthenticationMethod = \
          org.dspace.authenticate.PasswordAuthentication{code}|The configuration property _plugin.sequence.org.dspace.authenticate.AuthenticationMethod_ defines the authentication stack. It is a comma-separated list of class names. Each of these classes implements a different _authentication method_, or way of determining the identity of the user. They are invoked in the order specified until one succeeds.An authentication method is a class that implements the interface _org.dspace.authenticate.AuthenticationMethod_. It _authenticates_ a user by evaluating the _credentials_ (e.g. username and password) he or she presents and checking that they are valid.The basic authentication procedure in the DSpace Web UI is this:# A request is received from an end-user's browser that, if fulfilled, would lead to an action requiring authorization taking place. #  If the end-user is already authenticated:  #* If the end-user is allowed to perform the action, the action proceeds #* If the end-user is NOT allowed to perform the action, an authorization error is displayed. #* If the end-user is NOT authenticated, i.e. is accessing DSpace anonymously: #  The parameters etc. of the request are stored #  The Web UI's _startAuthentication_ method is invoked.#  First it tries all the authentication methods which do _implicit_ authentication (i.e. they work with just the information already in the Web request, such as an X.509 client certificate). If one of these succeeds, it proceeds from Step 2 above.#  If none of the implicit methods succeed, the UI responds by putting up a "login" page to collect credentials for one of the _explicit_ authentication methods in the stack. The servlet processing that page then gives the proffered credentials to each authentication method in turn until one succeeds, at which point it retries the original operation from Step 2 above.Please see the source files _AuthenticationManager.java_ and _AuthenticationMethod.java_ for more details about this mechanism.h4. Authentication by PasswordThe default method _org.dspace.authenticate.PasswordAuthentication_ has the following properties:*  Use of inbuilt e-mail address/password-based log-in. This is achieved by forwarding a request that is attempting an action requiring authorization to the password log-in servlet, _/password-login_. The password log-in servlet (_org.dspace.app.webui.servlet.PasswordServlet_ contains code that will resume the original request if authentication is successful, as per step 3. described above.*  Users can register themselves (i.e. add themselves as e-people without needing approval from the administrators), and can set their own passwords when they do this *  Users are not members of any special (dynamic) e-person groups *  You can restrict the domains from which new users are able to register. To enable this feature, uncomment the following line from dspace.cfg: _authentication.password.domain.valid = example.com_ Example options might be '_@example.com_' to restrict registration to users with addresses ending in @example.com, or '_@example.com, .ac.uk_' to restrict registration to users with addresses ending in @example.com or with addresses in the .ac.uk domain.h4. X.509 Certificate AuthenticationThe X.509 authentication method uses an X.509 certificate sent by the client to establish his/her identity. It requires the client to have a personal Web certificate installed on their browser (or other client software) which is issued by a Certifying Authority (CA) recognized by the web server.#  See the HTTPS installation instructions to configure your Web server. If you are using HTTPS with Tomcat, note that the _<Connector>_ tag _must_ include the attribute _clientAuth="true"_ so the server requests a personal Web certificate from the client.#  Add the _org.dspace.authenticate.X509Authentication_ plugin _first_ to the list of stackable authentication methods in the value of the configuration key _plugin.sequence.org.dspace.authenticate.AuthenticationMethod__e.g.:_{code}
                            plugin.sequence.org.dspace.authenticate.AuthenticationMethod = \
                             org.dspace.authenticate.X509Authentication, \
                             org.dspace.authenticate.PasswordAuthentication
                        {code}#  You must also configure DSpace with the same CA certificates as the web server, so it can accept and interpret the clients' certificates. It can share the same keystore file as the web server, or a separate one, or a CA certificate in a file by itself. Configure it by _one_ of these methods, either the Java keystore {code}
             authentication.x509.keystore.path =  path to Java keystore file
             authentication.x509.keystore.password =  password to access the keystore{code} ...or the separate CA certificate file (in PEM or DER format):  {code}authentication.x509.ca.cert =  path to certificate file for CA
                                          whose client certs to accept.{code}#  Choose whether to enable auto-registration: If you want users who authenticate successfully to be automatically registered as new E-Persons if they are not already, set the _authentication.x509.autoregister_ configuration property to _true_. This lets you automatically accept all users with valid personal certificates. The default is _false_.h4. Example of a Custom Authentication MethodAlso included in the source is an implementation of an authentication method used at MIT, _edu.mit.dspace.MITSpecialGroup_. This does not actually authenticate a user, it _only_ adds the current user to a special (dynamic) group called 'MIT Users' (which must be present in the system!). This allows us to create authorization policies for MIT users without having to manually maintain membership of the MIT users group.By keeping this code in a separate method, we can customize the authentication process for MIT by simply adding it to the stack in the DSpace configuration. None of the code has to be touched.You can create your own custom authentication method and add it to the stack. Use the most similar existing method as a model, e.g. _org.dspace.authenticate.PasswordAuthentication_ for an "explicit" method (with credentials entered interactively) or _org.dspace.authenticate.X509Authentication_ for an implicit method.h4. Configuring IP AuthenticationYou can enable IP authentication by adding its method to the stack in the DSpace configuration, e.g.:{code} plugin.sequence.org.dspace.authenticate.AuthenticationMethod =
                              org.dspace.authenticate.IPAuthentication {code}You are than able to map DSpace groups to IP's in dspace.cfg by setting _authentication.ip.GROUPNAME = iprange\[, iprange ...\],_ e.g:{code}
 authentication.ip.MY_UNIVERSITY = 10.1.2.3, \            # Full IP
                                   13.5, \                # Partial IP
                                   11.3.4.5/24, \         # with CIDR
                                   12.7.8.9/255.255.128.0 # with netmask
 {code}Negative matches can be set by prepending the entry with a '-'. For example if you want to include all of a class B network except for users of a contained class c network, you could use: 111.222,-111.222.333.*Note:* if the Groupname contains blanks you must escape the, e.g. Department\ of\ Statisticsh4. Configuring LDAP AuthenticationYou can enable LDAP authentication by adding its method to the stack in the DSpace configuration, e.g.{code}
                plugin.sequence.org.dspace.authenticate.AuthenticationMethod =
                     org.dspace.authenticate.LDAPAuthentication
                          {code}If LDAP is enabled in the dspace.cfg file, then new users will be able to register by entering their username and password without being sent the registration token. If users do not have a username and password, then they can still register and login with just their email address the same way they do now.If you want to give any special privileges to LDAP users, create a stackable authentication method to automatically put people who have a netid into a special group. You might also want to give certain email addresses special privileges. Refer to the Custom Authentication Code section above for more information about how to do this.Here is an explanation of what each of the different configuration parameters are for:|Standard LDAP Configuration ||Property: |_ldap.enable_||Example Value: |_ldap.enable = false_||Informational Note: |This setting will enable or disable LDAP authentication in DSpace. With the setting off, users will be required to register and login with their email address. With this setting on, users will be able to login and register with their LDAP user ids and passwords. || ||Property: |_ldap.provider_url_||Example Value: |_ldap.provider_url = ldap://ldap.myu.edu/o=myu.edu_||Informational Note: |This is the url to your institution's LDAP server. You may or may not need the /o=myu.edu part at the end. Your server may also require the ldaps:// protocol. || ||Property: |_ldap.id_field_||Example Value: |_ldap.id_field = uid_||Explanation: |This is the unique identifier field in the LDAP directory where the username is stored. || ||Property: |_ldap.object_context_||Example Value: |_ldap.object_context = ou=people, o=myu.edu_||Informational Note: |This is the object context used when authenticating the user. It is appended to the _ldap.id_field_ and username. For example _uid=username,ou=people,o=myu.edu_. You will need to modify this to match your LDAP configuration.|| ||Property: |_ldap.search_context_||Example Value: |_ldap.search_context = ou=people_||Informational Note: |This is the search context used when looking up a user's LDAP object to retrieve their data for autoregistering. With ldap.autoregister turned on, when a user authenticates without an EPerson object we search the LDAP directory to get their name and email address so that we can create one for them. So after we have authenticated against _uid=username,ou=people,o=byu.edu_ we now search in ou=people for filtering on \[uid=username\]. Often the _ldap.search_context_ is the same as the _ldap.object_context_ parameter. But again this depends on your LDAP server configuration.|| ||Property: |_ldap.email_field_||Example Value: |_ldap.email_field = mail_||Informational Note: |This is the LDAP object field where the user's email address is stored. "mail" is the default and the most common for ldap servers. If the mail field is not found the username will be used as the email address when creating the eperson object. || ||Property: |_ldap.surname_field_||Example Value: |_ldap.surname_field = sn_||Informational Note: |This is the LDAP object field where the user's last name is stored. "sn" is the default and is the most common for LDAP servers. If the field is not found the field will be left blank in the new eperson object. || ||Property: |_ldap.givenname_field_||Example Value: |_ldap.givenname_field = givenName_||Informational Note: |This is the LDAP object field where the user's given names are stored. I'm not sure how common the givenName field is in different LDAP instances. If the field is not found the field will be left blank in the new eperson object. || ||Property: |_ldap.phone_field_||Example Value: |_ldap.phone_field = telephoneNumber_||Informational Note: |This is the field where the user's phone number is stored in the LDAP directory. If the field is not found the field will be left blank in the new eperson object. || ||Property: |_webui.ldap.autoregister_||Example Value: |_webui.ldap.autoregister = true_||Informational Note: |This will turn LDAP autoregistration on or off. With this on, a new EPerson object will be created for any user who successfully authenticates against the LDAP server when they first login. With this setting off, the user must first register to get an EPerson object by entering their ldap username and password and filling out the forms.  ||LDAP Users Group ||Property: |_ldap.login.specialgroup_||Example Value: |_ldap.login.specialgroup = group-name_||Informational Note: |If required, a group name can be given here, and all users who log into LDAP will automatically become members of this group. This is useful if you want a group made up of all internal authenticated users. (Remember to log on as the administrator, add this to the "Groups" with read rights).  |*Hierarchical LDAP Settings.*# If your users are spread out across a hierarchical tree on your LDAP server, you will need to use the following stackable authentication class:{code}
plugin.sequence.org.dspace.authenticate.AuthenticationMethod = \
       org.dspace.authenticate.LDAPHierarchicalAuthentication{code}You can optionally specify the search scope. If anonymous access is not enabled on your LDAP server, you will need to specify the full DN and password of a user that is allowed to bind in order to search for the users. |Property: |_ldap.search_scope_||Example Value: |_ldap.search_scope = 2_||Informational Note: | This is the search scope value for the LDAP search during autoregistering. This will depend on your LDAP server setup. This value must be one of the following integers corresponding to the following values: {code}object scope : 0
one level scope : 1
subtree scope : 2{code}|| ||Property: |{code}ldap.search.user
ldap.search.password{code}||Example Value: |{code}ldap.search.user = cn=admin,ou=people,o=myu.edu
ldap.search.password = password{code}||Informational Note: |The full DN and password of a user allowed to connect to the LDAP server and search for the DN of the user trying to log in. If these are not specified, the initial bind will be performed anonymously. || ||Property: |_ldap.netid_email_domain = _||Example Value: |_ldap.netid_email_domain = @example.com_||Informational Note: |If your LDAP server does not hold an email address for a user, you can use the following field to specify your email domain. This value is appended to the netid in order to make an email address. E.g. a netid of 'user' and _ldap.netid_email_domain_ as _@example.com_ would set the email of the user to be _user@example.com_|h3. Shibboleth Authentication Configuration SettingsDetailed instructions for installing Shibboleth on DSpace may be found at[https://mams.melcoe.mq.edu.au/zope/mams/pub/Installation/dspace15|https://mams.melcoe.mq.edu.au/zope/mams/pub/Installation/dspace15|https://mams.melcoe.mq.edu.au/zope/mams/pub/Installation/dspace15].DSpace requires email as the user's credentials. There are two ways of providing email to DSpace:# By explicitly specifying to the user which attribute (header) carries the email address. # By turning on the user-email-using-tomcat=true which means the software will attempt to acquire the user's email from Tomcat. The first option takes *Precedence* when specified. both options can be enabled to allow for fallback.|Property: |_authentication.shib.email-header_||Example Value: |_authentication.shib.email-header = MAIL_||Informational Note: |The option specifies that the email comes from the mentioned header. This value is CASE-Sensitive. || ||Property: |_authentication.shib.firstname-header_||Example Value: |_authentication.shib.firstname-header = SHIB-EP-GIVENNAME_||Informational Note: |Optional. Specify the header that carries the user's first name. This is going to be used for the creation of new-user. || ||Property: |_authentication.shib.lastname-header_||Example Value: |_authentication.shib.lastname-header = SHIB-EP-SURNAME_||Informational Note: |Optional. Specify the header that carries user's last name. This is used for creation of new user. || ||Property: |_authentication.shib.email-use-tomcat-remote-user_||Example Value: |_authentication.shib.email-use-tomcat-remote-user = true_||Informational Note: |This option forces the software to acquire the email from Tomcat. || ||Property: |_authentication.shib.autoregister_||Example Value: |_authentication.shib.autoregister = true_||Informational Note: |Option will allow new users to be registered automatically if the IdP provides sufficient information (and the user does not exist in DSpace || ||Property: |{code}authentication.shib.role-header
authentication.shib-role.header.ignore-scope{code}||Example Value: |{code}authentication.shib.role-header = Shib-EP-ScopedAffiliation
authentication.shib-role.header.ignore-scope = true{code} or {code}authentication.shib.role-header = Shib-EP-UnscopedAffiliation
 authentication.shib-role.header.ignore-scope = false{code}||Informational Note: |These two options specify which attribute that is responsible for providing user's roles to DSpace and unscope the attributes if needed. When not specified, it is defaulted to 'Shib-EP-UnscopedAffiliation', and ignore-scope is defaulted to 'false'. The value is specified in AAP.xml (Shib 1.3.x) or attribute-filter.xml (Shib 2.x). The value is CASE-Sensitive. The values provided in this header are separated by semi-colon or comma. If your sp only provides scoped role header, you need to set authentication.shib.role-header.ignore-Scope as true. For example if you only get Shib-EP-ScopedAffiliation instead of Shib-EP-ScopedAffiliation, you name to make your settings as in the example value above.  || ||Property: |_authentication.shib.default-roles_||Example Value: |_authentication.shib.default-roles = Staff, Walk-ins_||Informational Note: |When user is fully authN or IdP but would not like to release his/her roles to DSpace (for privacy reasons?), what should the default roles be given to such user. The values are separated by semi-colon or comma. || ||Property: |{code}authentication.shib.role.Senior\ Researcher
authentication.shib.role.Librarian{code}||Example Value: |{code}authentication.shib.role.Senior\ Researcher = Researcher, Staff
authentication.shib.role.Librarian = Administrator{code}||Informational Note: |The following mappings specify role mapping between IdP and Dspace. The left side of the entry is IdP's role (prefixed with "authentication.shib.role.") which will be mapped to the right entry from DSpace. DSpace's group as indicated on the right entry has to EXIST in DSpace, otherwise user will be identified as 'anonymous'. Multiple values on the right entry should be separated by comma. The values are CASE-Sensitive. Heuristic one-to-one mapping will be done when the IdP groups entry are not listed below (i.e. if "X" group in IdP is not specified here, then it will be mapped to "X" group in DSpace if it exists, otherwise it will be mapped to simply 'anonymous'). Given sufficient demand, future release could support regex for the mapping special characters need to be escaped by '\' || |h3. Logging ConfigurationThe following settings are currently *not* used by XMLUI. XMLUI writes its logs to _\[dspace-xmlui\]/WEB-INF-logs/_ in the actual XMLUI web application.|Property: |_log.init.config_||Example Value: |_log.init.config = $\{dspace.dir\}/config/log4j.properties_||Informational Note: |This is where your configure file is located. You may override default log4j configuration by provided your own configurations. Existing alternatives are: {code}
log.init.config = ${dspace.dir}/config/log4j.xml
log.init.config = ${dspace.dir}/config/log4j-console.properties{code}|| ||Property: |_log.dir_||Example value: |_log.dir = $\{dspace.dir\}/log_||Informational Note: |This is where to put the logs. (This is used for initial configuration only) |h3. Configuring Lucene Search IndexesSearch indexes can be configured and customized easily in the _dspace.cfg_ file. This allows institutions to choose which DSpace metadata fields are indexed by Lucene.|Property: |_search.dir_||Example Value: |_search.dir = $\{dspace.dir\}/search_||Informational Note |Where to put the search index files || ||Property: |_search.max-clauses_||Example Value: |_search.max-clauses = 2048_||Informational Note |By setting higher values of search.max-clauses will enable prefix searches to work on larger repositories. || ||Property: |_search.analyzer_||Example Value: |_search.analyzer = org.dspace.search.DSAnalyzer_||Informational Note |Which Lucene Analyzer implementation to use. If this is omitted or commented out, the standard DSpace analyzer (designed for English) is used by default. || ||Property: |_search.analyzer_||Example Value: |{code}
search.analyzer = \
     org.apache.lucene.analysis.cn.ChineseAnalyzer{code}||Informational Note |Instead of the standard English analyzer, the Chinese analyzer is used. || ||Property: |_search.operator_||Example Value: |_search.operator = OR_||Informational Note |Boolean search operator to use. The currently supported values are OR and AND. If this configuration item is missing or commented out, OR is used. AND requires all the search terms to be present. OR requires one or more search terms to be present. || ||Property: |_search.maxfieldlength_||Example Value: |_search.maxfieldlength = 10000_||Informational Note |This is the maximum number of terms indexed for a single field in Lucene. The default is 10,000 words—often not enough for full-text indexing. If you change this, you will need to re-index for the change to take effect on previously added items. _-1_ = unlimited (Integer.MAG_VALUE)|| ||Property: |_search.index.__n_||Example Value: |_search.index.1 = author:dc.contributor.*_||Informational Note |See the details of this particular entry below. |For example, the following entries appear in the default DSpace installation:{code}
search.index.1 = author:dc.contributor.*
search.index.2 = author:dc.creator.*
search.index.3 = title:dc.title.*
search.index.4 = keyword:dc.subject.*
search.index.5 = abstract:dc.description.abstract
search.index.6 = author:dc.description.statementofresponsibility
search.index.7 = series:dc.relation.ispartofseries
search.index.8 = abstract:dc.description.tableofcontents
search.index.9 = mime:dc.format.mimetype
search.index.10 = sponsor:dc.description.sponsorship
search.index.11 = id:dc.identifier.*
search.index.11 = language:dc.language.iso
{code}The format of each entry is _search.index.<id> = <search label> : <schema> . <metadata field>_ where:|_<id>_|is an incremental number to distinguish each search index entry ||_<search label>_|is the identifier for the search field this index will correspond to ||_<schema>_|is the schema used. Dublin Core (DC) is the default. Others are possible. ||_<metadata field>_|is the DSpace metadata field to be indexed. |In the example above, _search.index.1_ and _search.index.2_ and _search.index.3_ are configured as the _author_ search field. The _author_ index is created by Lucene indexing all _dc.contributor.*_, _dc.creator.*_ and _description.statementofresponsibility_ metadata fields.After changing the configuration run _/\[dspace\]/bin/index-init_ to regenerate the indexes.While the indexes are created, this only affects the search results and has no effect on the search components of the user interface. One will need to customize the user interface to reflect the changes, for example, to add the a new search category to the Advanced Search.In the above examples, notice the asterisk (*). The metadata field (at least for Dublin Core) is made up of the "element" and the "qualifier". The asterisk is used as the "wildcard". So, for example, _keyword.dc.subject.*_ will index all subjects regardless if the term resides in a qualified field. (subject versus subject.lcsh). One could customize the search and only index LCSH (Library of Congress Subject Headings) with the following entry _keyword:dc.subject.lcsh__ instead_ of _keyword:dc.subject.*_h3. Proxy SettingsThese settings for proxy are commented out by default. Uncomment and specify both properties if proxy server is required for external http requests. Use regular host name without port number.|Property: |_http.proxy.host_||Example Value |_http.proxy.host = proxy.myu.edu_||Informational Note |Enter the host name without the port number. || ||Property: |_http.proxy.port_||Example Value |_http.proxy.port = 2048_||Informational Note |Enter the port number for the proxy server. |h3. Configuring Media FiltersMedia or Format Filters are classes used to generate derivative or alternative versions of content or bitstreams within DSpace. For example, the PDF Media Filter will extract textual content from PDF bitstreams, the JPEG Media Filter can create thumbnails from image bitstreams.Media Filters are configured as Named Plugins, with each filter also having a separate configuration setting (in _dspace.cfg_) indicating which formats it can process. The default configuration is shown below.|Property: |_filter.plugins_||Example Value: |_(See example below)_||{code}filter.plugins = PDF Text Extractor, Html Text Extractor, \
                         Word Text Extractor, JPEG Thumbnail{code}||Informational Note: |Place the names of the enabled MediaFilter or FormatFilter plugins. To enable Branded Preview, comment out the previous one line and then uncomment the two lines in found in _dspace.cfg_: {code}Word Text Extractor, JPEG Thumbnail,\
     Branded Preview JPEG{code}|| ||Property: |_plugin.named.org.dspace.app.mediafilter.FormatFilter_||Example Value: |_(See example below)_||{code}plugin.named.org.dspace.app.mediafilter.FormatFilter = \
         org.dspace.app.mediafilter.PDFFilter = PDF Text Extractor, \
         org.dspace.app.mediafilter.HTMLFilter = HTML Text Extractor, \
         org.dspace.app.mediafilter.WordFilter = Word Text Extractor, \
         org.dspace.app.mediafilter.JPEGFilter = JPEG Thumbnail, \
         org.dspace.app.mediafilter.BrandedPreviewJPEGFilter = Branded Preview JPEG{code}||Informational Note: |Assign "human-understandable" names to each filter || ||Property: |_(See key below)_||{code}filter.org.dspace.app.mediafilter.PDFFilter.inputFormats
filter.org.dspace.app.mediafilter.HTMLFilter.inputFormats
filter.org.dspace.app.mediafilter.WordFilter.inputFormats
filter.org.dspace.app.mediafilter.JPEGFilter.inputFormats
filter.org.dspace.app.mediafilter.BrandedPreviewJPEGFilter.inputFormats{code}||Example Value: |_(See example below)_||{code}filter.org.dspace.app.mediafilter.PDFFilter.inputFormats = Adobe PDF
filter.org.dspace.app.mediafilter.HTMLFilter.inputFormats = HTML, Text
filter.org.dspace.app.mediafilter.WordFilter.inputFormats = Microsoft Word
filter.org.dspace.app.mediafilter.JPEGFilter.inputFormats = BMP, GIF, JPEG, \
                                                            image/png
filter.org.dspace.app.mediafilter.BrandedPreviewJPEGFilter.inputFormats = BMP, \
                                                   GIF, JPEG, image/png{code}||Informational Note: |Configure each filter's input format(s) || ||Property: |_pdffilter.largepdfs_||Example Value: |_pdffilter.largepdfs = true_||Informational Note: |It this value is set for "true", all PDF extractions are written to temp files as they are indexed. This is slower, but helps to ensure that PDFBox software DSpace uses does not eat up all your memory.  ||Property: |_pdffilter.skiponmemoryexception_||Example Value: |_pdffilter.skiponmemoryexception = true_||Informational Note: |If this value is set for "true", PDFs which still result in an "Out of Memory" error from PDFBox are skipped over. These problematic PDFs will never be indexed until memory usage can be decreased in the PDFBox software. |Names are assigned to each filter using the _plugin.named.org.dspace.app.mediafilter.FormatFilter_ field (e.g. by default the PDFilter is named "PDF Text Extractor".Finally, the appropriate _filter.<class path>.inputFormats_ defines the valid input formats which each filter can be applied. These format names *must match* the _short description_ field of the Bitstream Format Registry.You can also implement more dynamic or configurable Media/Format Filters which extend _SelfNamedPlugin_h3. Configurable MODS Dissemination CrosswalkThe MODS crosswalk is a self-named plugin. To configure an instance of the MODS crosswalk, add a property to the DSpace configuration starting with _"crosswalk.mods.properties."_; the final word of the property name becomes the plugin's name. For example, a property name _crosswalk.mods.properties.MODS_ defines a crosswalk plugin named _"MODS"_.The value of this property is a path to a separate properties file containing the configuration for this crosswalk. The pathname is relative to the DSpace configuration directory, i.e. the _config_ subdirectory of the DSpace install directory. Example from the _dspace.cfg_file:|Properties: |{code}crosswalk.mods.properties.MODS
crosswalk.mods.properties.mods{code}||Example Values: |{code}crosswalk.mods.properties.MODS = crosswalks/mods.properties
crosswalk.mods.properties.mods = crosswalks/mods.properties{code}||Informational Note: |This defines a crosswalk named MODS whose configuration comes from the file _\[dspace\]/config/crosswalks/mods.properties_. (In the above example, the lower-case name was added for OAI-PMH)| The MODS crosswalk properties file is a list of properties describing how DSpace metadata elements are to be turned into elements of the MODS XML output document. The property name is a concatenation of the metadata schema, element name, and optionally the qualifier. For example, the _contributor.author_ element in the native Dublin Core schema would be: _dc.contributor.author_. The value of the property is a line containing two segments separated by the vertical bar (_"|"_): The first part is an XML fragment which is copied into the output document. The second is an XPath expression describing where in that fragment to put the value of the metadata element. For example, in this property:{code}
dc.contributor.author = <mods:name><mods:role><mods:roleTerm
                            type="text">author</mods:roleTerm>
                        </mods:role><mods:namePart>%s</mods:;
                        <mods:namePart>%s</mods:namePart></mods:name> |
                        mods:namePart/text() {code} Some of the examples include the string _"%s"_ in the prototype XML where the text value is to be inserted, but don't pay any attention to it, it is an artifact that the crosswalk ignores. For example, given an author named _Jack Florey_, the crosswalk will insert{code}
<mods:name>
   <mods:role>
     <mods:roleTerm type="text">author</mods:roleTerm>
   </mods:role>
   <mods:namePart>  Jack Florey</mods:namePart>
</mods:name>{code}into the output document. Read the example configuration file for more details. h3. XSLT-based CrosswalksThe XSLT crosswalks use XSL stylesheet transformation (XSLT) to transform an XML-based external metadata format to or from DSpace's internal metadata. XSLT crosswalks are much more powerful and flexible than the configurable MODS and QDC crosswalks, but they demand some esoteric knowledge (XSL stylesheets). Given that, you can create all the crosswalks you need just by adding stylesheets and configuration lines, without touching any of the Java code.The default settings in the _dspace.cfg_ file for submission crosswalk:|Properties: |_crosswalk.submission.MODS.stylesheet_||Example Value: |_crosswalk.submission.MODS.stylesheet = crosswalks/mods-submission.xsl_||Informational Note: |Configuration XSLT-driven submission crosswalk for MODS |As shown above, there are three (3) parts that make up the properties "key":{code}     crosswalk.submissionPluginName.stylesheet =
          1        2        3               4 {code}_crosswalk_ first part of the property key._submission_ second part of the property key.__PluginName__ is the name of the plugin. The _path_ value is the path to the file containing the crosswalk stylesheet (relative to _/\[dspace\]/config_).Here is an example that configures a crosswalk named "LOM" using a stylesheet in _\[dspace\]/config/crosswalks/d-lom.xsl_:{code}
 crosswalk.submission.LOM.stylesheet = crosswalks/d-lom.xsl{code}A dissemination crosswalk can be configured by starting with the property key _crosswalk.dissemination_. Example:{code}
     crosswalk.dissemination.PluginName.stylesheet = path{code}The _PluginName_ is the name of the plugin (!). The _path_ value is the path to the file containing the crosswalk stylesheet (relative to _/\[dspace\]/config_).You can make two different plugin names point to the same crosswalk, by adding two configuration entries with the same path:{code}
     crosswalk.submission.MyFormat.stylesheet = crosswalks/myformat.xslt
     crosswalk.submission.almost_DC.stylesheet = crosswalks/myformat.xslt{code}The dissemination crosswalk must also be configured with an XML Namespace (including prefix and URI) and an XML schema for its output format. This is configured on additional properties in the DSpace configuration:{code}
     crosswalk.dissemination.PluginName.namespace.Prefix = namespace-URI
     crosswalk.dissemination.PluginName.schemaLocation = schemaLocation value{code}For example:{code}
     crosswalk.dissemination.qdc.namespace.dc = http://purl.org/dc/elements/1.1/
     crosswalk.dissemination.qdc.namespace.dcterms = http://purl.org/dc/terms/
     crosswalk.dissemination.qdc.schemalocation = http://purl.org/dc/elements/1.1/ \
     http://dublincore.org/schemas/xmls/qdc/2003/04/02/qualifieddc.xsd{code}h4. Testing XSLT Crosswalks The XSLT crosswalks will automatically reload an XSL stylesheet that has been modified, so you can edit and test stylesheets without restarting DSpace. You can test a dissemination crosswalk by hooking it up to an OAI-PMH crosswalk and using an OAI request to get the metadata for a known item.Testing the submission crosswalk is more difficult, so we have supplied a command-line utility to help. It calls the crosswalk plugin to translate an XML document you submit, and displays the resulting intermediate XML (DIM). Invoke it with:{code}[dspace]/bin/dsrun
     org.dspace.content.crosswalk.XSLTIngestionCrosswalk [-l] plugin input-file{code}where _plugin_ is the name of the crosswalk plugin to test (e.g. "LOM"), and _input-file_ is a file containing an XML document of metadata in the appropriate format. Add the _-l_ option to pass the ingestion crosswalk a list of elements instead of a whole document, as if the List form of the ingest() method had been called. This is needed to test ingesters for formats like DC that get called with lists of elements instead of a root element.h3. Configurable Qualified Dublin Core (QDC) dissemination crosswalkThe QDC crosswalk is a self-named plugin. To configure an instance of the QDC crosswalk, add a property to the DSpace configuration starting with _"crosswalk.qdc.properties."_; the final word of the property name becomes the plugin's name. For example, a property name _crosswalk.qdc.properties.QDC_ defines a crosswalk plugin named _"QDC"_.The following is from _dspace.cfg_ file:|Properties: |_crosswalk.qdc.namspace.qdc.dc_||Example Value: |_crosswalk.qdc.namspace.qdc.dc = http://purl.org/dc/elements/1.1_||Properties: |_crosswalk.qdc.namspace.qdc.dcterms_||Example Value: |_crosswalk.qdc.namspace.qdc.dc = http://purl.org/dc/terms/_||Properties: |_crosswalk.qdc.schemaLocation.QDC_||Example Value: |{code}crosswalk.qdc.schemaLocation.QDC = http://www.purl.org/dc/terms \
      http://dublincore.org/schemas/xmls/qdc/2006/01/06/dcterms.xsd \
      http://purl.org/dc/elements/1.1 \
      http://dublincore.org/schemas/xmls/qdc/2006/01/06/dc.xsd{code}||Properties: |_crosswalk.qdc.properties.QDC_||Example Value: |_crosswalk.qdc.properties.QDC = crosswalks/QDC.properties_||Informational Note: |Configuration of the QDC Crosswalk dissemination plugin for Qualified DC. _(Add lower-case name for OAI-PMH. That is, change QDC to qdc.)_|In the property key "_crosswalk.qdc.properties.QDC_" the value of this property is a path to a separate properties file containing the configuration for this crosswalk. The pathname is relative to the DSpace configuration directory __/\[dspace\]/config__. Referring back to the "Example Value" for this property key, one has _crosswalks/qdc.properties_ which defines a crosswalk named _QDC_ whose configuration comes from the file _\[dspace\]/config/crosswalks/qdc.properties_.You will also need to configure the namespaces and schema location strings for the XML output generated by this crosswalk. The namespaces properties names are formatted:_crosswalk.qdc.namespace_._prefix = uri_where _prefix_ is the namespace prefix and _uri_ is the namespace URI. See the above Property and Example Value keys as the default dspace.cfg has been configured.The QDC crosswalk properties file is a list of properties describing how DSpace metadata elements are to be turned into elements of the Qualified DC XML output document. The property name is a concatenation of the metadata schema, element name, and optionally the qualifier. For example, the _contributor.author_ element in the native Dublin Core schema would be: _dc.contributor.author_. The value of the property is an XML fragment, the element whose value will be set to the value of the metadata field in the property key.For example, in this property:{code}     dc.coverage.temporal = <dcterms:temporal />{code}the generated XML in the output document would look like, e.g.: {code}     <dcterms:temporal>Fall, 2005</dcterms:temporal>{code}h3. Configuring Crosswalk PluginsIngestion crosswalk plugins are configured as named or self-named plugins for the interface _org.dspace.content.crosswalk.IngestionCrosswalk_. Dissemination crosswalk plugins are configured as named or self-named plugins for the interface _org.dspace.content.crosswalk.DisseminationCrosswalk_.You can add names for existing crosswalks, add new plugin classes, and add new configurations for the configurable crosswalks as noted below.h3. Configuring Packager PluginsPackage ingester plugins are configured as named or self-named plugins for the interface _org.dspace.content.packager.PackageIngester_. Package disseminator plugins are configured as named or self-named plugins for the interface _org.dspace.content.packager.PackageDisseminator_.You can add names for the existing plugins, and add new plugins, by altering these configuration properties. See the Plugin Manager architecture for more information about plugins.h3. Event System Configuration|Properties: |{code}event.dispatcher.default.class
 event.dispatcher.default.consumers{code}||Example Value: |{code}event.dispatcher.default.class = org.dspace.event.BasicDispatcher
event.dispatcher.default.consumers = search, browse, eperson{code}||Informational Note: |This is the default synchronous dispatcher (Same behavior as traditional DSpace). || ||Properties: |{code}event.dispatcher.noindex.class
event.dispatcher.noindex.consumers{code}||Example Value: |{code}event.dispatcher.noindex.class = org.dspace.event.BasicDispatcher
event.dispatcher.noindex.consumers = eperson{code}||Informational Note: |The noindex dispatcher will not create search or browse indexes (useful for batch item imports). || ||Properties: |{code}event.consumer.search.class
event.consumer.search.filters{code}||Example Value: |_(See example below)_||{code}
event.consumer.search.class = org.dspace.search.SearchConsumer
event.consumer.search.filters =  \
Community|Collection|Item|Bundle+Add|Create|Modify|Modify_Metadata|Delete|Remove{code}||Informational Note: |Consumer to maintain the search index. || ||Properties: |{code}event.consumer.browse.class
event.consumer.browse.filters{code}||Example Value: |_(See example below)_||{code}
event.consumer.browse.class = org.dspace.browse.BrowseConsumer
event.consumer.browse.filters = \
Community|Collection|Item|Bundle+Add|Create|Modify|Modify_Metadata|Delete|Remove{code}||Informational Note: |Consumer to maintain the browse index. || ||Properties: |{code}event.consumer.eperson.class
event.consumer.eperson.filters{code}||Example Value: |{code}event.consumer.eperson.class = org.dspace.eperson.EPersonConsumer
event.consumer.eperson.filters = EPerson+Create{code}||Informational Note: |Consumer related to EPerson changes || ||Properties: |{code}event.consumer.test.class
event.consumer.test.filters{code}||Example Value: |{code}event.consumer.test.class = org.dspace.event.TestConsumer
event.consumer.test.filters = All+All
{code}||Informational Note: |Test consumer for debugging and monitoring. *Commented out by default.*|| ||Properties: |_testConsumer.verbose_||Example Value: |_testConsumer.verbose = true_||Informational Note: |Set this to true to enable testConsumer messages to standard output. *Commented out by default.*|h3. Checksum Checker SettingsDSpace now comes with a Checksum Checker script (_\[dspace\]/bin/checker_) which can be scheduled to verify the checksum of every item within DSpace. Since DSpace calculates and records the checksum of every file submitted to it, this script is able to determine whether or not a file has been changed (either manually or by some sort of corruption or virus). The idea being that the earlier you can identify a file has changed, the more likely you'd be able to recover it (assuming it was not a wanted change). |Property: |_plugin.single.org.dspace.checker.BitstreamDispatcher_||Example Value: |_plugin.single.org.dspace.checker.BitstreamDispatcher = org.dspace.checker.SimpleDispatcher_||Informational Note: |The Default dispatcher is case non is specified. || ||Property: |_checker.retention.default_||Example Value: |_checker.retention.default = 10y_||Informational Note: |This option specifies the default time frame after which all checksum checks are removed from the database (defaults to 10 years). This means that after 10 years, all successful or unsuccessful matches are removed from the database. || ||Property: |_checker.retention.CHECKSUM_MATCH_||Example Value: |_checker.retention.CHECKSUM_MATCH = 8w_||Informational Note: |This option specifies the time frame after which a successful “match” will be removed from your DSpace database (defaults to 8 weeks). This means that after 8 weeks, all successful matches are automatically deleted from your database (in order to keep that database table from growing too large). |h3. Item Export and Download SettingsIt is possible for an authorized user to request a complete export and download of a DSpace item in a compressed zip file. This zip file may contain the following:dublin_core.xmllicense.txtcontents _(listing of the contents)_handle_file itself and the extract file if available_The configuration settings control several aspects of this feature:|Property: |_org.dspace.app.itemexport.work.dir_||Example Value: |_org.dspace.app.itemexport.work.dir = $\{dspace.dir\}/exports_||Informational Note: |The directory where the exports will be done and compressed. || ||Property: |_org.dspace.app.itemexport.download.dir_||Example Value: |_org.dspace.app.itemexport.download.dir = $\{dspace.dir\}/exports/download_||Informational Note |The directory where the compressed files will reside and be read by the downloader. || ||Property: |_org.dspace.app.itemexport.life.span.hours_||Example Value: |_org.dspace.app.itemexport.life.span.hours = 48_||Informational Note |The length of time in hours each archive should live for. When new archives are created this entry is used to delete old ones. || ||Property: |_org.dspace.app.itemexport.max.size_||Example Value: |_org.dspace.app.itemexport.max.size = 200_||Informational Note |The maximum size in Megabytes (Mb) that the export should be. This is enforced before the compression. Each bitstream's size in each item being exported is added up, if their cumulative sizes are more than this entry the export is not kicked off. |h3. Subscription EmailsDSpace, through some advanced installation and setup, is able to send out an email to collections that a user has subscribed. The user who is subscribed to a collection is emailed each time an item id added or modified. The following property key controls whether or not a user should be notified of a modification.|Property: |_eperson.subscription.onlynew_||Example Value: |_eperson.subscription.onlynew = true_||Informational Note: |For backwards compatibility, the subscription emails by default include any modified items. The property key is COMMENTED OUT by default. |h3. Settings for the Submission ProcessThese settings control two aspects of the submission process: thesis submission permission and whether or not a bitstream file is required when submitting to a collection.|Property: |_webui.submit.blocktheses_||Example Value: |_webui.submit.blocktheses = false_||Informational Note: |Controls whether or not that the submission should be marked as a thesis. || ||Property: |_webui.submit.upload.required_||Example Value: |_webui.submit.upload.required = true_||Informational Note: |Whether or not a file is *required* to be uploaded during the "Upload" step in the submission process. The default is true. If set to "false", then the submitter (human being) has the option to skip the uploading of a file.|h3. Configuring Creative Commons LicenseThis enables the Creative Commons license step in the submission process of the JSP User Interface (JSPUI). Submitters are given an opportunity to select a Creative Common license to accompany the item. Creative Commons license govern the use of the content. For further details, refer to the Creative Commons website at [http://creativecommons.org|http://creativecommons.org|http://creativecommons.org] .|Property: |_webui.submit.enable-cc_||Example Value: |_webui.submit.enable-cc = false_||Informational Note: |_Set key to "false" if you are not using CC License. Set key to "true" if you are using CC License._|h3. WEB User Interface ConfigurationsGeneral Web User Interface ConfigurationsIn this section of Configuration, we address the agnostic WEB User Interface that is used for JSP UI and XML UI. Some of the configurations will give information towards customization or refer you to the appropriate documentation.|Property: |_webui.browse.thubnail.show_||Example Value: |_webui.browse.thubnail.show = true_||Informational Note: |Controls whether to display thumbnails on browse and search result pages. If you have customized the Browse columnlist, then you must also include a "thumbnail" column in your configuration. _(This configuration property key is not used by XMLUI. To show thumbnails using XMLUI, you need to create a theme which displays them)_.|| ||Property: |{code}webui.browse.thumbnail.maxheight
webui.browse.thumbnail.maxwidth{code}||Example Value: |{code}webui.browse.thumbnail.maxheight = 80
webui.browse.thumbnail.maxwidth = 80{code}||Informational Note: |This determines the maximum height and maximum width of the browse/search thumbnails in pixels (px). This only needs to be set if the thumbnails are required to be smaller than the dimensions of thumbnails generated by MediaFilter.  || ||Property: |_webui.itme.thumbnail.show_||Example Value: |_webui.itme.thumbnail.show = true_||Informational Note: |This determines whether or not to display the thumbnail against each bitstream. _(This configuration property key is not used by XMLUI. To show thumbnails using XMLUI, you need to create a theme which displays them)_.|| ||Property: |_webui.browse.thumbnail.linkbehavior_||Example Value: |_webui.browse.thumbnail.linkbehavior = item_||Informational Note: |This determines where should the clicking on the thumbnail from browse/search screens take the user. The only values currently supported are "item" or "bitstream". || ||Property: |{code}thumbnail.maxwidth
thumbnail.maxheight{code}||Example Value: |{code}thumbnail.maxwidth 80
thumbnail.maxheight 80{code}||Informational Note: |This is the where one sets the maximum height and width of generated thumbnails. || ||Property: |_webui.preview.enabled_||Example Value: |_webui.preview.enabled = false_||Informational Note: |Whether or not the user can "preview" the image. || ||Property: |{code}webui.preview.maxwidth
webui.preview.maxheight{code}||Example Value: |{code}webui.preview.maxwidth = 600
webui.preview.maxheight = 600{code}||Informational Note: |This sets the maximum dimensions for the preview image. || ||Property: |_webui.preview.brand_||Example Value: |_webui.preview.brand = My Institution Name_||Informational Note: |This is the brand text that will appear with the image. || ||Property: |_webui.preview.brand.abbrev_||Example Value: |_webui.preview.brand.abbrev = MyOrg_||Informational Note: |An abbreviated form of the full Branded Name. This will be used when the preview image cannot fit the normal text. || ||Property: |_webui.preview.brand.height_||Example Value: |_webui.preview.brand.height = 20_||Informational Note: |The height (in px) of the brand || ||Property: |{code}webui.preview.brand.font
webui.preview.brand.fontpoint{code}||Example Value: |{code}webui.preview.brand.font = SanSerif
webui.preview.brand.fontpoint = 12{code}||Informational Note: |The font settings for the brand text. || ||Property: |_webui.preview.dc_||Example Value: |_webui.preview.dc = rights_||Informational Note: |The Dublin Core field that will display along with the preview. || ||Property: |_webui.strengths.show_||Example Value: |_webui.strengths.show = false_||Informational Note: |Determines if communities and collections should display item counts when listed. The default behavior if omitted, is true. _(This configuration property key is not used by XMLUI. To show thumbnails using XMLUI, you need to create a theme which displays them)_.|| ||Property: |_webui.strengths.cache_||Example Value: |_webui.strengths.cache = false_||Informational Note: |When showing the strengths, should they be counted in real time, or fetched from the cache. Counts fetched in real time will perform an actual count of the database contents every time a page with this feature is requested, which will not scale. If you set the property key is set to cache ("true") you must run the following command periodically to update the count: _/\[dspace\]/bin/dsrun org.dspace.browse.ItemCounter_. The default is to count in real time (set to "false").|h3. Browse Index ConfigurationThe browse indexes for DSpace can be extensively configured. This section of the configuration allows you to take control of the indexes you wish to browse, and how you wish to present the results. The configuration is broken into several parts: defining the indexes, defining the fields upon which users can sort results, defining truncation for potentially long fields (e.g. authors), setting cross-links between different browse contexts (e.g. from an author's name to a complete list of their items), how many recent submissions to display, and configuration for item mapping browse.|Property: |_webui.browse.index.<__n__>_||Example Value: |_webui.browse.index.1 = dateissued:metadata:dc.date.issued:date:full _||Informational Note: |This is an example of how one "Defines the Indexes". SeeDefining the Indexes in the next sub-section.|| ||Property: |_webui.itemlist.sort-option.<__n__>_||Example Value: |_webui.itemlist.sort-option.1 = title:dc.title:title_||Informational Note: |This is an example of how one "Defines the Sort Options". See Defining Sort Options in the following sub-section.|h4. Defining the Indexes.DSpace arrives with four default indexes already defined: author, title, date issued, and subjects. Users may also define additional indexes or re-configure the current indexes for different levels of specificity. For example, the default entries that appear in the _dspace.cfg_ as default installation:{code}webui.browse.index.1 = dateissued:metadata:dc.date.issued:date:full
webui.browse.index.2 = author:metadata:dc.contributor.*:text
webui.browse.index.3 = title:metadata:dc.title:title:full
webui.browse.index.4 = subject:metadata:dc.subject.*:text
#webui.browse.index.5 = dateaccessioned:item:dateaccessioned{code}The format of each entry is _webui.browse.index.<n> = <index name>:<metadata>:<schema prefix>.<element>.<qualifier>:<data-type field>:<sort option>_. Please notice that the punctuation is paramount in typing this property key in the _dspace.cfg_ file. The following table explains each element:||*Element*||*Definition and Options (if available)*|||_webui.browse.index.__n_|_n_ is the index number. The index numbers must start from 1 and increment continuously by 1 thereafter. Deviation form this will cause an error during install or a configuration update. So anytime you add a new browse index, remember to increase the number. (Commented out index numbers may be used over again).||_<index name>_|The name by which the index will be identified. You will need to update your Messages.properties file to match this field. (The form used in the Messages.properties file is: _browse.type.metadata.<index name>_ .||_<metadata>_|Only two options are available: "_metadata_" or "_item_"||_<schema prefix>_|The schema used for the field to be index. The default is dc (for Dublin Core).  ||_<element>_|The schema element. In Dublin Core, for example, the author element is referred to as "Contributor". The user should consult the default Dublin Core Metadata Registry table in Appendix A.||_<qualifier>_|This is the qualifier to the <element> component. The user has two choices: an asterisk "*" or a proper qualifier of the element. The asterisk is a wildcard and causes DSpace to index all types of the schema element. For example, if you have the element "contributor" and the qualifier "*" then you would index all contributor data regardless of the qualifier. Another example, you have the element "subject" and the qualifier "lcsh" would cause the indexing of only those fields that have the qualifier "lcsh". (This means you would only index Library of Congress Subject Headings and not all data elements that are subjects. ||_<datatype field>_| This refers to the datatype of the field: _date _the index type will be treated as a date object _title _the index type will be treated like a title, which will include a link to the item page _text _the index type will be treated as plain text. If single mode is specified then this will link to the full mode list ||_<index display>_|Choose _full_ or _single_. This refers to the way that the index will be displayed in the browse listing. "Full" will be the full item list as specified by _webui.itemlist.columns_ ; "single" will be a single list of only the indexed term. |If you are customizing this list beyond the default, you will need to insert the text you wish to appear in the navigation and on link and buttons. You need to edit the _Messages.properties_ file. The form of the parameter(s) in the file:{code}     browse.type.<index name>{code}h4. Defining Sort OptionsSort options will be available when browsing a list of items (i.e. only in "full" mode, not "single" mode). You can define an arbitrary number of fields to sort on, irrespective of which fields you display using _web.itemlist.columns_. For example, the default entries that appear in the _dspace.cfg_ as default installation:{code}webui.itemlist.sort-option.1 = title:dc.title:title
webui.itemlist.sort-option.2 = dateissued:dc.date.issued:date
webui.itemlist.sort-option.3 = dateaccessioned:dc.date.accessioned:date{code}The format of each entry is_web.browse.sort-option.<n> = <option name>:<schema prefix>.<element>.<qualifier>:<datatype>_. Please notice the punctuation used between the different elements. The following table explains the each element:||*Element*||*Definition and Options (if available)*|||_webui.browse.index.__n_|_n_ is an arbitrary number you choose.||_<option name>_|The name by which the sort option will be identified. This may be used in later configuration or to locate the message key (found in _Messages.properties_ file) for this index.||_<schema prefix>_|The schema used for the field to be index. The default is dc (for Dublin Core).  ||_<element>_|The schema element. In Dublin Core, for example, the author element is referred to as "Contributor". The user should consult the default Dublin Core Metadata Registry table in Appendix A.||_<qualifier>_|This is the qualifier to the <element> component. The user has two choices: an asterisk "*" or a proper qualifier of the element.  ||_<datatype field>_| This refers to the datatype of the field: _date_the sort type will be treated as a date object_text_the sort type will be treated as plain text.|h4. Browse Index Normalization Rule ConfigurationNormalization Rules are those rules that make it possible for the indexes to intermix entries without regard to case sensitivity. By default, the display of metadata in the browse indexes are case-sensitive. In the example below, you retrieve separate entries:Twain, Marktwain, markTWAIN, MARKHowever, clicking through from either of these will result in the same set of items (i.e., any item that contains either representation in the correct field). |Property: |_webui.browse.metadata.case-insensitive_||Example Value: |_webui.browse.metadata.case-insensitive = true_||Informational Note: |This controls the normalization of the index entry. Uncommenting the option (which is commented out by default) will make the metadata items case-insensitive. This will result in a single entry in the example above. However, the value displayed may be any one of the above—depending on what representation was present in the first item indexed. |At the present time, you would need to edit your metadata to clean up the index presentation.h4. Other Browse OptionsWe set other browse values in the following section.|Property: |_webui.browse.value_columns.max_||Example Value: |_webui.browse.value_columns.max = 500_||Informational Note: |This sets the options for the size (number of characters) of the fields stored in the database. The default is 0, which is unlimited size for fields holding indexed data. Some database implementations (e.g. Oracle) will enforce their own limit on this field size. Reducing the field size will decrease the potential size of your database and increase the speed of the browse, but it will also increase the chance of mis-ordering of similar fields. The values are commented out, but proposed values for reasonably performance versus result quality. This affects the size of field for the browse value (this will affect display, and value sorting ) || ||Property: |_webui.browse.sort_columns.max_||Example Value: |_webui.browse.sort_columns.max = 200_||Informational Note: |Size of field for hidden sort columns (this will affect only sorting, not display). Commented out as default. || ||Property: |_webui.browse.value_columns.omission_mark_||Example Value: |_webui.browse.value_columns.omission_mark = ..._||Informational Note: |Omission mark to be placed after truncated strings in display. The default is "...". || ||Property: |_plugin.named.org.dspace.sort.OrderFormatDelegate_||Example Value: |{code}plugin.named.org.dspace.sort.OrderFormatDelegate = \
org.dspace.sort.OrderFormatTitleMarc21=title{code}||Informational Note: |This sets the option for how the indexes are sorted. All sort normalizations are carried out by the OrderFormatDelegate. The plugin manager can be used to specify your own delegates for each datatype. The default datatypes (and delegates) are: {code}author = org.dspace.sort.OrderFormatAuthor
title  = org.dspace.sort.OrderFormatTitle
text   = org.dspace.sort.OrderFormatText{code}If you redefine a default datatype here, the configuration will be used in preferences to the default. However, if you do not explicitly redefine a datatype, then the default will still be used in addition to the datatypes you do specify. As of DSpace release 1.5.2, the multi-lingual MARC21 title ordering is configured as default, as shown in the example above. To use the previous title ordering (before release 1.5.2), comment out the configuration in your _dspace.cfg_ file.|h3. Author (Multiple metadata value) DisplayThis section actually applies to any field with multiple values, but authors are the define case and example here.|Property: |_webui.browse.author-field_||Example Value: |_webui.browse.author-field = dc.contributor.*_||Informational Note: |This defines which field is the author/editor, etc. listing.  |Replace _dc.contributor.*_ with another field if appropriate. The field should be listed in the configuration for _webui.itemlist.columns_, otherwise you will not see its effect. It must also be defined in _webui.itemlist.columns_ as being of the datatype _text_ otherwise the functionality will be overridden by the specific data type feature. (This setting is not used by the XMLUI as it is controlled by your theme).Now that we know which field is our author or other multiple metadata value field we can provide the option to truncate the number of values displayed by default. We replace the remaining list of values with "et al" or the language pack specific alternative. Note that this is just for the default, and users will have the option of changing the number displayed when they browse the results. See the following table:|Property: |_webui.browse.author-limit_||Example Value: |_webui.browse.author-limit = <__n__>_||Informational Note: |Where _<__n__>_ is an integer number of values to be displayed. Use _-1_ for unlimited (the default value).|h3. Links to Other Browse ContextsWe can define which fields link to other browse listings. This is useful, for example, to link an author's name to a list of just that author's items. The effect this has is to create links to browse views for the item clicked on. If it is a "single" type, it will link to a view of all the items which share that metadata element in common (i.e. all the papers by a single author). If it is a "full" type, it will link to a view of the standard full browse page, starting with the value of the link clicked on.|Property: |_webui.browse.link.<__n__>_||Example Value: |_webui.browse.link.1 = author:dc.contributor.*_||Informational Note: |This is used to configure which fields should link to other browse listings. This should be associated with the name of one of the browse indexes (_webui.browse.index.n_) with a metadata field listed in _webui.itemlist.columns_ above. If this condition is not fulfilled, cross-linking will not work. Note also that crosslinking only works for metadata fields not tagged as _title_ in _webui.itemlist.columns_.|The format of the property key is _webui.browse.link.<n> = <index name>:<display column metadata>_ Please notice the punctuation used between the elements.||*Element*||*Definition and Options (if available)*|||_webui.browse.link.__n_|_n_ is an arbitrary number you choose||_<index name>_|This need to match your entry for the index name from _webui.browse.index_ property key. ||_<display column metadata>_|Use the DC element (and qualifier) |Examples of some browse links used in a real DSpace installation instance:_webui.browse.link.1 = author:dc.contributor.* _Creates a link for all types of contributors (authors, editors, illustrators, others, etc.)_webui.browse.link.2 = subject:dc.subject.lcsh _Creates a link to subjects that are Library of Congress only. In this case, you have a browse index that contains only LC Subject Headings_webui.browse.link.3 = series:dc.relation.ispartofseries _Creates a link for the browse index "Series". Please note this is again, a customized browse index and not part of the DSpace distributed release.h3. Recent SubmissionsThis allows us to define which index to base Recent Submission display on, and how many we should show at any one time. This uses the PluginManager to automatically load the relevant plugin for the Community and Collection home pages. Values given in examples are the defaults supplied in _dspace.cfg_|Property: |_recent.submission.sort-option_||Example Value: |_recent.submission.sort-option = dateaccessioned_||Informational Note: |First is to define the sort name (from _webui.browse.sort-options_) to use for displaying recent submissions.|| ||Property: |_recent.submissions.count_||Example Value: |_recent.submissions.count = 5_||Informational Note: |Defines how many recent submissions should be displayed at any one time. |There will be the need to set up the processors that the PluginManager will load to actually perform the recent submissions query on the relevant pages. This is already configured by default _dspace.cfg_ so there should be no need for the administrator/programmer to worry about this.{code}
plugin.sequence.org.dspace.plugin.CommunityHomeProcessor = \
        org.dspace.app.webui.components.RecentCommunitySubmissions

plugin.sequence.org.dspace.plugin.CollectionHomeProcessor = \
        org.dspace.app.webui.components.RecentCollectionSubmissions
{code}h3. Syndication Feed (RSS) SettingsThis will enable syndication feeds—links display on community and collection home pages. This setting is not used by the XMLUI, as you enable feeds in your theme.|Property: |_webui.feed.enable_||Example Value: |_webui.feed.enable = false_||Informational Note: |By default, RSS feeds are set to false (off). Change key to "true" to enable. || ||Property: |_webui.feed.items_||Example Value: |_webui.feed.items = 4_||Informational Note: |Defines the number of DSpace items per feed (the most recent submissions) || ||Property: |_webui.feed.cache.size_||Example Value: |_webui.feed.cache.size = 100_||Informational Note: |Defines the maximum number of feeds in memory cache. Value of "_0_" will disable caching.|| ||Property: |_webui.feed.cache.age_||Example Value: |_webui.feed.cache.age = 48_||Informational Note: |Defines the number of hours to keep cached feeds before checking currency. The value of "_0_" will force a check with each request.|| ||Property: |_webui.feed.formats_||Example Value: |_webui.feed.formats = rss_1.0,rss_2.0,atom_1.0_||Informational Note: |Defines which syndication formats to offer. You can use more than one; use a comma-separated list. The following list are the available values: rss_0.90, rss_0.91, rss_0.92, rss_0.93, rss_0.94, rss_1.0, rss_2.0, atom_1.0. || ||Property: |_webui.feed.localresolve_||Example Value: |_webui.feed.localresolve = false_||Informational Note: |By default, (set to false), URLs returned by the feed will point at the global handle resolver (e.g. http://hdl.handle.net/123456789/1). If set to *_true_* the local server URLs are used (e.g. http://myserver.myorg/handle/123456789/1).|| ||Property: |{code}webui.feed.item.title
webui.feed.item.date{code}||Example Value: |{code}webui.feed.item.title = dc.title
webui.feed.item.date = dc.date.issued{code}||Informational Note: |This set of keys customize each single-value field displayed in the feed information for each item. Each of the fields takes a *single* metadata field. The form of the key is _<scheme prefix>.<element>.<qualifier>_ In place of the qualifier, one may leave it blank to exclude any qualifiers or use the wildcard "*" to include all qualifiers for a particular element.|| ||Property: |_webui.feed.item.description_||Example Value: |_(See example below)_||{code}webui.feed.item.description = dc.title, dc.contributor.author, \
           dc.contributor.editor, dc.description.abstract, \
           dc.description{code}||Informational Note: |One can customize the metadata fields to show in the feed for each item's description. Elements are displayed in the order they are specified in _dspace.cfg_.Like other property keys, the format of this property key is: _webui.feed.item.description = <scheme prefix>.<element>.<qualifier>_. In place of the qualifier, one may leave it blank to exclude any qualifiers or use the wildcard "*" to include all qualifiers for a particular element. || ||Property: |_webui.feed.item.author_||Example Value: |_webui.feed.item.author = dc.contributor.author_||Informational Note: |The name of field to use for authors (Atom only); repeatable. || ||Property: |_webui.feed.logo.url_||Example Value: |_webui.feed.logo.url = $\{dspace.url\}/themes/mysite/images/mysite-logo.png_||Informational Note: |Customize the image icon included with the site-wide feeds. This must be an absolute URL || ||Property: |{code}webui.feed.item.dc.creator
webui.feed.item.dc.date
webui.feed.item.dc.description
                                                {code}||Example Value: |{code}webui.feed.item.dc.creator = dc.contributor.author
webui.feed.item.dc.date = dc.date.issued
webui.feed.item.dc.description = dc.description.abstract{code}||Informational Note: |These optional properties add _structured_ DC elements as XML elements to the feed description. They are not the same thing as, for example, _webui.feed.item.description_. Useful when a program or stylesheet will be transforming a feed and wants separate author, description, date, etc.|h3. Content Inline Disposition ThresholdThe following configuration is used to change the disposition behavior of the browser. That is, when the browser will attempt to open the file or download it to the user's specified location. For example, the default size is 8Mb. When an item being viewed is larger than 8MB, the browser will download the file to the desktop (or wherever you have it set to download) and the user will have to open it manually.|Property: |_webui.content_disposition_threshold_||Example value: |_webui.content_disposition_threshold = 8388608_||Informational Note: |The default value is set to 8Mb. This property key applies to the JSPUI interface. || ||Property: |_xmlui.content_disposition_threshold_||Example Value: |_xmlui.content_disposition_threshold = 8388608_||Informational Note: |The default value is set to 8Mb. This property key applies to the XMLUI (Manakin) interface. |Other values are possible: 4 MB = 41943048 MB = 838860816 MB = 16777216h3. Multi-file HTML Document/Site SettingsThe setting is used to configure the "depth" of request for html documents bearing the same name. |Property: |{code}
webui.html.max-depth-guess
xmlui.html.max-depth-guess{code}||Example Value: |{code}
webui.html.max-depth-guess = 3
xmlui.html.max-depth-guess = 3{code}||Informational Note: |When serving up composite HTML items, how deep can the request be for us to serve up a file with the same name? For example, if one receives a request for "_foo/bar/index.html_" and one has a bitstream called just "_index.html_", DSpace will serve up the former bitstream (foo/bar/index.html) for the request if _webui.html.max-depth-guess_ is 2 or greater. If _webui.html.max-depth-guess_ is 1 or less, then DSpace would not serve that bitstream, as the depth of the file is greater. If _webui.html.max-depth-guess_ is zero, the request filename and path must always exactly match the bitstream name. The default is set to 3.|h3. Sitemap SettingsTo aid web crawlers index the content within your repository, you can make use of sitemaps.|Property: |_sitemap.dir_||Example Value: |_sitemap.dir = $\{dspace.dir\}/sitemaps_||Informational Note: |The directory where the generate sitemaps are stored. || ||Property: |_sitemap.engineurls_||Example Value: |_sitemap.engineurls = http://www.google.com/webmasters/sitemaps/ping?sitemap=_||Informational Note: |Comma-separated list of search engine URLs to 'ping' when a new Sitemap has been created. Include everything except the Sitemap UL itself (which will be URL-encoded and appended to form the actual URL 'pinged'). Add the following to the above parameter if you have an application ID with Yahoo: _http://search.yahooapis.com/SiteExplorererService/V1/updateNotification?appid=REPLACE_ME?url=_. (Replace the component _REPLACE_ME_ with your application ID). There is no known 'ping' URL for MSN/Live search.|h3. Upload File Settings|Property: |_upload.temp.dir_||Example Value: |_upload.temp.dir = $\{dspace.dir\}/upload_||Informational Note: |Where to temporarily store uploaded files. || ||Property: |_upload.max_||Example Value: |_upload.max = 536870912_||Informational Note: |Maximum size of uploaded files in bytes. A negative setting will result in no limit being set. The default is set for 512Mb. |h3. Statistical Report Configuration Setting|Property: |_report.public_||Example Value: |_report.public = false_||Informational Note: |Controls whether or not the stats can be publicly available. Set it to false (the default) if you only want administrators to access the stats, or you do not intended to generate any statistics. || ||Property: |_report.dir_||Example Value: |_report.dir = $\{dspace.dir\}/reports_||Informational Note: |Directory where the live reports are stored. |h3. JSP Web Interface (JSPUI) SettingsThe following section is limited to JSPUI. If the user wishes to use XMLUI settings, please refer to Chapter 7: XMLUI Configuration and Customization.|Property: |_webui.licence_bundle.show_||Example Value: |_webui.licence_bundle.show = false_||Informational Note: |Sets whether to display the contents of the license bundle (often just the deposit license in the standard DSpace installation). || ||Property: |_webui.itemdisplay.default_||Example Value: |_(See example below)_||{code}webui.itemdisplay.default = dc.title, dc.title.alternative, \
           dc.contributor.*, dc.subject, dc.data.issued(date), \
           dc.publisher, dc.identifier.citation, \
           dc.relation.ispartofseries, dc.description.abstract, \
           dc.description, dc.identifier.govdoc, \
           dc.identifier.uri(link), dc.identifier.isbn, \
           dc.identifier.issn, dc.identifier.ismn, dc.identifier{code}||Informational Note: |This is used to customize the DC metadata fields that display in the itemdisplay (the brief display) when pulling up a record. The format is: _<schema>.<element>.<__optional__qualifier>_ In place of the qualifier, one can use the wildcard "*" to include all fields of the same element, or, leave it blank for unqualified elements. Additionally, two additional options are available for behavior/rendering: (date) and (link). See the following examples: _dc.title_ = Dublin Core element 'title' (unqualified)_dc.title.alternative_ = DC element 'title', qualifier 'alternative'_dc.title.*_ = All fields with Dublin Core element 'title' (any or no qualifier)_dc.identifier.uri(link)_ = DC identifier.uri, rendered as a link_dc.date.issued(date)_ = DC date.issued, rendered as a dateThe _Messages.properties_ file controls how the fields defined above will display to the user. If the field is missing from the _Messages.properties_file, it will not be display. Look in _Messages.properties_ under _metadata.dc.<field>_. Example: {code}
metadata.dc.contributor.other       = Authors
metadata.dc.contributor.author      = Authors
metadata.dc.title.*                 = Title{code}*Please note:* The order in which you place the values to the property key control the order in which they will display to the user on the outside world. (See the Example Value above).|| ||Property: |{code}webui.resolver.1.urn
webui.resolver.1.baseurl
webui.resolver.2.urn
webui.resolver.2.baseurl{code}||Example Value: |{code}webui.resolver.1.urn = doi
webui.resolver.1.baseurl = http://dx.doi.org/
webui.resolver.2.urn = hdl
webui.resolver.2.baseurl = http://hdl.handle.net/{code}||Informational Note: |When using "resolver" in _webui.itemdisplay_ to render identifiers as resolvable links, the base URL is take from <code>webui.resolver.<n>.baseurl<code> where <code>webui.resolver.<n>.baseurl<code> matches the urn specified in the metadata value. The value is appended to the "baseurl" as is, so the baseurl needs to end with the forward slash almost in any case. If no urn is specified in the value it will be displayed as simple text.For the doi and hdl urn defaults values are provided, respectively http://dc.doi.org and http://hdl.handle.net are used. If a metadata value with style "doi", "handle" or "resolver" matches a URL already, it is simply rendered as a link with no other manipulation. || ||Property: |_plugin.single.org.dspace.app.webui.util.StyleSelection_||Example Value: |{code}plugin.single.org.dspace.app.webui.util.StyleSelection = \
  org.dspace.app.web.util.CollectionStyleSelection
  #org.dspace.app.web.util.MetadataStyleSelection{code}||Informational Note: |Specify which strategy to use for select the style for an item. || ||Property: |_webui.itemdisplay.thesis.collections_||Example Value: |_webui.itemdisplay.thesis.collections = 123456789/24, 123456789/35_||Informational Note: |Specify which collections use which views by Handle. || ||Property: |{code}webui.itemdisplay.metadata-style
webui.itemdisplay.metadata-syle{code}||Example Value: |{code}webui.itemdisplay.metadata-style = schema.element[.qualifier|.*]
webui.itemdisplay.metadata-syle = dc.type{code}||Informational Note: |Specify which metadata to use as name of the style || ||Property: |_webui.itemlist.columns_||Example Value: |{code}webui.itemlist.columns = thumbnail, dc.date.issued(date), dc.title, \
          dc.contributor.*{code}||Informational Note: |Customize the DC fields to use in the item listing page. Elements will be displayed left to right in the order they are specified here. The form is <schema prefix>.<element>\[.<qualifier>|.*\]\[(date)\], ...  Although not a requirement, it would make sense to include among the listed fields at least the date and title fields as specified by the _webui.browse.index.*_ configuration options in the next section mentioned. (cf.)If you have enabled thumbnails (webui.browse.thumbnail.show), you must also include a 'thumbnail' entry in your columns—this is where the thumbnail will be displayed. || ||Property: |_webui.itemlist.width_||Example Value: |_webui.itemlist.width = *, 130, 60%, 40%_||Informational Note: |You can customize the width of each column with the following line—you can have numbers (pixels) or percentages. For the 'thumbnail' column, a setting of '*' will use the max width specified for browse thumbnails (cf. _webui.browse.thumbnail.maxwidth, thumbnail.maxwidth_)|| ||Property: |{code}
webui.itemlist.browse.<index name>.sort.<sort name>.columns
webui.itemlist.sort.<sort name>.columns
webui.itemlist.browse.<browse name>.columns
webui.itemlist.<sort or index name>.columns{code}||Example Value: |__||Informational Note: |You can override the DC fields used on the listing page for a given browse index and/or sort option. As a sort option or index may be defined on a field that isn't normally included in the list, this allows you to display the fields that have been indexed/sorted on. There are a number of forms the configuration can take, and the order in which they are listed below is the priority in which they will be used (so a combination of an index name and sort name will take precedence over just the browse name). In the last case, a sort option name will always take precedence over a browse index name. Note also, that for any additional columns you list, you will need to ensure there is an _itemlist.<field name>_ entry in the messages file.|| ||Property: |_webui.itemlist.dateaccessioned.columns_||Example Value: |_webui.itemlist.dateaccessioned.columns = thumbnail, dc.date.accessioned(date), dc.title, dc.contributor.*_||Informational Note: |This would display the date of the accession in place f the issue date whenever the dateaccessioned browsed index or sort option is selected. Just like _webui.itemlist.columns_, you will need to include a 'thumbnail' entry to display the thumbnails in the item list.|| ||Property: |_webui.itemlist.dateaccessioned.widths_||Example Value: |_webui.itemlist.dateaccessioned.widths = *, 130, 60%, 40%_||Informational Note: |As in the aforementioned property key, you can customize the width of the columns for each configured column list, substituting '_.widths_' for '_.columns_' in the property name. See the setting for _webui.itemlist.widths_for more information.|| ||Property: |_webui.itemlist.tablewidth_||Example Value: |_webui.itemlist.tablewidth = 100%_||Informational Note: |You can also set the overall size of the item list table with the following setting. It can lead to faster table rendering when used with the column widths above, but not generally recommended. |h3. Configuring Multilingual Supporth4. Setting the Default Language for the Application|Property: |_default.locale_||Example Value: |_default.locale = en_||Informational Note: |The default language for the application is set with this property key. This is a locale according to i18n and might consist of country, country_language or country_language_variant. If no default locale is defined, then the server default locale will be used.  The format of a local specifier is described here: http://java.sun.com/j2se/1.4.2/docs/api/java/util/Locale.html |h4.  Supporting More Than One Languageh5. Changes in dspace.cfg|Property: |_webui.supported.locale_||Example Value: |_webui.supported.locale = en, de_ or perhaps_webui.supported.locals = en, en_ca, de_||Informational Note: |All the locales that are supported by this instance of DSpace. Comma separated list.  |The table above, if needed and is used will result in:* a language switch in the default header * the user will be enabled to choose his/her preferred language, this will be part of his/her profile * wording of emails ** mails to registered users, e.g. alerting service will use the preferred language of the user ** mails to unregistered users, e.g. suggest an item will use the language of the session * according to the language selected for the session, using dspace-admin Edit News will edit the news file of the language according to session h5. Related Files If you set webui.supported.locales make sure that all the related additional files for each language are available. _LOCALE_ should correspond to the locale set in _webui.supported.locales_, e. g.: for webui.supported.locales = en, de, fr, there should be:* _\[dspace-source\]/dspace/modules/jspui/src/main/resources/Messages.properties_* _\[dspace-source\]/dspace/modules/jspui/src/main/resources/Messages_en.properties_* _\[dspace-source\]/dspace/modules/jspui/src/main/resources/Messages_de.properties_* _\[dspace-source\]/dspace/modules/jspui/src/main/resources/Messages_fr.properties_Files to be localized:* _\[dspace-source\]/dspace/modules/jspui/src/main/resources/Messages_LOCALE.properties_* _\[dspace-source\]/dspace/config/input-forms_LOCALE.xml_* _\[dspace-source\]/dspace/config/default_LOCALE.license__should be pure ascii_* _\[dspace-source\]/dspace/config/news-top_LOCALE.html_* _\[dspace-source\]/dspace/config/news-side_LOCALE.html_* _\[dspace-source\]/dspace/config/emails/change_password_LOCALE_* _\[dspace-source\]/dspace/config/emails/feedback_LOCALE_* _\[dspace-source\]/dspace/config/emails/internal_error_LOCALE_* _\[dspace-source\]/dspace/config/emails/register_LOCALE_* _\[dspace-source\]/dspace/config/emails/submit_archive_LOCALE_* _\[dspace-source\]/dspace/config/emails/submit_reject_LOCALE_* _\[dspace-source\]/dspace/config/emails/submit_task_LOCALE_* _\[dspace-source\]/dspace/config/emails/subscription_LOCALE_* _\[dspace-source\]/dspace/config/emails/suggest_LOCALE_* _\[dspace\]/webapps/jspui/help/collection-admin_LOCALE.html__in html keep the jump link as original; must be copied to \[dspace-source\]/dspace/modules/jspui/src/main/webapp/help_* _\[dspace\]/webapps/jspui/help/index_LOCALE.html__must be copied to \[dspace-source\]/dspace/modules/jspui/src/main/webapp/help_* _\[dspace\]/webapps/jspui/help/site-admin_LOCALE.html__must be copied to \[dspace-source\]/dspace/modules/jspui/src/main/webapp/help_h3. Item MapperBecause the item mapper requires a primitive implementation of the browse system to be present, we simply need to tell that system which of our indexes defines the author browse (or equivalent) so that the mapper can list authors' items for mappingDefine the index name (from _webui.browse.index_) to use for displaying items by author.|Property: |_itemmap.author.index_||Example Value: |_itemmap.author.index = author_||Informational Note: |If you change the name of your author browse field, you will also need to update this property key. |h3. Display of Group Membership|Property: |_webui.mydspace.showgroupmembership_||Example Value: |_webui.mydspace.showgroupmembership = false_||Informational Note: |To display group membership set to "true". If omitted, the default behavior is false. |h3. SFX ServerSFX Server is an OpenURL Resolver.|Property: |_sfx.server.url_||Example Value: |_sfx.server.url = http://sfx.myu.edu:8888/sfx?_||Informational Note: |SFX query is appended to this URL. If this property is commented out or omitted, SFX support is switched off. |H3. Item Recommendation Setting|Property: |_webui.suggest.enable_||Example Value: |webui.suggest.enable = true ||Informational Note: |Show a link to the item recommendation page from item display page. || ||Property: |_webui.suggest.loggedinusers.only_||Example Value: |_webui.suggest.loggedinusers.only = true_||Informational Note: |Enable only if the user is logged in. If this key commented out, the default value is false. |H3. Controlled Vocabulary SettingsDSpace now supports controlled vocabularies to confine the set of keywords that users can use while describing items.|Property: |_webui.controlledvocabulary.enable_||Example Value: |_webui.controlledvocabulary.enable = true_||Informational Note: |Enable or disable the controlled vocabulary add-on. WARNING: This feature is not compatible with WAI (it requires javascript to function). |The need for a limited set of keywords is important since it eliminates the ambiguity of a free description system, consequently simplifying the task of finding specific items of information.The controlled vocabulary add-on allows the user to choose from a defined set of keywords organized in an tree (taxonomy) and then use these keywords to describe items while they are being submitted.We have also developed a small search engine that displays the classification tree (or taxonomy) allowing the user to select the branches that best describe the information that he/she seeks.The taxonomies are described in XML following this (very simple) structure:{code}
<node id="acmccs98" label="ACMCCS98">
    <isComposedBy>
        <node id="A." label="General Literature">
            <isComposedBy>
                <node id="A.0" label="GENERAL"/>
                <node id="A.1" label="INTRODUCTORY AND SURVEY"/>
            </isComposedBy>
        </node>
    </isComposedBy>
</node>{code}Your are free to use any application you want to create your controlled vocabularies. A simple text editor should be enough for small projects. Bigger projects will require more complex tools. You may use Protegé to create your taxonomies, save them as OWL and then use a XML Stylesheet (XSLT) to transform your documents to the appropriate format. Future enhancements to this add-on should make it compatible with standard schemas such as OWL or RDF.In order to make DSpace compatible with WAI 2.0, the add-on is *turned off* by default (the add-on relies strongly on Javascript to function). It can be activated by setting the following property in _dspace.cfg_:_webui.controlledvocabulary.enable = true_New vocabularies should be placed in _\[dspace\]/config/controlled-vocabularies/_ and must be according to the structure described. A validation XML Schema can be downloaded [here|controlledvocabulary.xsd|here].Vocabularies need to be associated with the correspondent DC metadata fields. Edit the file _\[dspace\]/config/input-forms.xml_ and place a _"vocabulary"_ tag under the _"field"_ element that you want to control. Set value of the _"vocabulary"_ element to the name of the file that contains the vocabulary, leaving out the extension (the add-on will only load files with extension "*.xml"). For example:{code}
<field>
    <dc-schema>dc</dc-schema>
    <dc-element>subject</dc-element>
    <dc-qualifier></dc-qualifier>
    <!-- An input-type of twobox MUST be marked as repeatable -->
    <repeatable>true</repeatable>
    <label>Subject Keywords</label>
    <input-type>twobox</input-type>
    <hint> Enter appropriate subject keywords or phrases below. </hint>
    <required></required>
    <vocabulary [closed="false"]>nsi</vocabulary>
</field>{code}The vocabulary element has an optional boolean attribute *closed* that can be used to force input only with the javascript of controlled-vocabulary add-on. The default behavior (i.e. without this attribute) is as set *closed="false"*. This allow the user also to enter the value in free way.The following vocabularies are currently available by default:* *nsi* - _nsi.xml_ - The Norwegian Science Index* *srsc* - _srsc.xml_ - Swedish Research Subject Categoriesh3. XMLUI Specific ConfigurationThe DSpace digital repository supports two user interfaces: one based upon JSP technologies and the other based upon the Apache Cocoon framework. This section describes those configurations settings which are specific to the XMLUI interface based upon the Cocoon framework. _(Prior to DSpace Release 1.5.1 XMLUI was referred to Manakin. You may still see references to "Manakin")_|Property: |_xmlui.supported.locales_||Example Value: |_xmlui.supported.locales = en, de_||Informational Note: |A list of supported locales for Manakin. Manakin will look at a user's browser configuration for the first language that appears in this list to make available to in the interface. This parameter is a comma separated list of Locales. All types of Locales country, country_language, country_language_variant. Note that if the appropriate files are not present (i.e. Messages_XX_XX.xml) then Manakin will fall back through to a more general language. || ||Property: |_xmlui.force.ssl_||Example Value: |_xmlui.force.ssl = true_||Informational Note: |Force all authenticated connections to use SSL, only non-authenticated connections are allowed over plain http. If set to true, then you need to ensure that the '_dspace.hostname_' parameter is set to the correctly.|| ||Property: |_xmlui.user.registration_||Example Value: |_xmlui.user.registration = true_||Informational Note: |Determine if new users should be allowed to register. This parameter is useful in conjunction with Shibboleth where you want to disallow registration because Shibboleth will automatically register the user. Default value is true. || ||Property: |_xmlui.user.editmetadata_||Example Value: |_xmlui.user.editmetadata = true_||Informational Note: |Determines if users should be able to edit their own metadata. This parameter is useful in conjunction with Shibboleth where you want to disable the user's ability to edit their metadata because it came from Shibboleth. Default value is true. || ||Property: |_xmlui.user.assumelogon_||Example Value: |_xmlui.user.assumelogon = true_||Informational Note: |Determine if super administrators (those whom are in the Administrators group) can login as another user from the "edit eperson" page. This is useful for debugging problems in a running dspace instance, especially in the workflow process. The default value is false, i.e., no one may assume the login of another user. || ||Property: |_xmlui.user.loginredirect_||Example Value: |_xmlui.user.loginredirect = /profile_||Informational Note: |After a user has logged into the system, which url should they be directed? Leave this parameter blank or undefined to direct users to the homepage, or _/profile_ for the user's profile, or another reasonable choice is _/submissions_ to see if the user has any tasks awaiting their attention. The default is the repository home page.|| ||Property: |_xmlui.theme.allowoverrides_||Example Value: |_xmlui.theme.allowoverrides = false_||Informational Note: |Allow the user to override which theme is used to display a particular page. When submitting a request add the HTTP parameter "themepath" which corresponds to a particular theme, that specified theme will be used instead of the any other configured theme. Note that this is a potential security hole allowing execution of unintended code on the server, this option is only for development and debugging it should be turned off for any production repository. The default value unless otherwise specified is "false". || ||Property: |_xmlui.bundle.upload_||Example Value: |_xmlui.bundle.upload = ORIGINAL, METADATA, THUMBNAIL, LICENSE, CC_LICENSE_||Informational Note: |Determine which bundles administrators and collection administrators may upload into an existing item through the administrative interface. If the user does not have the appropriate privileges (add and write) on the bundle then that bundle will not be shown to the user as an option. || ||Property: |_xmlui.community-list.render.full_||Example Value: |_xmlui.community-list.render.full = true_||Informational Note: |On the community-list page should all the metadata about a community/collection be available to the theme. This parameter defaults to true, but if you are experiencing performance problems on the community-list page you should experiment with turning this option off. || ||Property: |_xmlui.community-list.cache_||Example Value: |_xmlui.community-list.cache = 12 hours_||Informational Note: |Normally, Manakin will fully verify any cache pages before using a cache copy. This means that when the community-list page is viewed the database is queried for each community/collection to see if their metadata has been modified. This can be expensive for repositories with a large community tree. To help solve this problem you can set the cache to be assumed valued for a specific set of time. The downside of this is that new or editing communities/collections may not show up the website for a period of time. || ||Property: |_xmlui.bistream.mods_||Example Value: |_xmlui.bistream.mods = true_||Informational Note: |Optionally, you may configure Manakin to take advantage of metadata stored as a bitstream. The MODS metadata file must be inside the "METADATA" bundle and named MODS.xml. If this option is set to 'true' and the bitstream is present then it is made available to the theme for display. || ||Property: |_xmlui.bitstream.mets_||Example Value: |_xmlui.bitstream.mets = true_||Informational Note: |Optionally, you may configure Manakin to take advantage of metadata stored as a bitstream. The METS metadata file must be inside the "METADATA" bundle and named METS.xml. If this optino is set to "true" and the bitstream is present then it is made available to the theme for display. || ||Property: |_xmlui.google.analytics.key_||Example Value: |_xmlui.google.analytics.key = UA-XXXXXX-X_||Informational Note: |If you would like to use google analytics to track general website statistics then use the following parameter to provide your analytics key. First sign up for an account at [http://analytics.google.com|http://analytics.google.com|http://analytics.google.com], then create an entry for your repositories website. Google Analytics will give you a snipit of javascript code to place on your site, inside that snip it is your google analytics key usually found in the line: _uacct = "UA-XXXXXXX-X" Take this key (just the UA-XXXXXX-X part) and place it here in this parameter.|| ||Property: |_xmlui.controlpanel.activity.max_||Example Value: |_xmlui.controlpanel.activity.max = 250_||Informational Note: |Assign how many page views will be recorded and displayed in the control panel's activity viewer. The activity tab allows an administrator to debug problems in a running DSpace by understanding who and how their dspace is currently being used. The default value is 250. || ||Property: |_xmlui.controlpanel.activity.ipheader_||Example Value: |_xmlui.controlpanel.activity.ipheader = X-Forward-For_||Informational Note: |Determine where the control panel's activity viewer recieves an events IP address from. If your DSpace is in a load balanced enviornment or otherwise behind a context-switch then you will need to set the paramater to the HTTP parameter that records the original IP address. |h3. OAI-PMH Configuration and ActivationIn the following sections, you will learn how to configure OAI-PMH and activate additional OAI-PMH crosswalks. The user is also referred to 9.2OAI-PMH Data Provider for greater depth details of the program.h4. OAI-PMH Configuration|Property: |_oai.didl.maxresponse_||Example Value: |_oai.didle.maxresponse = 0_||Informational Note: |Max response size for DIDL. This is the maximum size in bytes of the files you wish to enclose Base64 encoded in your responses, remember that the base64 encoding process uses a lot of memory. We recommend at most 200000 for answers of 30 records each on a 1 Gigabyte machine. Ultimately this will change to a streaming model and remove this restriction. Also please remember to allocate plenty of memory, at least 512 MB to your Tomcat. Optional: DSpace uses 100 records as the limit for the oai responses. You can alter this by changing _/\[dspace-source\]/dspace-oai/dspace-oai-api/src/main/java/org/dspace/app/oai/DSpaceOAICatalog.java_ to codify the declaration: private final int MAX_RECORDS = 100 to private final int MAX_RECORDS = 30|h4. Activating Additional OAI-PMH CrosswalksDSpace comes with an unqualified DC Crosswalk used in the default OAI-PMH data provider. There are also other Crosswalks bundled with the DSpace distribution which can be activated by editing one or more configuration files. How to do this for each available Crosswalk is described below. The DSpace source includes the following crosswalk plugins available for use with OAI-PMH:* *_mets_* - The manifest document from a DSpace METS SIP.* *_mods_* - MODS metadata, produced by the table-driven MODS dissemination crosswalk.* *_qdc_* - Qualfied Dublin Core, produced by the configurable QDC crosswalk. Note that this QDC does _not_ include all of the DSpace "dublin core" metadata fields, since the XML standard for QDC is defined for a different set of elements and qualifiers.OAI-PMH crosswalks based on Crosswalk Plugins are activated as follows:#  Ensure the crosswalk plugin has a _lower-case_ name (possibly in addition to its upper-case name) in the plugin configuration.#  Add a line to the file _config/templates/oaicat.properties_ of the form:_Crosswalks.__plugin_name__=org.dspace.app.oai.PluginCrosswalk_ substituting the plugin's name, e.g. _"mets"_ or _"qdc"_for _plugin_name_.#  Run the _bin/install-configs_ script#  Restart your servlet container, e.g. Tomcat, for the change to take effect. h5. DIDLBy activating the DIDL provider, DSpace items are represented as MPEG-21 DIDL objects. These DIDL objects are XML documents that wrap both the Dublin Core metadata that describes the DSpace item and its actual bitstreams. A bitstream is provided inline in the DIDL object in a base64 encoded manner, and/or by means of a pointer to the bitstream. The data provider exposes DIDL objects via the metadataPrefix didl.The crosswalk does not deal with special characters and purposely skips dissemination of the _license.txt_ file awaiting a better understanding on how to map DSpace rights information to MPEG21-DIDL.The DIDL Crosswalk can be activated as follows:#  Uncomment the _oai.didl.maxresponse_ item in _dspace.cfg_#  Uncomment the DIDL Crosswalk entry from the _config/templates/oaicat.properties_ file#  Run the _bin/install-configs_ script#  Restart Tomcat #  Verify the Crosswalk is activated by accessing a URL such as _http://mydspace/oai/request?verb=ListRecords&metadataPrefix=didl_h3. Delegation Administration(Authorization System Configuration)|Property: |_core.authorization.community-admin.create-subelement_||Example Value: |_core.authorization.community-admin.create-subelement = true_||Informational Note: |It is now possible to delegate the administration of Communities and Collections without the need of the Administrator Superuser. The delegation uses an "inherited" technique. A community admin will be a collection admin for all the collections within the community and a collection admin will be always an item admin for all the item owned by the collection. All the functions that are allowed to user with WRITE permission on an object will always allowed to be the ADMIN of the object (e.g. community/collection/admin will be always allowed to edit metadata of the object). The default will be "on" for all the configurations. ||Community Administration: subcommunities and collections |{code}core.authorization.community-admin.create-subelement
core.authorization.community-admin.delete-subelement{code}||then administers the following keys: |{code}core.authorization.community-admin.policies
core.authorization.community-admin.admin-group{code}||Collections in the above community: |{code}core.authorization.community-admin.collection.policies
core.authorization.community-admin.collection.template-item
core.authorization.community-admin.collection.submitters
core.authorization.community-admin.collection.workflows
core.authorization.community-admin.collection.admin-group{code}||Item owned by Collections in the above Community: |{code}core.authorization.community-admin.item.delete
core.authorization.community-admin.item.withdraw
core.authorization.community-admin.item.reinstatiate
core.authorization.community-admin.item.policies{code} And also these bundles: {code}core.authorization.community-admin.item.create-bitstream
core.authorization.community-admin.item.delete-bitstream
core.authorization.community-admin.item-admin.cc-license{code}||Collection Administration: |{code}core.authorization.collection-admin.policies
core.authorization.collection-admin.template-item
core.authorization.collection-admin.submitters
core.authorization.collection-admin.workflows
core.authorization.collection-admin.admin-group{code} Item owned by the above Collection {code}core.authorization.collection-admin.item.delete
core.authorization.collection-admin.item.withdraw
core.authorization.collection-admin.item.reinstatiate
core.authorization.collection-admin.item.policies{code} And also these bundles: {code}core.authorization.collection-admin.item.create-bitstream
core.authorization.collection-admin.item.delete-bitstream
core.authorization.collection-admin.item-admin.cc-license{code}||Item Administration: |{code}core.authorization.item-admin.policies{code} And also these bundles: {code}core.authorization.item-admin.create-bitstream
core.authorization.item-admin.delete-bitstream
core.authorization.item-admin.cc-license{code}|Oracle users should consult _Chapter 4 Updating a DSpace Installation_ regarding the necessary database changes that need to take place.h3. Batch Metadata EditingThe following configurations allow the adminstrator extract from the DSpace database a set of records for editing by a metadata export. It provides an easier way of editing large collections.|Property: |_bulkedit.valueseparator_||Example Value: |__bulkedit.valueseparator = ||||Informational note |The delimiter used to separate values within a single field. For example, this will place the double pipe between multiple authors appearing in one record (Smith, William || Johannsen, Susan). This applies to any metadata field that appears more than once in a record. The user can change this to another character.  || ||Property: |_bulkedit.fieldseparator_||Example Value: |_bulkedit.fieldseparator = ,_||Informational note |The delimiter used to serarate fields (defaults to a comma for CSV). Again, the user could change it something like '$'. If you wish to use a tab, semicolon, or hash (#) sign as the delimiter, set the value to be _tab_, _semicolon_ or _hash_. {code}bulkedit.fieldseparator = tab{code}|| ||Property: |_bulkedit.gui-item-limit_||Example Value: |_bulkedit.gui-item-limit = 20_||Informational note |When using the WEBUI, this sets the limit of the number of items allowed to be edited in one processing. There is no limit when using the CLI. || ||Property: |_bulkedit.ignore-on-export_||Example Value: |{code}bulkedit.ignore-on-export = dc.date.accessioned, \
                            dc.date.available, \
                            dc.date.updated, dc.description.provenance{code}||Informational note |Metadata elements to exclude when exporting via the user interfaces, or when using the command line version and not using the -a (all) option. |h3. Hiding MetadataIt is now possible to hide metadata from public consumption that is only avaialable to the Administrator.|Property: |_metadata.hide.dc.description.provenance_||Example Value: |_metadata.hide.dc.description.provenance = true_||Informational Note: |Hides the metadata in the property key above except to the administrator.  Fields named here are hidden in the following places UNLESS the logged-in user is an Administrator: # XMLUI metadata XML view, and Item splash pages (long and short views). # JSPUI Item splash pages # OAI-PMH server, "oai_dc" format. (Note: Other formats are **not** affected.) To designate a field as hidden, add a property here in the form: _metadata.hide.SCHEMA.ELEMENT.QUALIFIER = true_This default configuration hides the dc.description.provenance field, since that usually contains email addresses which ought to be kept private and is mainly of interest to administrators. |h2. Optional or Advanced Configuration SettingsThe following section explains how to configure either optional features or advanced features that are not necessary to make DSpace "out-of-the-box"h3. The Metadata Format and Bitstream Format RegistriesThe _\[dspace\]/config/registries_ directory contains three XML files. These are used to load the _initial_ contents of the Dublin Core Metadata registry and Bitstream Format registry and SWORD metadata registry. After the initial loading (performed by _ant fresh_install_ above), the registries reside in the database; the XML files are not updated.In order to change the registries, you may adjust the XML files before the first installation of DSpace. On an already running instance it is recommended to change bitstream registries via DSpace admin UI, but the metadata registries can be loaded again at any time from the XML files without difficult. The changes made via admin UI are not reflected in the XML files.h4. Metadata Format RegistriesThe default metadata schema is Dublin Core, so DSpace is distributed with a default Dublin Core Metadata Registry. Currently, the system requires that every item have a Dublin Core record.There is a set of Dublin Core Elements, which is used by the system and should not be removed or moved to another schema, see Appendix: Default Dublin Core Metadata registry.*Note*: altering a Metadata Registry has no effect on corresponding parts, e.g. item submission interface, item display, item import and vice versa. Every metadata element used in submission interface or item import must be registered before using it.*Note* also that deleting a metadata element will delete all its corresponding values.If you wish to add more metadata elements, you can do this in one of two ways. Via the DSpace admin UI you may define new metadata elements in the different available schemas. But you may also modify the XML file (or provide an additional one), and re-import the data as follows:{code}[dspace]/bin/dsrun org.dspace.administer.MetadataImporter -f [xml file]{code}The XML file should be structured as follows:{code}<dspace-dc-types>
    <dc-type>
        <schema>dc</schema>
        <element>contributor</element>
        <qualifier>advisor</qualifier>
        <scope_note>Use primarily for thesis advisor.</scope_note>
    </dc-type>
</dspace-dc-types>{code}h4. Bitstream Format RegistryThe bitstream formats recognized by the system and levels of support are similarly stored in the bitstream format registry. This can also be edited at install-time via _\[dspace\]/config/registries/bitstream-formats.xml_ or by the administation Web UI. The contents of the bitstream format registry are entirely up to you, though the system requires that the following two formats are present:* _Unknown_* _License_ Deleting a format will cause any existing bitstreams of this format to be reverted to the unknown bitstream format. h3. XPDF Filter  This is an alternative suite of MediaFilter plugins that offers faster and more reliable text extraction from PDF Bitstreams, as well as thumbnail image generation. It replaces the built-in default PDF MediaFilter.  If this filter is so much better, why isn't it the default? The answer is that it relies on external executable programs which must be obtained and installed for your server platform. This would add too much complexity to the installation process, so it left out as an optional "extra" step. h4. Installation OverviewHere are the steps required to install and configure the filters:# Install the xpdf tools for your platform, from the downloads at [http://www.foolabs.com/xpdf|http://www.foolabs.com/xpdf/|http://www.foolabs.com/xpdf]# Acquire the Sun Java Advanced Imaging Tools and create a local Maven package. # Edit DSpace configuration properties to add location of xpdf executables, reconfigure MediaFilter plugins. # Build and install DSpace, adding -Pxpdf-mediafilter-support to Maven invocation. h4. Install XPDF ToolsFirst, download the XPDF suite found at: [http://www.foolabs.com/xpdf|http://www.foolabs.com/xpdf/|http://www.foolabs.com/xpdf] and install it on your server. The executables can be located anywhere, but make a note of the full path to each command.You may be able to download a binary distribution for your platform, which simplifies installation. Xpdf is readily available for Linux, Solaris, MacOSX, Windows, NetBSD, HP-UX, AIX, and OpenVMS, and is reported to work on AIX, OS/2, and many other systems.The only tools you _really_ need are:* _pdfinfo_ - displays properties and Info dict* _pdftotext_ - extracts text from PDF* _pdftoppm_ - images PDF for thumbnailsh4. *Fetch and install jai_imageio JAR*Fetch and install the Java™ Advanced Imaging Image I/O Tools.For AIX, Sun support has the following: "JAI has native acceleration for the above but it also works in pure Java mode. So as long as you have an appropriate JDK for AIX (1.3 or later, I believe), you should be able to use it. You can download any of them, extract just the jars, and put those in your $CLASSPATH."Download the _jai_imageio_ library version 1.0_01 or 1.1 found at: [https://jai-imageio.dev.java.net/binary-builds.html#Stable_builds|https://jai-imageio.dev.java.net/binary-builds.html#Stable_builds|https://jai-imageio.dev.java.net/binary-builds.html#Stable_builds] .For these filters you do NOT have to worry about the native code, just the JAR, so choose a download for any platform.{code}
curl -O http://download.java.net/media/jai-imageio/builds/release/1.1/jai_imageio-1_1-lib-linux-i586.tar.gz
tar xzf jai_imageio-1_1-lib-linux-i586.tar.gz
{code}The preceding example leaves the JAR in *_jai_imageio-1_1/lib/jai_imageio.jar_* . Now install it in your local Maven repository, e.g.: (changing the path after _file=_ if necessary){code}
       mvn install:install-file                       \
          -Dfile=jai_imageio-1_1/lib/jai_imageio.jar  \
          -DgroupId=com.sun.media                     \
          -DartifactId=jai_imageio                    \
          -Dversion=1.0_01                            \
          -Dpackaging=jar                             \
          -DgeneratePom=true
{code} You may have to repeat this procedure for the _jai_core.jar_ library, as well, if it is not available in any of the public Maven repositories. Once acquired, this command installs it locally: {code}
mvn install:install-file -Dfile=jai_core-1.1.2_01.jar  \
    -DgroupId=javax.media -DartifactId=jai_core -Dversion=1.1.2_01 -Dpackaging=jar -DgeneratePom=true
{code}h4. Edit DSpace ConfigurationFirst, be sure there is a value for _thumbnail.maxwidth_ and that it corresponds to the size you want for preview images for the UI, e.g.: (_NOTE:_ this code doesn't pay any attention to _thumbnail.maxheight_ but it's best to set it too so the other thumbnail filters make square images.){code}
        # maximum width and height of generated thumbnails
        thumbnail.maxwidth  300
        thumbnail.maxheight 300
        {code} Now, add the absolute paths to the XPDF tools you installed. In this example they are installed under _/usr/local/bin_ (a logical place on Linux and MacOSX), but they may be anywhere.{code}
        xpdf.path.pdftotext = /usr/local/bin/pdftotext
        xpdf.path.pdftoppm = /usr/local/bin/pdftoppm
        xpdf.path.pdfinfo = /usr/local/bin/pdfinfo
        {code}Change the MediaFilter plugin configuration to remove the old _org.dspace.app.mediafilter.PDFFilter_ and add the new filters, e.g: (New sections are in bold){code}
        filter.plugins = \
         PDF Text Extractor, \
         PDF Thumbnail, \
         HTML Text Extractor, \
         Word Text Extractor, \
         JPEG Thumbnail
         plugin.named.org.dspace.app.mediafilter.FormatFilter = \
         org.dspace.app.mediafilter.XPDF2Text = PDF Text Extractor, \
         org.dspace.app.mediafilter.XPDF2Thumbnail = PDF Thumbnail, \
         org.dspace.app.mediafilter.HTMLFilter = HTML Text Extractor, \
         org.dspace.app.mediafilter.WordFilter = Word Text Extractor, \
         org.dspace.app.mediafilter.JPEGFilter = JPEG Thumbnail, \
         org.dspace.app.mediafilter.BrandedPreviewJPEGFilter = Branded Preview JPEG
        {code}Then add the input format configuration properties for each of the new filters, e.g.:{code}filter.org.dspace.app.mediafilter.XPDF2Thumbnail.inputFormats = Adobe PDFfilter.org.dspace.app.mediafilter.XPDF2Text.inputFormats = Adobe PDF{code}Finally, if you want PDF thumbnail images, don't forget to add that filter name to the _filter.plugins_ property, e.g.:{code}
          filter.plugins = PDF Thumbnail,  PDF Text Extractor, ...
        {code}h4. Build and InstallFollow your usual DSpace installation/update procedure, only add _-Pxpdf-mediafilter-support_ to the Maven invocation:{code}
        mvn -Pxpdf-mediafilter-support package
        ant -Dconfig=etc. ...{code}h3. Creating a new Media/Format Filterh4. Creating a simple Media FilterNew Media Filters *must implement* the _org.dspace.app.mediafilter.FormatFilter_ interface. More information on the methods you need to implement is provided in the _FormatFilter.java_ source file. For example:{code} public class MySimpleMediaFilter implements
        FormatFilter{code}Alternatively, you could extend the _org.dspace.app.mediafilter.MediaFilter_ class, which just defaults to performing no pre/post-processing of bitstreams before or after filtering.{code} public class MySimpleMediaFilter extends
        MediaFilter{code}You must give your new filter a "name", by adding it and its name to the _plugin.named.org.dspace.app.mediafilter.FormatFilter_ field in _dspace.cfg_. In addition to naming your filter, make sure to specify its input formats in the _filter.<class path>.inputFormats_ config item. Note the input formats must match the _short description_ field in the Bitstream Format Registry (i.e. _bitstreamformatregistry_ table).{code} plugin.named.org.dspace.app.mediafilter.FormatFilter = \
        org.dspace.app.mediafilter.MySimpleMediaFilter = My Simple Text
        Filter, \ ...
        filter.org.dspace.app.mediafilter.MySimpleMediaFilter.inputFormats =
        Text{code}_WARNING: If you neglect to define the _inputFormats_ for a particular filter, the _MediaFilterManager_ will never call that filter, since it will never find a bitstream which has a format matching that filter's input format(s)._If you have a complex Media Filter class, which actually performs different filtering for different formats (e.g. conversion from Word to PDF *and* conversion from Excel to CSV), you should define this as a [Dynamic / Self-Named Format Filter|selfnamedfilter|Dynamic / Self-Named Format Filter].h4. Creating a Dynamic or "Self-Named" Format FilterIf you have a more complex Media/Format Filter, which actually performs *multiple* filtering or conversions for different formats (e.g. conversion from Word to PDF *and* conversion from Excel to CSV), you should have define a class which implements the _FormatFilter_ interface, while also extending the [SelfNamedPlugin|business.html#selfnamedplugin|SelfNamedPlugin] class. For example:{code} public class MyComplexMediaFilter extends
        SelfNamedPlugin implements FormatFilter{code}Since _SelfNamedPlugins_ are self-named (as stated), they must provide the various names the plugin uses by defining a getPluginNames() method. Generally speaking, each "name" the plugin uses should correspond to a different type of filter it implements (e.g. "Word2PDF" and "Excel2CSV" are two good names for a complex media filter which performs both Word to PDF and Excel to CSV conversions).Self-Named Media/Format Filters are also configured differently in _dspace.cfg_. Below is a general template for a Self Named Filter (defined by an imaginary _MyComplexMediaFilter_ class, which can perform both Word to PDF and Excel to CSV conversions):{code} #Add to a list of all Self Named filters
        plugin.selfnamed.org.dspace.app.mediafilter.FormatFilter = \
        org.dspace.app.mediafilter.MyComplexMediaFilter #Define input formats
        for each "named" plugin this filter implements
        filter.org.dspace.app.mediafilter.MyComplexMediaFilter.Word2PDF.inputF
ormats = Microsoft Word
        filter.org.dspace.app.mediafilter.MyComplexMediaFilter.Excel2CSV.input
Formats = Microsoft Excel{code}As shown above, each Self-Named Filter class must be listed in the _plugin.selfnamed.org.dspace.app.mediafilter.FormatFilter_ item in _dspace.cfg_. In addition, each Self-Named Filter *must* define the input formats for _each named plugin_ defined by that filter. In the above example the _MyComplexMediaFilter_ class is assumed to have defined two named plugins, _Word2PDF_ and _Excel2CSV_. So, these two valid plugin names ("Word2PDF" and "Excel2CSV") *must* be returned by the _getPluginNames()_ method of the _MyComplexMediaFilter_ class.These named plugins take different input formats as defined above (see the corresponding _inputFormats_ setting). _WARNING: If you neglect to define the _inputFormats_ for a particular named plugin, the _MediaFilterManager_ will never call that plugin, since it will never find a bitstream which has a format matching that plugin's input format(s)._For a particular Self-Named Filter, you are also welcome to define additional configuration settings in _dspace.cfg_. To continue with our current example, each of our imaginary plugins actually results in a different output format (Word2PDF creates "Adobe PDF", while Excel2CSV creates "Comma Separated Values"). To allow this complex Media Filter to be even more configurable (especially across institutions, with potential different "Bitstream Format Registries"), you may wish to allow for the output format to be customizable for each named plugin. For example:{code} #Define output formats for each named plugin
        filter.org.dspace.app.mediafilter.MyComplexMediaFilter.Word2PDF.output
Format = Adobe PDF
        filter.org.dspace.app.mediafilter.MyComplexMediaFilter.Excel2CSV.outpu
tFormat = Comma Separated Values{code}Any custom configuration fields in _dspace.cfg_ defined by your filter are ignored by the _MediaFilterManager_, so it is up to your custom media filter class to read those configurations and apply them as necessary. For example, you could use the following sample Java code in your _MyComplexMediaFilter_ class to read these custom _outputFormat_ configurations from _dspace.cfg_ :{code} //get "outputFormat" configuration from dspace.cfg
        String outputFormat =
        ConfigurationManager.getProperty(MediaFilterManager.FILTER_PREFIX +
        "." + MyComplexMediaFilter.class.getName() + "." +
        this.getPluginInstanceName() + ".outputFormat");{code}h3. Configuration Files for Other ApplicationsTo ease the hassle of keeping configuration files for other applications involved in running a DSpace site, for example Apache, in sync, the DSpace system can automatically update them for you when the main DSpace configuration is changed. This feature of the DSpace system is entirely optional, but we found it useful.The way this is done is by placing the configuration files for those applications in _\[dspace\]/config/templates_, and inserting special values in the configuration file that will be filled out with appropriate DSpace configuration properties. Then, tell DSpace where to put filled-out, 'live' version of the configuration by adding an appropriate property to _dspace.cfg_, and run _\[dspace\]/bin/install-configs_.Take the _apache13.conf_ file as an example. This contains plenty of Apache-specific stuff, but where it uses a value that should be kept in sync across DSpace and associated applications, a 'placeholder' value is written. For example, the host name:{code}
ServerName @@dspace.hostname@@
{code}The text _@@dspace.hostname@@_ will be filled out with the value of the _dspace.hostname_ property in _dspace.cfg_. Then we decide where we want the 'live' version, that is, the version actually read in by Apache when it starts up, will go.Let's say we want the live version to be located at _/opt/apache/conf/dspace-httpd.conf_. To do this, we add the following property to _dspace.cfg_ so DSpace knows where to put it:{code}
config.template.apache13.conf = /opt/apache/conf/dspace-httpd.conf
{code}Now, we run _\[dspace\]/bin/install-configs_. This reads in _\[dspace\]/config/templates/apache13.conf_, and places a copy at _/opt/apache/conf/dspace-httpd.conf_ with the placeholders filled out.So, in _/opt/apache/conf/dspace-httpd.conf_, there will be a line like:{code}
ServerName dspace.myu.edu
{code}The advantage of this approach is that if a property like the hostname changes, you can just change it in _dspace.cfg_ and run _install-configs_, and all of your tools' configuration files will be updated.However, take care to make all your edits to the versions in _\[dspace\]/config/templates_! It's a wise idea to put a big reminder at the top of each file, since someone might unwittingly edit a 'live' configuration file which would later be overwritten.h3. Configuring Usage Instrumentation PluginsA usage instrumentation plugin is configured as a singleton plugin for the abstract class org.dspace.app.statistics.AbstractUsageEvent. h4.  The Passive Plugin  The Passive plugin is provided as the class org.dspace.app.statistics.PassiveUsageEvent. It absorbs events without effect. Use the Passive plugin when you have no use for usage event postings. This is the default if no plugin is configured. h4.  The Tab File Logger Plugin  The Tab File Logger plugin is provided as the class org.dspace.app.statistics.UsageEventTabFileLogger. It writes event records to a file in tab-separated column format. If left unconfigured, an error will be noted in the DSpace log and no file will be produced. To specify the file path, provide an absolute path as the value for usageEvent.tabFileLogger.file in dspace.cfg. h4.  The XML Logger Plugin  The XML Logger plugin is provided as the class org.dspace.app.statistics.UsageEventXMLLogger. It writes event records to a file in a simple XML-like format. If left unconfigured, an error will be noted in the DSpace log and no file will be produced. To specify the file path, provide an absolute path as the value for usageEvent.xmlLogger.file in dspace.cfg. h3. SWORD ConfigurationSWORD (Simple Web-service Offering Repository Deposit) is a protocol that allows the remote deposit of items into repositories. DSpace implements the SWORD protocol via the 'sword' web application. The version of SWORD currently supported by DSpace is 1.3. The specification and further information can be downloaded from[http://swordapp.org|http://swordapp.org/|http://swordapp.org]. SWORD is based on the Atom Publish Protocol and allows service documents to be requested which describe the structure of the repository, and packages to be deposited.|Properties: |_sword.mets-ingester.package-ingester_||Example Value: |_sword.mets-ingester.package-ingester = METS_||Informational Note: |The property key tell the SWORD METS implementation which package ingester to use to install deposited content. This should refer to one of the classes configured for: {code}
                        plugin.named.org.dspace.content.packager.PackageIngester{code}The value of sword.mets-ingester.package-ingester tells the system which named plugin for this interface should be used to ingest SWORD METS packages. || ||Properties: |_mets.submission.crosswalk.EPDCX_||Example Value: |_mets.submission.crosswalk.EPDCX = SWORD_||Informational Note: |Define the metadata type EPDCX (EPrints DC XML)to be handled by the SWORD crosswalk configuration. || ||Properties: |_crosswalk.submission.SWORD.stylesheet_||Example Value: |_crosswalk.submission.SWORD.stylesheet = crosswalks/sword-swap-ingest.xsl_||Informational Note: |Define the stylesheet which will be used by the self-named XSLTIngestionCrosswalk class when asked to load the SWORD configuration (as specified above). This will use the specified stylesheet to crosswalk the incoming SWAP metadata to the DIM format for ingestion. || ||Properties: |_sword.deposit.url_||Example Value: |_sword.deposit.url = http://www.myu.ac.uk/sword/deposit_||Informational Note: |The base URL of the SWORD deposit. This is the URL from which DSpace will construct the deposit location urls for collections. The default is _\{dspace.url\}/sword/deposit_. In the event that you are not deploying DSpace as the ROOT application in the servlet container, this will generate incorrect URLs, and you should override the functionality by specifying in full as shown in the example value.|| ||Properties: |_sword.servicedocument.url _||Example Value: |_sword.servicedocument.url = http://www.myu.ac.uk/sword/servicedocument_||Informational Note: |The base URL of the SWORD service document. This is the URL from which DSpace will construct the service document location urls for the site, and for individual collections. The default is _\{dspace.url\}/sword/servicedocument_ . In the event that you are not deploying DSpace as the ROOT application in the servlet container, this will generate incorrect URLs, and you should override the functionality by specifying in full as shown in the example value.|| ||Properties: |_sword.media-link.url_||Example Value: |_sword.media-link.url = http://www.myu.ac.uk/sword/media-link_||Informational Note: |The base URL of the SWORD media links. This is the URL which DSpace will use to construct the media link urls for items which are deposited via sword. The default is _\{dspace.url\}/sword/media-link_. In the event that you are not deploying DSpace as the ROOT application in the servlet container, this will generate incorrect URLs, and you should override the functionality by specifying in full as shown in the example value.|| ||Properties: |_sword.generator.url_||Example Value: |_sword.generator.url = http://www.dspace.org/ns/sword/1.3.1_||Informational Note: |The URL which identifies the sword software which provides the sword interface. This is the URL which DSpace will use to fill out the atom:generator element of its atom documents. The default is: _http://www.dspace.org/ns/sword/1.3.1_. If you have modified your sword software, you should change this URI to identify your own version. If you are using the standard dspace-sword module you will not, in general, need to change this setting.|| ||Properties: |_sword.updated.field_||Example Value: |_sword.updated.field = dc.date.updated_||Informational Note: |The metadata field in which to store the updated date for items deposited via SWORD. || ||Properties: |_sword.slug.field_||Example Value: |_sword.slug.field = dc.identifier.slug_||Informational Note: |The metadata field in which to store the value of the slug header if it is supplied. || ||Properties: |{code}
sword.accept-packaging.METSDSpaceSIP.identifier
sword.accept-packaging.METSDSpaceSIP.q{code}||Example Value: |_(See example below) _||{code}
sword.accept-packaging.METSDSpaceSIP.identifier = http://purl.org/net/sword-types/METSDSpaceSIP
sword.accept-packaging.METSDSpaceSIP.q = 1.0{code}||Informational Note: |The accept packaging properties, along with their associated quality values where appropriate. This is a Global Setting; these will be used on all DSpace collections || ||Properties: |{code}
sword.accept-packaging.[handle].METSDSpaceSIP.identifier
sword.accept-packaging.[handle].METSDSpaceSIP.q{code}||Example Value: |_(See example below)_||{code}
sword.accept-packaging.[handle].METSDSpaceSIP.identifier = http://purl.org/net/sword-types/METSDSpaceSIP
sword.accept-packaging.[handle].METSDSpaceSIP.q = 1.0{code}||Informational Note: |Collection Specific settings: these will be used on the collections with the given handles. || ||Properties: |_sword.expose-items_||Example Value: |_sword.expose-items = false_||Informational Note: |Should the server offer up items in collections as sword deposit targets. This will be effected by placing a URI in the collection description which will list all the allowed items for the depositing user in that collection on request. *NOTE:* this will require an implementation of deposit onto items, which will not be forthcoming for a short while.|| ||Properties: |_sword.expose-communities_||Example Value: |_sword.expose-communities = false_||Informational Note: |Should the server offer as the default the list of all Communities to a Service Document request. If false, the server will offer the list of all collections, which is the default and recommended behavior at this stage. *NOTE:* a service document for Communities will not offer any viable deposit targets, and the client will need to request the list of Collections in the target before deposit can continue.|| ||Properties: |_sword.max-upload-size_||Example Value: |_sword.max-upload-size = 0_||Informational Note: |The maximum upload size of a package through the sword interface, in bytes. This will be the combined size of all the files, the metadata and any manifest data. It is NOT the same as the maximum size set for an individual file upload through the user interface. If not set, or set to 0, the sword service will default to no limit. || ||Properties: |_sword.keep-original-package_||Example Value: |_sword.keep-original-package = true_||Informational Note: |Whether or not DSpace should store a copy of the original sword deposit package. *NOTE:* this will cause the deposit process to run slightly slower, and will accelerate the rate at which the repository consumes disk space. BUT, it will also mean that the deposited packages are recoverable in their original form. It is strongly recommended, therefore, to leave this option turned on. When set to "true", this requires that the configuration option _upload.temp.dir_ above is set to a valid location.|| ||Properties: |_sword.bundle.name_||Example Value: |_sword.bundle.name = SWORD_||Informational Note: |The bundle name that SWORD should store incoming packages under if sword.keep-original-package is set to true. The default is "SWORD" if not value is set || ||Properties: |_sword.identify-version_||Example Value: |_sword.identify-version = true_||Informational Note: |Should the server identify the sword version in a deposti response. It is recommended to leave this unchanged. || ||Properties: |_sword.on-behalf-of.enable_||Example Value: |_sword.on-behalf-of.enable = true_||Informational Note: |Should mediated deposit via sowrd be supported. If enabled, this will allow users to deposit content packages on behalf of other users. || ||Properties: |{code}
plugin.named.org.dspace.sword.SWORDingester{code}||Example Value: |_(See example below)_||{code}
plugin.named.org.dspace.sword.SWORDIngester = \
  org.dspace.sword.SWORDMETSIngester = http://purl.org/net/sword-types/METSDSpaceSIP \
  org.dspace.sword.SimpleFileIngester = SimpleFileIngester{code}||Informational Note: |Configure the plugins to process incoming packages. The form of this configuration is as per the Plugin Manager's Named Plugin documentation: _plugin.named.\[interface\] = \[implementation\] = \[package format identifier\] \_ . Package ingesters should implement the SWORDIngester interface, and will be loaded when a package of the format specified above in: _sword.accept-packaging.\[package format\].identifier = \[package format identifier\]_ is received. In the event that this is a simple file deposit, with no package format, then the class named by "SimpleFileIngester" will be loaded and executed where appropriate. This case will only occur when a single file is being deposited into an existing DSpace Item.|| ||Properties: |_sword.accepts_||Example Value: |_sword.accepts = application/zip, foo/bar_||Informational Note: |A comma separated list of MIME types that SWORD will accept. |h3. OpenSearch SupportOpenSearch is a small set of conventions and documents for describing and using "serach enginges", meaning any service that returns a set of results for a query. See extensive description in the _Business Layer section_ of the documentation.Please note that for result data formatting, OpenSearch uses Syndication Feed Settings (RSS). So, even if Syndication Feeds *are not* enable, they *must* be configured to enable OpenSearch. OpenSearch uses all the configuration properties for DSpace RSS to determine the mapping of metadata fields to feed fields. Note that a new field for authors has been added (used in Atom format only).|Property: |_websvc.opensearch.enable_||Example Value: |_websvc.opensearch.enable = false_||Informational Note: |Whether or not OpenSearch is enabled. By default, the feature is disabled. Change the property key to 'ture' to enable. || ||Property: |_websvc.opensearch.uicontext_||Example Value: |_websvc.opensearch.uicontext = simple-search_||Informational Note: |_Context for HTML request URLs. Change only for non-standard servlet mapping._|| ||Property: |_websvc.opensearch.svccontext_||Example Value: |_websvc.opensearch.svccontext = open-search/_||Informational Note: |Context for RSS/Atom request URLs. Change only for non-standard servlet mapping. || ||Property: |_websvc.opensearch.autolink_||Example Value: |_websvc.opensearch.autolink = true_||Informational Note: |_Present autodiscovery link in every page head._|| ||Property: |_websvc.opensearch.validity_||Example Value: |_websvc.opensearch.validity = 48_||Informational Note: |Number of hours to retain results before recalculating. This applies to the Manakin interface only. || ||Property: |_websvc.opensearch.shortname_||Example Value: |_websvc.opensearch.shortname = DSpace_||Informational Note: |A short name used in browsers for search service. It should be sixteen (16) or fewer characters. || ||Property: |_websvc.opensearch.longname_||Example Value: |_websvc.opensearch.longname = $\{dspace.name\}_||Informational Note: |A longer name up to 48 characters. || ||Property: |_websvc.opensearch.description_||Example Value: |_websvc.opensearch.description = $\{dspace.name\} DSpace repository_||Informational Note: |_Brief service description_|| ||Property: |_websvc.opensearch.faviconurl_||Example Value: |_websvc.opensearch.faviconurl = http://www.dspace.org/images/favicon.ico_||Informational Note: |Location of favicon for service, if any. They must by 16 x 16 pixels. You can profide your own local favicon instead of the default. || ||Property: |_websvc.opensearch.samplequery_||Example Value: |_websvc.opensearch.samplequery = photosynthesis_||Informational Note: |Sample query. This should return results. You can replace the sample query with search terms that should actually yield results in your repository. || ||Property: |_websvc.opensearch.tags_||Example Value: |_websc.opensearch.tags = IR DSpace_||Informational Note: |Tags used to describe search service.  || ||Property: |_websvc.opensearch.formats_||Example Value: |_websvc.opensearch.formats = html,atom,rss_||Informational Note: |Result formats offered. Use one or more comma-separated from the list: html, atom, rss. Please note that html is requred for autodiscovery in browsers to function, and must be the first in the list if present. |h3. EmbargoIt is possible now to configure a DSpace instance to have an "Embargo" feature uses for thesis and dissertations.|Property: |_embargo.field.terms_||Example Value: |_embargo.field.terms = SCHEMA.ELEMENT.QUALIFIER_||Informational Note: |DC metadata field to hold the user-supplied embargo terms || ||Property: |_embargo.field.lift_||Example Value: |_embargo.field.lift = SCHEMA.ELEMENT.QUALIFIER_||Informational Note: |DC metadata field to hold computed "lift date" of embargo || ||Property: |_embargo.terms.open_||Example Value: |_embargo.terms.open = forever_||Informational Note: |The string in terms field to indicate indefinite embargo || ||Property: |_plugin.single.org.dspace.embargo.EmbargoSetter_||Example Value: |_plugin.single.org.dspace.embargo.EmbargoSetter = CLASSNAME_||Informational Note: |Implementation of embargo setter plugin ||Property: |_plugin.single.org.dspace.embargo.EmbargoLifter_||Example Value: |_plugin.single.org.dspace.embargo.EmbargoLifter = org.dspace.embargo.DefaultEm_||Informational Note: |Implementation of embargo lifter plugin |Remember that you need to replace _SCHEMA.ELEMENT.QUALIFIER_ with a real metadata field. Additionally, you need to replace the _CLASSNAME_ with a properly impleented plugin.