h1. DSpace System Documentation: Manakin \[XMLUI\] Configuration and CustomizationThe DSpace digital repository supports two user interfaces: one based on JavaServer Pages (JSP) technologies and one based upon the Apache Cocoon framework. This chapter describes those parameters which are specific to the Manakin (XMLUI) interface based upon the Cocoon framework.h2. Manakin Configuration Property KeysIn an effort to save the programmer/administrator some time, the configuration table below is taken from 5.3.43. _XMLUI Specific Configuration_.|Property: |_xmlui.supportedLocales_||Example Value: |_xmlui.supportedLocales = en, de_||Informational Note: |A list of supported locales for Manakin. Manakin will look at a user's browser configuration for the first language that appears in this list to make available to in the interface. This parameter is a comma separated list of Locales. All types of Locales country, country_language, country_language_variant. Note that if the appropriate files are not present (i.e. Messages_XX_XX.xml) then Manakin will fall back through to a more general language. || ||Property: |_xmlui.force.ssl_||Example Value: |_xmlui.force.ssl = true_||Informational Note: |Force all authenticated connections to use SSL, only non-authenticated connections are allowed over plain http. If set to true, then you need to ensure that the '_dspace.hostname_' parameter is set to the correctly.|| ||Property: |_xmlui.user.registration_||Example Value: |_xmlui.user.registration = true_||Informational Note: |Determine if new users should be allowed to register. This parameter is useful in conjunction with Shibboleth where you want to disallow registration because Shibboleth will automatically register the user. Default value is true. || ||Property: |_xmlui.user.editmetadata_||Example Value: |_xmlui.user.editmetadata = true_||Informational Note: |Determines if users should be able to edit their own metadata. This parameter is useful in conjunction with Shibboleth where you want to disable the user's ability to edit their metadata because it came from Shibboleth. Default value is true. || ||Property: |_xmlui.user.assumelogon_||Example Value: |_xmlui.user.assumelogon = true_||Informational Note: |Determine if super administrators (those whom are in the Administrators group) can login as another user from the "edit eperson" page. This is useful for debugging problems in a running dspace instance, especially in the workflow process. The default value is false, i.e., no one may assume the login of another user. || ||Property: |_xmlui.user.loginredirect_||Example Value: |_xmlui.user.loginredirect = /profile_||Informational Note: |After a user has logged into the system, which url should they be directed? Leave this parameter blank or undefined to direct users to the homepage, or _/profile_ for the user's profile, or another reasonable choice is _/submissions_ to see if the user has any tasks awaiting their attention. The default is the repository home page.|| ||Property: |_xmlui.theme.allowoverrides_||Example Value: |_xmlui.theme.allowoverrides = false_||Informational Note: |Allow the user to override which theme is used to display a particular page. When submitting a request add the HTTP parameter "themepath" which corresponds to a particular theme, that specified theme will be used instead of the any other configured theme. Note that this is a potential security hole allowing execution of unintended code on the server, this option is only for development and debugging it should be turned off for any production repository. The default value unless otherwise specified is "false". || ||Property: |_xmlui.bundle.upload_||Example Value: |_xmlui.bundle.upload = ORIGINAL, METADATA, THUMBNAIL, LICENSE, CC_LICENSE_||Informational Note: |Determine which bundles administrators and collection administrators may upload into an existing item through the administrative interface. If the user does not have the appropriate privileges (add and write) on the bundle then that bundle will not be shown to the user as an option. || ||Property: |_xmlui.community-list.render.full_||Example Value: |_xmlui.community-list.render.full = true_||Informational Note: |On the community-list page should all the metadata about a community/collection be available to the theme. This parameter defaults to true, but if you are experiencing performance problems on the community-list page you should experiment with turning this option off. || ||Property: |_xmlui.community-list.cache_||Example Value: |_xmlui.community-list.cache = 12 hours_||Informational Note: |Normally, Manakin will fully verify any cache pages before using a cache copy. This means that when the community-list page is viewed the database is queried for each community/collection to see if their metadata has been modified. This can be expensive for repositories with a large community tree. To help solve this problem you can set the cache to be assumed valued for a specific set of time. The downside of this is that new or editing communities/collections may not show up the website for a period of time. || ||Property: |_xmlui.bistream.mods_||Example Value: |_xmlui.bistream.mods = true_||Informational Note: |Optionally, you may configure Manakin to take advantage of metadata stored as a bitstream. The MODS metadata file must be inside the "METADATA" bundle and named MODS.xml. If this option is set to 'true' and the bitstream is present then it is made available to the theme for display. || ||Property: |_xmlui.bitstream.mets_||Example Value: |_xmlui.bitstream.mets = true_||Informational Note: |Optionally, you may configure Manakin to take advantage of metadata stored as a bitstream. The METS metadata file must be inside the "METADATA" bundle and named METS.xml. If this optino is set to "true" and the bitstream is present then it is made available to the theme for display. || ||Property: |_xmlui.google.analytics.key_||Example Value: |_xmlui.google.analytics.key = UA-XXXXXX-X_||Informational Note: |If you would like to use google analytics to track general website statistics then use the following parameter to provide your analytics key. First sign up for an account at [http://analytics.google.com|http://analytics.google.com|http://analytics.google.com], then create an entry for your repositories website. Google Analytics will give you a snipit of javascript code to place on your site, inside that snip it is your google analytics key usually found in the line: _uacct = "UA-XXXXXXX-X" Take this key (just the UA-XXXXXX-X part) and place it here in this parameter.|| ||Property: |_xmlui.controlpanel.activity.max_||Example Value: |_xmlui.controlpanel.activity.max = 250_||Informational Note: |Assign how many page views will be recorded and displayed in the control panel's activity viewer. The activity tab allows an administrator to debug problems in a running DSpace by understanding who and how their dspace is currently being used. The default value is 250. || ||Property: |_xmlui.controlpanel.activity.ipheader_||Example Value: |_xmlui.controlpanel.activity.ipheader = X-Forward-For_||Informational Note: |Determine where the control panel's activity viewer recieves an events IP address from. If your DSpace is in a load balanced enviornment or otherwise behind a context-switch then you will need to set the paramater to the HTTP parameter that records the original IP address. |h2. Configuring Themes and AspectsThe Manakin user interface is composed of two distinct components: _aspects_ and _themes_. Manakin aspects are like extensions or plugins for Manakin; they are interactive components that modify existing features or provide new features for the digital repository. Manakin themes stylize the look-and-feel of the repository, community, or collection.The repository administrator is able to define which aspects and themes are installed for the particular repository by editing the _\[dspace\]/config/xmlui.xconf_ configuration file. The _xmlui.xconf_ file consists of two major sections: Aspects and Themes.h3. AspectsThe _<aspects>_ section defines the "Aspect Chain", or the linear set of aspects that are installed in the repository. For each aspect that is installed in the repository, the aspect makes available new features to the interface. For example, if the "submission" aspect were to be commented out or removed from the _xmlui.xconf_, then users would not be able to submit new items into the repository (even the links and language prompting users to submit items are removed). Each _<aspect>_ element has two attributes, _name_ and _path_. The name is used to identify the Aspect, while the path determines the directory where the aspect's code is located. Here is the default aspect configuration:{code}
    <aspects>
        <aspect name="Artifact Browser" path="resource://aspects/ArtifactBrowser/" />
        <aspect name="Administration"	path="resource://aspects/Administrative/" />
        <aspect name="E-Person" path="resource://aspects/EPerson/"	/>
        <aspect name="Submission and Workflow" path="resource://aspects/Submission/" />
    </aspects>{code}A standard distribution of Manakin/DSpace includes four "core" aspects: * *Artifact Browser*The Artifact Browser Aspect is responsible for browsing communities, collections, items and bitstreams, viewing an individual item and searching the repository. * *E-Person*The E-Person Aspect is responsible for logging in, logging out, registering new users, dealing with forgotten passwords, editing profiles and changing passwords. * *Submission*The Submission Aspect is responsible for submitting new items to DSpace, determining the workflow process and ingesting the new items into the DSpace repository. * *Administrative*The Administrative Aspect is responsible for administrating DSpace, such as creating, modifying and removing all communities, collections, e-persons, groups, registries and authorizations. h3. ThemesThe _<themes>_ section defines a set of "rules" that determine where themes are installed in the repository. Each rule is processed in the order that it appears, and the first rule that matches determines the theme that is applied (so order is important). Each rule consists of a _<theme>_ element with several possible attributes:* *name* (_always required_)The name attribute is used to document the theme's name. * *path* (_always required_)The path attribute determines where the theme is located relative to the _themes/_ directory and must either contain a trailing slash or point directly to the theme's _sitemap.xmap_ file.* *regex* (_either regex and/or handle is required_)The regex attribute determines which URLs the theme should apply to. * *handle* (_either regex and/or handle is required_)The handle attribute determines which community, collection, or item the theme should apply to. If you use the "handle" attribute, the effect is cascading, meaning if a rule is established for a community then all collections and items within that community will also have this theme apply to them as well. Here is an example configuration:{code}
    <themes>
        <theme name="Theme 1" handle="123456789/23" path="theme1/"/>
        <theme name="Theme 2" regex="community-list"	path="theme2/"/>
        <theme name="Reference Theme" regex=".*" path="Reference/"/>
    </themes>{code}In the example above three themes are configured: "Theme 1", "Theme 2", and the "Reference Theme". The first rule specifies that "Theme 1" will apply to all communities, collections, or items that are contained under the parent community "123456789/23". The next rule specifies any URL containing the string "community-list" will get "Theme 2". The final rule, using the regular expression ".*", will match *anything*, so all pages which have not matched one of the preceding rules will be matched to the Reference Theme.h2. Multilingual SupportThe XMLUI user interface supports multiple languages through the use of internationalization catalogues as defined by the [Cocoon Internationalization Transformer|http://cocoon.apache.org/2.1/userdocs/i18nTransformer.html|Cocoon Internationalization Transformer]. Each catalog contains the translation of all user-displayed strings into a particular language or variant. Each catalog is a single xml file whose name is based upon the language it is designated for, thus:messages__language___country___variant_.xmlmessages__language___country_.xmlmessages__language_.xmlmessages.xmlThe interface will automatically determine which file to select based upon the user's browser and system configuration. For example, if the user's browser is set to Australian English then first the system will check if _messages_en_au.xml_ is available. If this translation is not available it will fall back to _messages_en.xml_, and finally if that is not available, _messages.xml_.Manakin supplies an English only translation of the interface. In order to add other translations to the system, locate the _\[dspace-source\]/dspace/modules/xmlui/src/main/webapp/i18n/_ directory. By default this directory will be empty; to add additional translations add alternative versions of the _messages.xml_ file in specific language and country variants as needed for your installation.To set a language other than English as the default language for the repository's interface, simply name the translation catalogue for the new default language "_messages.xml_"h2. Creating a New ThemeManakin themes stylize the look-and-feel of the repository, community, or collection and are distributed as self-contained packages. A Manakin/DSpace installation may have multiple themes installed and available to be used in different parts of the repository. The central component of a theme is the sitemap.xmap, which defines what resources are available to the theme such as XSL stylesheets, CSS stylesheets, images, or multimedia files.*1) Create theme skeleton*Most theme developers do not create a new theme from scratch; instead they start from the standard theme template, which defines a skeleton structure for a theme. The template is located at: _\[dspace-source\]/dspace-xmlui/dspace-xmlui-webbapp/src/main/webbapp/themes/template_. To start your new theme simply copy the theme template into your locally defined modules directory, _\[dspace-source\]/dspace/modules/xmlui/src/main/webbapp/themes/\[your theme's directory\]/_.*2) Modify theme variables*The next step is to modify the theme's parameters so that the theme knows where it is located. Open the _\[your theme's directory\]/sitemap.xmap_ and look for _<global-variables>_{code}
    <global-variables>
        <theme-path>[your theme's 	directory]</theme-path>
        <theme-name>[your theme's name]</theme-name>
    </global-variables>{code}Update both the theme's path to the directory name you created in step one. The theme's name is used only for documentation.*3) Add your CSS stylesheets*The base theme template will produce a repository interface without any style - just plain XHTML with no color or formatting. To make your theme useful you will need to supply a CSS Stylesheet that creates your desired look-and-feel. Add your new CSS stylesheets:_\[your theme's directory\]/lib/style.css_ (The base style sheet used for all browsers)_\[your theme's directory\]/lib/style-ie.css_ (Specific stylesheet used for internet explorer)*4) Install theme and rebuild DSpace*Next rebuild and deploy Dspace (replace <version> with the your current release):# Rebuild the DSpace installation package by running the following command from your _\[dspace-source\]/dspace/_ directory:{code}mvn package{code}# Update all DSpace webapps to _\[dspace\]/webapps_ by running the following command from your _\[dspace-source\]/dspace/target/dspace-\[version\]-build.dir_ directory:{code}ant -Dconfig=[dspace]/config/dspace.cfg update {code}# Deploy the the new webapps: {code}cp -R /[dspace]/webapps/* /[tomcat]/webapps{code}# Restart Tomcat This will ensure the theme has been installed as described in the previous section "Configuring Themes and Aspects".h2. Adding Static ContentThe XMLUI user interface supports the addition of globally static content (as well as static content within individual themes).Globally static content can be placed in the _\[dspace-source\]/dspace/modules/xmlui/src/main/webapp/static/_ directory. By default this directory only contains the default _robots.txt_ file, which provides helpful site information to web spiders/crawlers. However, you may also add static HTML (_*.html_) content to this directory, as needed for your installation.Any static HTML content you add to this directory may also reference static content (e.g. CSS, Javascript, Images, etc.) from the same _\[dspace-source\]/dspace/modules/xmlui/src/main/webapp/static/_ directory. You may reference other static content from your static HTML files similar to the following:{code}
  <link href="./static/mystyle.css" rel="stylesheet" type="text/css"/>
  <img src="./static/images/static-image.gif" alt="Static image in /static/images/ directory"/>
  <img src="./static/static-image.jpg" alt="Static image in /static/ directory"/> {code}