h1. DSpace System Documentation: Application LayerBack to architecture overviewh2. Web User InterfaceThe DSpace Web UI is the largest and most-used component in the application layer. Built on Java Servlet and JavaServer Page technology, it allows end-users to access DSpace over the Web via their Web browsers. As of Dspace 1.3.2 the UI meets both XHTML 1.0 standards and Web Accessibility Initiative (WAI) level-2 standard.It also features an administration section, consisting of pages intended for use by central administrators. Presently, this part of the Web UI is not particularly sophisticated; users of the administration section need to know what they are doing! Selected parts of this may also be used by collection administrators.h3. Web UI FilesThe Web UI-related files are located in a variety of directories in the DSpace source tree. Note that as of DSpace version 1.5, the deployment has changed. The build systems has moved to a maven-based system enabling the various projects (JSPUI, XMLUI, etc.) into separate projects. The system still uses the familar 'Ant' to deploy the webapps in later stages.|*Location*|*Description*||_\[dspace-source\]/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/webui_|Web UI source files ||_\[dspace-source\]/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/filters_|Servlet Filters (Servlet 2.3 spec) ||_\[dspace-source\]/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/jsptag_|Custom JSP tag class files ||_\[dspace-source\]/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/servlet_|Servlets for main Web UI (controllers) ||_\[dspace-source\]/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/servlet/admin_|Servlets that comprise the administration part of the Web UI ||_\[dspace-source\]/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/webui/util/_|Miscellaneous classes used by the servlets and filters ||_\[dspace-source\]/dspace-jspui_|The JSP files ||_\[dspace-source\]/dspace/modules/jspui/src/main/webapp_|This is where you place customized versions of JSPs—see 6. JSPUI Configuration and Customization||_\[dspace-source\]/dspace/modules/xmlui/src/main/webapp_|This is where you place customizations for the Manakin interface—see 7. Manakin \[XMLUI\] Configuration and Customization||_\[dspace-source/dspace/modules/jspui/src/main/resources_|This is where you can place you customize version of the _Messages.properties_ file.||_\[dspace-source\]/dspace-jspui/dspace-jspui-webapp/src/main/webapp/WEB-INF/dspace-tags.tld_|Custom DSpace JSP tag descriptor |. . h3. The Build ProcessThe DSpace build process constructs a Web application archive, which is placed in _\[dspace-source\]/build/dspace.war_. The _build_wars_ Ant target does the work. The process works as follows:*  All the DSpace source code is compiled. * _\[dspace-source\]/etc/dspace-web.xml_ is copied to _\[dspace-source\]/build_ and the _@@dspace.dir@@_ token inside it replaced with the DSpace installation directory (_dspace.dir_ property from _dspace.cfg_*  The JSPs are all copied to _\[dspace-source\]/build/jsp_*  Customized JSPs from _\[dspace-source\]/jsp/local_ are copied on top of these, thus 'overriding' the default versions* _\[dspace-source\]/build/dspace.war_ is builtThe contents of _dspace.war_ are:*  (Top level) -- the JSPs (customized versions from _\[dspace-source\]/jsp/local_ will have overwritten the defaults from the DSpace source distribution)* _WEB-INF/classes_ -- the compiled DSpace classes* _WEB-INF/lib_ -- the third party library JAR files from _\[dspace-source\]/lib_, minus _servlet.jar_ which will be available as part of Tomcat (or other servlet engine)* _WEB-INF/web.xml_ -- web deployment descriptor, copied from _\[dspace-source\]/build/dspace-web.xml_* _WEB-INF/dspace-tags.tld_ -- tag descriptorNote that this does mean there are multiple copies of the compiled DSpace code and third-party libraries in the system, so care must be taken to ensure that they are all in sync. (The storage overhead is a few megabytes, totally insignificant these days.) In general, when you change any DSpace code or JSP, it's best to do a complete update of both the installation (_\[dspace\]_), and to rebuild and redeploy the Web UI and OAI _.war_ files, by running this in _\[dspace-source\]_:{code}
ant -D [dspace]/config/dspace.cfg update
{code}and then following the instructions that command writes to the console.h3. Servlets and JSPsThe Web UI is loosely based around the MVC (model, view, controller) model. The content management API corresponds to the model, the Java Servlets are the controllers, and the JSPs are the views. Interactions take the following basic form:#  An HTTP request is received from a browser #  The appropriate servlet is invoked, and processes the request by invoking the DSpace business logic layer public API #  Depending on the outcome of the processing, the servlet invokes the appropriate JSP #  The JSP is processed and sent to the browser The reasons for this approach are:*  All of the processing is done before the JSP is invoked, so any error or problem that occurs does not occur halfway through HTML rendering *  The JSPs contain as little code as possible, so they can be customized without having to delve into Java code too much The _org.dspace.app.webui.servlet.LoadDSpaceConfig_ servlet is always loaded first. This is a very simple servlet that checks the _dspace-config_ context parameter from the DSpace deployment descriptor, and uses it to locate _dspace.cfg_. It also loads up the Log4j configuration. It's important that this servlet is loaded first, since if another servlet is loaded up, it will cause the system to try and load DSpace and Log4j configurations, neither of which would be found.All DSpace servlets are subclasses of the _DSpaceServlet_ class. The _DSpaceServlet_ class handles some basic operations such as creating a DSpace _Context_ object (opening a database connection etc.), authentication and error handling. Instead of overriding the _doGet_ and _doPost_ methods as one normally would for a servlet, DSpace servlets implement _doDSGet_ or _doDSPost_ which have an extra context parameter, and allow the servlet to throw various exceptions that can be handled in a standard way.The DSpace servlet processes the contents of the HTTP request. This might involve retrieving the results of a search with a query term, accessing the current user's eperson record, or updating a submission in progress. According to the results of this processing, the servlet must decide which JSP should be displayed. The servlet then fills out the appropriate attributes in the _HttpRequest_ object that represents the HTTP request being processed. This is done by invoking the _setAttribute_ method of the _javax.servlet.http.HttpServletRequest_ object that is passed into the servlet from Tomcat. The servlet then forwards control of the request to the appropriate JSP using the _JSPManager.showJSP_ method.The _JSPManager.showJSP_ method uses the standard Java servlet forwarding mechanism is then used to forward the HTTP request to the JSP. The JSP is processed by Tomcat and the results sent back to the user's browser.There is an exception to this servlet/JSP style: _index.jsp_, the 'home page', receives the HTTP request directly from Tomcat without a servlet being invoked first. This is because in the servlet 2.3 specification, there is no way to map a servlet to handle only requests made to '_/_'; such a mapping results in every request being directed to that servlet. By default, Tomcat forwards requests to '_/_' to _index.jsp_. To try and make things as clean as possible, _index.jsp_ contains some simple code that would normally go in a servlet, and then forwards to _home.jsp_ using the _JSPManager.showJSP_ method. This means localized versions of the 'home page' can be created by placing a customized _home.jsp_ in _\[dspace-source\]/jsp/local_, in the same manner as other JSPs._\[dspace-source\]/jsp/dspace-admin/index.jsp_, the administration UI index page, is invoked directly by Tomcat and not through a servlet for similar reasons.At the top of each JSP file, right after the license and copyright header, is documented the appropriate attributes that a servlet must fill out prior to forwarding to that JSP. No validation is performed; if the servlet does not fill out the necessary attributes, it is likely that an internal server error will occur.Many JSPs containing forms will include hidden parameters that tell the servlets which form has been filled out. The submission UI servlet (_SubmissionController_ is a prime example of a servlet that deals with the input from many different JSPs. The _step_ and _page_ hidden parameters (written out by the _SubmissionController.getSubmissionParameters()_ method) are used to inform the servlet which page of which step has just been filled out (i.e. which page of the submission the user has just completed).Below is a detailed, scary diagram depicting the flow of control during the whole process of processing and responding to an HTTP request. More information about the authentication mechanism is mostly described in the configuration section.!web-ui-flow.gif!Flow of Control During HTTP Request Processingh3. Custom JSP TagsThe DSpace JSPs all use some custom tags defined in _/dspace/jsp/WEB-INF/dspace-tags.tld_, and the corresponding Java classes reside in _org.dspace.app.webui.jsptag_. The tags are listed below. The _dspace-tags.tld_ file contains detailed comments about how to use the tags, so that information is not repeated here.* *_layout_*: Just about every JSP uses this tag. It produces the standard HTML header and _<BODY>_tag. Thus the content of each JSP is nested inside a _<dspace:layout>_ tag. The (XML-style)attributes of this tag are slightly complicated--see _dspace-tags.tld_. The JSPs in the source code bundle also provide plenty of examples.* *_sidebar_*: Can only be used inside a _layout_ tag, and can only be used once per JSP. The content between the start and end _sidebar_ tags is rendered in a column on the right-hand side of the HTML page. The contents can contain further JSP tags and Java 'scriptlets'.* *_date_*: Displays the date represented by an _org.dspace.content.DCDate_ object. Just the one representation of date is rendered currently, but this could use the user's browser preferences to display a localized date in the future.* *_include_*: Obsolete, simple tag, similar to _jsp:include_. In versions prior to DSpace 1.2, this tag would use the locally modified version of a JSP if one was installed in jsp/local. As of 1.2, the build process now performs this function, however this tag is left in for backwards compatibility.* *_item_*: Displays an item record, including Dublin Core metadata and links to the bitstreams within it. Note that the displaying of the bitstream links is simplistic, and does not take into account any of the bundling structure. This is because DSpace does not have a fully-fledged dissemination architectural piece yet. Displaying an item record is done by a tag rather than a JSP for two reasons: Firstly, it happens in several places (when verifying an item record during submission or workflow review, as well as during standard item accesses), and secondly, displaying the item turns out to be mostly code-work rather than HTML anyway. Of course, the disadvantage of doing it this way is that it is slightly harder to customize exactly what is displayed from an item record; it is necessary to edit the tag code (_org.dspace.app.webui.jsptag.ItemTag_). Hopefully a better solution can be found in the future.* *_itemlist_, _collectionlist_, _communitylist_*: These tags display ordered sequences of items, collections and communities, showing minimal information but including a link to the page containing full details. These need to be used in HTML tables. * *_popup_*: This tag is used to render a link to a pop-up page (typically a help page.) If Javascript is available, the link will either open or pop to the front any existing DSpace pop-up window. If Javascript is not available, a standard HTML link is displayed that renders the link destination in a window named '_dspace.popup_'. In graphical browsers, this usually opens a new window or re-uses an existing window of that name, but if a window is re-used it is not 'raised' which might confuse the user. In text browsers, following this link will simply replace the current page with the destination of the link. This obviously means that Javascript offers the best functionality, but other browsers are still supported.* *_selecteperson_*: A tag which produces a widget analogous to HTML _<SELECT>_, that allows a user to select one or multiple e-people from a pop-up list.* *_sfxlink_*: Using an item's Dublin Core metadata DSpace can display an SFX link, if an SFX server is available. This tag does so for a particular item if the _sfx.server.url_ property is defined in _dspace.cfg_.h3. InternationalizationThe [Java Standard Tag Library v1.0|http://jakarta.apache.org/taglibs/doc/standard-1.0-doc/intro.html|Java Standard Tag Library v1.0] is used to specify messages in the JSPs like this:OLD:{code}<H1>Search Results</H1>{code}NEW:{code}<H1><fmt:message key="jsp.search.results.title"/></H1>{code}This message can now be changed using the _config/language-packs/Messages.properties_ file. (This must be done at build-time: _Messages.properties_ is placed in the _dspace.war_ Web application file.){code}jsp.search.results.title = Search Results{code}Phrases may have parameters to be passed in, to make the job of translating easier, reduce the number of 'keys' and to allow translators to make the translated text flow more appropriately for the target language.OLD:{code}<P>Results <%= r.getFirst() %> to <%= r.getLast() %> of <%=r.getTotal() %></P>{code}NEW:{code}<fmt:message key="jsp.search.results.text">
  <fmt:param><%= r.getFirst() %></fmt:param>
  <fmt:param><%= r.getLast() %></fmt:param>
  <fmt:param><%= r.getTotal() %></fmt:param>
</fmt:message>{code}(Note: JSTL 1.0 does not seem to allow JSP <%= %> expressions to be passed in as values of attribute in <fmt:param value=""/>)The above would appear in the _Messages_xx.properties_ file as:{code}jsp.search.results.text = Results {0}-{1} of {2} {code}Introducing number parameters that should be formatted according to the locale used makes no difference in the message key compared to atring parameters:{code}jsp.submit.show-uploaded-file.size-in-bytes = {0} bytes{code}In the JSP using this key can be used in the way belov:{code}<fmt:message key="jsp.submit.show-uploaded-file.size-in-bytes">
  <fmt:param><fmt:formatNumber><%= bitstream.getSize()%></fmt:formatNumber></fmt:param>
</fmt:message>
{code}(Note: JSTL offers a way to include numbers in the message keys as _jsp.foo.key = \{0,number\} bytes_. Setting the parameter as _<fmt:param value="$\{variable\}" />_ workes when _variable_ is a single variable name and doesn't work when trying to use a method's return value instead: _bitstream.getSize()_. Passing the number as string (or using the <%= %> expression) also does not work.)Multiple _Messages.properties_ can be created for different languages. See [ResourceBundle.getBundle|http://java.sun.com/j2se/1.4.2/docs/api/java/util/ResourceBundle.html#getBundle(java.lang.String,%20java.util.Locale,%20java.lang.ClassLoader)|ResourceBundle.getBundle]. e.g. you can add German and Canadian French translations:{code}Messages_de.properties
Messages_fr_CA.properties{code}The end user's browser settings determine which language is used. The English language file _Messages.properties_ (or the default server locale) will be used as a default if there's no language bundle for the end user's preferred language. (Note that the English file is not called _Messages_en.properties_ -- this is so it is always available as a default, regardless of server configuration.)The _dspace:layout_ tag has been updated to allow dictionary keys to be passed in for the titles. It now has two new parameters: _titlekey_ and _parenttitlekey_. So where before you'd do:{code}<dspace:layout title="Here"
               parentlink="/mydspace"
               parenttitle="My DSpace">
{code}You now do:{code}<dspace:layout titlekey="jsp.page.title"
               parentlink="/mydspace"
               parenttitlekey="jsp.mydspace">

{code}And so the layout tag itself gets the relevant stuff out of the dictionary. _title_ and _parenttitle_ still work as before for backwards compatibility, and the odd spot where that's preferable.h4. Message Key ConventionWhen translating further pages, please follow the convention for naming message keys to avoid clashes.*For text in JSPs* use the complete path + filename of the JSP, then a one-word name for the message. e.g. for the title of _jsp/mydspace/main.jsp_ use:{code}jsp.mydspace.main.title{code}Some common words (e.g. "Help") can be brought out into keys starting _jsp._ for ease of translation, e.g.:{code}jsp.admin = Administer{code}Other common words/phrases are brought out into 'general' parameters if they relate to a set (directory) of JSPs, e.g.{code}jsp.tools.general.delete = Delete{code}Phrases that relate *strongly* to a topic (eg. MyDSpace) but used in many JSPs outside the particular directory are more convenient to be cross-referenced. For example one could use the key below in _jsp/submit/saved.jsp_ to provide a link back to the user's _MyDSpace_:_(Cross-referencing of keys *in general* is not a good idea as it may make maintenance more difficult. But in some cases it has more advantages as the meaning is obvious.)_{code}jsp.mydspace.general.goto-mydspace = Go to My DSpace{code}*For text in servlet code*, in custom JSP tags or wherever applicable use the fully qualified classname + a one-word name for the message. e.g.{code}org.dspace.app.webui.jsptag.ItemListTag.title = Title{code}h4. Which Languages are currently supported?To view translations currently being developed, please refer to the [i18n page|http://wiki.dspace.org/I18nSupport|i18n page] of the DSpace Wiki.h3. HTML Content in ItemsFor the most part, the DSpace item display just gives a link that allows an end-user to download a bitstream. However, if a bundle has a primary bitstream whose format is of MIME type _text/html_, instead a link to the HTML servlet is given.So if we had an HTML document like this:{code}contents.html
chapter1.html
chapter2.html
chapter3.html
figure1.gif
figure2.jpg
figure3.gif
figure4.jpg
figure5.gif
figure6.gif{code}The Bundle's primary bitstream field would point to the contents.html Bitstream, which we know is HTML (check the format MIME type) and so we know which to serve up first.The HTML servlet employs a trick to serve up HTML documents without actually modifying the HTML or other files themselves. Say someone is looking at _contents.html_ from the above example, the URL in their browser will look like this:{code}https://dspace.mit.edu/html/1721.1/12345/contents.html{code}If there's an image called _figure1.gif_ in that HTML page, the browser will do HTTP GET on this URL:{code}https://dspace.mit.edu/html/1721.1/12345/figure1.gif{code}The HTML document servlet can work out which item the user is looking at, and then which Bitstream in it is called _figure1.gif_, and serve up that bitstream. Similar for following links to other HTML pages. Of course all the links and image references have to be relative and not absolute.HTML documents must be "self-contained", as explained here. Provided that full path information is known by DSpace, any depth or complexity of HTML document can be served subject to those contraints. This is usually possible with some kind of batch import. If, however, the document has been uploaded one file at a time using the Web UI, the path information has been stripped. The system can cope with relative links that refer to a deeper path, e.g.{code}<IMG SRC="images/figure1.gif">{code}If the item has been uploaded via the Web submit UI, in the Bitstream table in the database we have the 'name' field, which will contain the filename with no path (_figure1.gif_). We can still work out what _images/figure1.gif_ is by making the HTML document servlet strip any path that comes in from the URL, e.g.{code}https://dspace.mit.edu/html/1721.1/12345/images/figure1.gif
                                         ^^^^^^^
                                        Strip this{code}BUT all the filenames (regardless of directory names) must be unique. For example, this wouldn't work:{code}contents.html
chapter1.html
chapter2.html
chapter1_images/figure.gif
chapter2_images/figure.gif{code}since the HTML document servlet wouldn't know which bitstream to serve up for:{code}https://dspace.mit.edu/html/1721.1/12345/chapter1_images/figure.gif
https://dspace.mit.edu/html/1721.1/12345/chapter2_images/figure.gif{code}since it would just have _figure.gif_To prevent "infinite URL spaces" appearing (e.g. if a file _foo.html_ linked to _bar/foo.html_, which would link to _bar/bar/foo.html_...) this behavior can be configured by setting the configuration property _webui.html.max-depth-guess_.For example, if we receive a request for _foo/bar/index.html_, and we have a bitstream called just _index.html_, we will serve up that bitstream for the request if _webui.html.max-depth-guess_ is 2 or greater. If _webui.html.max-depth-guess_ is 1 or less, we would not serve that bitstream, as the depth of the file is greater. If _webui.html.max-depth-guess_ is zero, the request filename and path must always exactly match the bitstream name. The default value (if that property is not present in _dspace.cfg_) is 3.h3. Thesis BlockingThe submission UI has an optional feature that came about as a result of MIT Libraries policy. If the _block.theses_ parameter in _dspace.cfg_ is _true_, an extra checkbox is included in the first page of the submission UI. This asks the user if the submission is a thesis. If the user checks this box, the submission is halted (deleted) and an error message displayed, explaining that DSpace should not be used to submit theses. This feature can be turned off and on, and the message displayed (_/dspace/jsp/submit/no-theses.jsp_ can be localized as necessary.h2. OAI-PMH Data ProviderThe DSpace platform supports the [Open Archives Initiative Protocol for Metadata Harvesting|http://www.openarchives.org/|Open Archives Initiative Protocol for Metadata Harvesting] (OAI-PMH) version 2.0 as a data provider. This is accomplished using the [OAICat framework from OCLC|http://www.oclc.org/research/software/oai/cat.shtm|OAICat framework from OCLC].The DSpace build process builds a Web application archive, _\[dspace-source\]/build/oai.war_), in much the same way as the Web UI build process described above. The only differences are that the JSPs are not included, and _\[dspace-source\]/etc/oai-web.xml_ is used as the deployment descriptor. This 'webapp' is deployed to receive and respond to OAI-PMH requests via HTTP. Note that typically it should _not_ be deployed on SSL (_https:_ protocol). In a typical configuration, this is deployed at _oai_, for example:{code}
http://dspace.myu.edu/oai/request?verb=Identify
{code}The 'base URL' of this DSpace deployment would be:{code}
http://dspace.myu.edu/oai/request
{code}It is this URL that should be registered with [www.openarchives.org|http://www.openarchives.org/|www.openarchives.org]. Note that you can easily change the '_request_' portion of the URL by editing _\[dspace-source\]/etc/oai-web.xml_ and rebuilding and deploying _oai.war_.DSpace provides implementations of the OAICat interfaces _AbstractCatalog_, _RecordFactory_ and _Crosswalk_ that interface with the DSpace content management API and harvesting API (in the search subsystem).Only the basic _oai_dc_ unqualified Dublin Core metadata set export is enabled by default; this is particularly easy since all items have qualified Dublin Core metadata. When this metadata is harvested, the qualifiers are simply stripped; for example, _description.abstract_ is exposed as unqualified _description_. The _description.provenance_ field is hidden, as this contains private information about the submitter and workflow reviewers of the item, including their e-mail addresses. Additionally, to keep in line with OAI community practices, values of _contributor.author_ are exposed as _creator_ values.Other metadata formats are supported as well, using other _Crosswalk_ implementations; consult the _oaicat.properties_ file described below. To enable a format, simply uncomment the lines beginning with _Crosswalks.*_. Multiple formats are allowed, and the current list includes, in addition to unqualified DC: MPEG DIDL, METS, MODS. There is also an incomplete, experimental qualified DC.Note that the current simple DC implementation (_org.dspace.app.oai.OAIDCCrosswalk_) does not currently strip out any invalid XML characters that may be lying around in the data. If your database contains a DC value with, for example, some ASCII control codes (form feed etc.) this may cause OAI harvesters problems. This should rarely occur, however. XML entities (such as _>_) are encoded (e.g. to _&gt;_)In addition to the implementations of the OAICat interfaces, there are two configuration files relevant to OAI support:* *_oaicat.properties_*:  This resides as a template in _\[dspace\]/config/templates_, and the live version is written to _\[dspace\]/config_. You probably won't need to edit this; the _install-configs_ script fills out the relevant deployment-specific parameters. You might want to change the _earliestDatestamp_ field to accurately reflect the oldest datestamp in the system. (Note that this is the value of the _last_modified_ column in the _Item_ database table.)* *_oai-web.xml_*:  This standard Java Servlet 'deployment descriptor' is stored in the source as _\[dspace-source\]/etc/oai-web.xml_, and is written to _/dspace/oai/WEB-INF/web.xml_.h3. SetsOAI-PMH allows repositories to expose an hierarchy of sets in which records may be placed. A record can be in zero or more sets.DSpace exposes collections as sets. The organization of communities is likely to change over time, and is therefore a less stable basis for selective harvesting.Each collection has a corresponding OAI set, discoverable by harvesters via the ListSets verb. The setSpec is the Handle of the collection, with the ':' and '/' converted to underscores so that the Handle is a legal setSpec, for example:{code}
hdl_1721.1_1234
{code}Naturally enough, the collection name is also the name of the corresponding set.h3. Unique IdentifierEvery item in OAI-PMH data repository must have an unique identifier, which must conform to the URI syntax. As of DSpace 1.2, Handles are not used; this is because in OAI-PMH, the OAI identifier identifies the _metadata record_ associated with the _resource_. The _resource_ is the DSpace item, whose _resource identifier_ is the Handle. In practical terms, using the Handle for the OAI identifier may cause problems in the future if DSpace instances share items with the same Handles; the OAI metadata record identifiers should be different as the different DSpace instances would need to be harvested separately and may have different metadata for the item.The OAI identifiers that DSpace uses are of the form:_oai:host name:handle_For example:_oai:dspace.myu.edu:123456789/345_If you wish to use a different scheme, this can easily be changed by editing the value of _OAI_ID_PREFIX_ at the top of the _org.dspace.app.oai.DSpaceOAICatalog_ class. (You do not need to change the code if the above scheme works for you; the code picks up the host name and Handles automatically from the DSpace configuration.)h3. Access controlOAI provides no authentication/authorisation details, although these could be implemented using standard HTTP methods. It is assumed that all access will be anonymous for the time being.A question is, "is all metadata public?" Presently the answer to this is yes; all metadata is exposed via OAI-PMH, even if the item has restricted access policies. The reasoning behind this is that people who do actually have permission to read a restricted item should still be able to use OAI-based services to discover the content.If in the future, this 'expose all metadata' approach proves unsatisfactory for any reason, it should be possible to expose only publicly readable metadata. The authorisation system has separate permissions for READing and item and READing the content (bitstreams) within it. This means the system can differentiate between an item with public metadata and hidden content, and an item with hidden metadata as well as hidden content. In this case the OAI data repository should only expose items those with anonymous READ access, so it can hide the existence of records to the outside world completely. In this scenario, one should be wary of protected items that are made public after a time. When this happens, the items are "new" from the OAI-PMH perspective.h3. Modification Date (OAI Date Stamp)OAI-PMH harvesters need to know when a record has been created, changed or deleted. DSpace keeps track of a 'last modified' date for each item in the system, and this date is used for the OAI-PMH date stamp. This means that any changes to the metadata (e.g. admins correcting a field, or a withdrawal) will be exposed to harvesters.h3. 'About' InformationAs part of each record given out to a harvester, there is an optional, repeatable "about" section which can be filled out in any (XML-schema conformant) way. Common uses are for provenance and rights information, and there are schemas in use by OAI communities for this. Presently DSpace does not provide any of this information.h3. DeletionsDSpace keeps track of deletions (withdrawals). These are exposed via OAI, which has a specific mechansim for dealing with this. Since DSpace keeps a permanent record of withdrawn items, in the OAI-PMH sense DSpace supports deletions 'persistently'. This is as opposed to 'transient' deletion support, which would mean that deleted records are forgotten after a time.Once an item has been withdrawn, OAI-PMH harvests of the date range in which the withdrawal occurred will find the 'deleted' record header. Harvests of a date range prior to the withdrawal will _not_ find the record, despite the fact that the record did exist at that time.As an example of this, consider an item that was created on 2002-05-02 and withdrawn on 2002-10-06. A request to harvest the month 2002-10 will yield the 'record deleted' header. However, a harvest of the month 2002-05 will not yield the original record.Note that presently, the deletion of 'expunged' items is not exposed through OAI.h3. Flow Control (Resumption Tokens)An OAI data provider can prevent any performance impact caused by harvesting by forcing a harvester to receive data in time-separated chunks. If the data provider receives a request for a lot of data, it can send part of the data with a resumption token. The harvester can then return later with the resumption token and continue.DSpace supports resumption tokens for 'ListRecords' OAI-PMH requests. ListIdentifiers and ListSets requests do not produce a particularly high load on the system, so resumption tokens are not used for those requests.Each OAI-PMH ListRecords request will return at most 100 records. This limit is set at the top of _org.dspace.app.oai.DSpaceOAICatalog.java_ (_MAX_RECORDS_). A potential issue here is that if a harvest yields an exact multiple of _MAX_RECORDS_, the last operation will result in a harvest with no records in it. It is unclear from the OAI-PMH specification if this is acceptable.When a resumption token is issued, the optional _completeListSize_ and _cursor_ attributes are not included. OAICat sets the _expirationDate_ of the resumption token to one hour after it was issued, though in fact since DSpace resumption tokens contain all the information required to continue a request they do not actually expire.Resumption tokens contain all the state information required to continue a request. The format is:{code}
from/until/setSpec/offset
{code}_from_ and _until_ are the ISO 8601 dates passed in as part of the original request, and _setSpec_ is also taken from the original request. _offset_ is the number of records that have already been sent to the harvester. For example:{code}
2003-01-01//hdl_1721_1_1234/300
{code}This means the harvest is 'from'
                _2003-01-01_, has no 'until' date, is for collection hdl:1721.1/1234, and 300 records have already been sent to the harvester. (Actually, if the original OAI-PMH request doesn't specify a 'from' or 'until, OAICat fills them out automatically to '0000-00-00T00:00:00Z' and '9999-12-31T23:59:59Z' respectively. This means DSpace resumption tokens will always have from and until dates in them.)h2. DSpace Command LauncherIntroduced in Release 1.6, the DSpace Command Launcher brings together the various command and scripts into a standard-practice for running CLI runtime programs.h3. Older VersionsPrior to Release 1.6, there were various scripts written that masked a more manual approach to running CLI programs.  The user had to issue _\[dspace\]/bin/dsrun_ and then java class that ran that program.  With release 1.5, scripts were written to mask the _\[dspace\]/bin/dsrun_ command.  We have left the java class in the System Administration section since it does have value for debugging purposes and for those who wish to learn about DSpace
		programming or wish to customize the code at any time.h3. Command Launcher StructureThere are two components to the command launcher:  the dspace script and the launcher.xml.  The DSpace command calls a java class which in turn refers to _launcher.xml_ that is stored in the _\[dspace\]/config_ directory_launcher.xml_ is made of several components:* _<command>_ begins the stanza for a comand* _<name>___name of command___</name>_  the name of the command that you would use.* _<description>___the description of the command___</description>_* _<step>  </step>_ User arguments are parsed and tested.* _<class>___<the java class that is being used to run the CLI program>___</class>_Prior to release 1.5 if one wanted to regenerate the browse index, one would have to issue the following commands manually:{code}[dspace]/bin/dsrun org.dspace.browse.IndexBrowse -f -r
[dspace]/bin/dsrun org.dspace.browse.ItemCounter
[dspace]/bin/dsrun org.dspace.search.DSIndexer{code}In release 1.5 a script was written and in release 1.6 the command _\[dspace\]/bin/dspace index-init_ replaces the script.  The stanza from _launcher.xml_ show us how one can build more commands if needed:{code}<command>
        <name>index-update</name>
        <description>Update the search and browse indexes</description>
        <step passuserargs="false">
            <class>org.dspace.browse.IndexBrowse</class>
            <argument>-i</argument>
        </step>
        <step passuserargs="false">
            <class>org.dspace.browse.ItemCounter</class>
        </step>
        <step passuserargs="false">
            <class>org.dspace.search.DSIndexer</class>
        </step>
</command>{code}.