# UMD-provided file running DSpace as part of a "Quick Build" setup
# This file is based on "Dockerfile.dev"

# This Dockerfile uses JDK17 by default.
# To build with other versions, use "--build-arg JDK_VERSION=[value]"
ARG JDK_VERSION=17
# The Docker version tag to build from
ARG DSPACE_VERSION=dspace-8_x
# The Docker registry to use for DSpace images. Defaults to "docker.io"
# NOTE: non-DSpace images are hardcoded to use "docker.io" and are not impacted by this build argument
ARG DOCKER_REGISTRY=docker.io

# Step 1 - Run Maven Build
# UMD Customization
FROM docker.lib.umd.edu/drum:${DSPACE_VERSION} as build
# End UMD Customization
ARG TARGET_DIR=dspace-installer
WORKDIR /app
# The dspace-installer directory will be written to /install
RUN mkdir /install \
    && chown -Rv dspace: /install \
    && chown -Rv dspace: /app
USER dspace

# UMD Customization
# Copy the DSpace source code from the /dspace/modules/[additions]|[server]
# directories from the local machine) into the workdir
# (excluding .dockerignore contents)
RUN rm -rf /app/dspace/modules/additions /app/dspace/modules/server
ADD --chown=dspace dspace/modules/additions /app/dspace/modules/additions
ADD --chown=dspace dspace/modules/server /app/dspace/modules/server
# End UMD Customization

# Copy the dspace-installer directory to /install.  Clean up the build to keep the docker image small
# Maven flags here ensure that we skip building test environment and skip all code verification checks.
# These flags speed up this compilation as much as reasonably possible.
ENV MAVEN_FLAGS="-P-test-environment -Denforcer.skip=true -Dcheckstyle.skip=true -Dlicense.skip=true -Dxml.skip=true"
# UMD Customization
RUN mvn package -rf org.dspace:modules -pl '!org.dspace:dspace-iiif,!org.dspace:dspace-oai,!org.dspace:dspace-rdf,!org.dspace:dspace-sword,!org.dspace:dspace-swordv2' ${MAVEN_FLAGS} && \
# End UMD Customization
  mv /app/dspace/target/${TARGET_DIR}/* /install && \
  mvn clean
# Remove the server webapp to keep image small.
RUN rm -rf /install/webapps/server/

# Step 2 - Run Ant Deploy
# UMD Customization
FROM docker.lib.umd.edu/drum-ant:latest as ant_build
# End UMD Customization
ARG TARGET_DIR=dspace-installer
# COPY the /install directory from 'build' container to /dspace-src in this container
COPY --from=build /install /dspace-src
WORKDIR /dspace-src

# UMD Customization
# Ant is installed as part of the "drum-ant" Docker image
# End UMD Customization

# Run necessary 'ant' deploy scripts
RUN ant init_installation update_configs update_code update_webapps

# Step 3 - Start up DSpace via Runnable JAR
FROM docker.io/eclipse-temurin:${JDK_VERSION}
# NOTE: DSPACE_INSTALL must align with the "dspace.dir" default configuration.
ENV DSPACE_INSTALL=/dspace
# Copy the /dspace directory from 'ant_build' container to /dspace in this container
COPY --from=ant_build /dspace $DSPACE_INSTALL
WORKDIR $DSPACE_INSTALL
# Need host command for "[dspace]/bin/make-handle-config"
RUN apt-get update \
    && apt-get install -y --no-install-recommends host \
    && apt-get purge -y --auto-remove \
    && rm -rf /var/lib/apt/lists/*
# Expose Tomcat port (8080) & Handle Server HTTP port (8000)
EXPOSE 8080 8000
# Give java extra memory (2GB)
ENV JAVA_OPTS=-Xmx2000m
# Add csh and Perl libraries for scripts in /dspace/bin
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        csh \
        libgetopt-complete-perl \
        libconfig-properties-perl

# Create the directories needed for Proquest ETD loading
RUN mkdir -p $DSPACE_INSTALL/proquest/incoming $DSPACE_INSTALL/proquest/processed \
             $DSPACE_INSTALL/proquest/csv $DSPACE_INSTALL/proquest/marc

# On startup, run DSpace Runnable JAR
ENTRYPOINT ["java", "-jar", "webapps/server-boot.jar", "--dspace.dir=$DSPACE_INSTALL"]
