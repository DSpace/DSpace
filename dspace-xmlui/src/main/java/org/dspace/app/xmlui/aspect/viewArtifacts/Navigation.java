/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * http://www.dspace.org/license/
 */
package org.dspace.app.xmlui.aspect.viewArtifacts;

import org.apache.cocoon.caching.CacheableProcessingComponent;
import org.apache.cocoon.environment.ObjectModelHelper;
import org.apache.cocoon.environment.Request;
import org.apache.cocoon.util.HashUtil;
import org.apache.excalibur.source.SourceValidity;
import org.apache.excalibur.source.impl.validity.NOPValidity;
import org.dspace.app.util.Util;
import org.dspace.app.xmlui.cocoon.AbstractDSpaceTransformer;
import org.dspace.app.xmlui.utils.HandleUtil;
import org.dspace.app.xmlui.utils.UIException;
import org.dspace.app.xmlui.wing.WingException;
import org.dspace.app.xmlui.wing.element.Options;
import org.dspace.app.xmlui.wing.element.PageMeta;
import org.dspace.authorize.AuthorizeException;
import org.dspace.content.Collection;
import org.dspace.content.Community;
import org.dspace.content.DSpaceObject;
import org.dspace.content.Item;
import org.dspace.services.ConfigurationService;
import org.dspace.services.factory.DSpaceServicesFactory;
import org.dspace.core.I18nUtil;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.io.Serializable;
import java.util.Locale;
import java.sql.SQLException;

/**
 * This transform applies the basic navigational links that should be available
 * on all pages generated by DSpace.
 *
 * @author Scott Phillips
 * @author Kevin Van de Velde (kevin at atmire dot com)
 * @author Mark Diggory (markd at atmire dot com)
 * @author Ben Bosman (ben at atmire dot com)
 */
public class Navigation extends AbstractDSpaceTransformer implements CacheableProcessingComponent {

    /**
     * Generate the unique caching key.
     * This key must be unique inside the space of this component.
     */
    public Serializable getKey() {
        try {
            Request request = ObjectModelHelper.getRequest(objectModel);
            String key = request.getScheme() + request.getServerName() + request.getServerPort() + request.getSitemapURI() + request.getQueryString();

            DSpaceObject dso = HandleUtil.obtainHandle(objectModel);
            if (dso != null)
            {
                key += "-" + dso.getHandle();
            }

            if (context.getCurrentLocale() != null) {
                key += "-" + context.getCurrentLocale().toString();
            }

            return HashUtil.hash(key);
        }
        catch (SQLException sqle)
        {
            // Ignore all errors and just return that the component is not cachable.
            return "0";
        }
    }

    /**
     * Generate the cache validity object.
     *
     * The cache is always valid.
     */
    public SourceValidity getValidity() {
        return NOPValidity.SHARED_INSTANCE;
    }

        public void addOptions(Options options) throws SAXException, WingException,
            UIException, SQLException, IOException, AuthorizeException
    {
        /* Create skeleton menu structure to ensure consistent order between aspects,
         * even if they are never used
         */
        options.addList("browse");
        options.addList("account");
        options.addList("context");
        options.addList("administrative");
    }

    /**
     * Ensure that the context path is added to the page meta.
     */
    public void addPageMeta(PageMeta pageMeta) throws SAXException,
            WingException, UIException, SQLException, IOException,
            AuthorizeException
    {
        // FIXME: I don't think these should be set here, but they're needed and I'm
        // not sure where else it could go. Perhaps the linkResolver?
        Request request = ObjectModelHelper.getRequest(objectModel);
        pageMeta.addMetadata("contextPath").addContent(contextPath);
        pageMeta.addMetadata("request","queryString").addContent(request.getQueryString());
        pageMeta.addMetadata("request","scheme").addContent(request.getScheme());
        pageMeta.addMetadata("request","serverPort").addContent(request.getServerPort());
        pageMeta.addMetadata("request","serverName").addContent(request.getServerName());
        pageMeta.addMetadata("request","URI").addContent(request.getSitemapURI());

        // Metadata for Mirage2 added to accommodate Saxon-HE XSLT processor that doesn't play easily with Java classes
        // Start

        ConfigurationService cs = DSpaceServicesFactory.getInstance().getConfigurationService();

        pageMeta.addMetadata("thumbnail", "maxheight").addContent(cs.getIntProperty("thumbnail.maxheight", 80));
        pageMeta.addMetadata("thumbnail", "maxwidth").addContent(cs.getIntProperty("thumbnail.maxwidth", 80));

        pageMeta.addMetadata("item-list", "emphasis").addContent(cs.getProperty("xmlui.theme.mirage.item-list.emphasis", "metadata"));

        pageMeta.addMetadata("item-view","label-1").addContent(cs.getProperty("mirage2.item-view.bitstream.href.label.1"));
        pageMeta.addMetadata("item-view","label-2").addContent(cs.getProperty("mirage2.item-view.bitstream.href.label.2"));

        pageMeta.addMetadata("browse", "render-scientific-formulas").addContent(cs.getProperty("webui.browse.render-scientific-formulas", "false"));

        pageMeta.addMetadata("METSRIGHTS-enabled").addContent((cs.getProperty("plugin.named.org.dspace.content.crosswalk.DisseminationCrosswalk").contains("METSRIGHTS")) ? "true": "false");

        // End

        // Metadata for Mirage

        pageMeta.addMetadata("scheme").addContent(cs.getProperty("dspace.baseUrl").contains("https://") ? "https://": "http://");

        String altmetricEnabled = cs.getProperty("altmetric.enabled", "false");
        pageMeta.addMetadata("altmetric", "enabled").addContent(altmetricEnabled);

        if(!altmetricEnabled.equals("false"))   {
            pageMeta.addMetadata("altmetric", "badgeType").addContent(cs.getProperty("altmetric.badgeType"));
            pageMeta.addMetadata("altmetric", "popover").addContent(cs.getProperty("altmetric.popover"));
            pageMeta.addMetadata("altmetric", "details").addContent(cs.getProperty("altmetric.details"));
            pageMeta.addMetadata("altmetric", "noScore").addContent(cs.getProperty("altmetric.noScore"));
            pageMeta.addMetadata("altmetric", "hideNoMentions").addContent(cs.getProperty("altmetric.hideNoMentions"));
            pageMeta.addMetadata("altmetric", "linkTarget").addContent(cs.getProperty("altmetric.linkTarget"));

        }

        String plumxEnabled = cs.getProperty("plumx.enabled", "false");
        pageMeta.addMetadata("plumx", "enabled").addContent(plumxEnabled);

        if(!plumxEnabled.equals("false"))   {
            pageMeta.addMetadata("plumx", "widget-type").addContent(cs.getProperty("plumx.widget-type"));
            pageMeta.addMetadata("plumx", "data-popup").addContent(cs.getProperty("plumx.data-popup"));
            pageMeta.addMetadata("plumx", "data-hide-when-empty").addContent(cs.getProperty("plumx.data-hide-when-empty"));
            pageMeta.addMetadata("plumx", "data-hide-print").addContent(cs.getProperty("plumx.data-hide-print"));
            pageMeta.addMetadata("plumx", "data-orientation").addContent(cs.getProperty("plumx.data-orientation"));
            pageMeta.addMetadata("plumx", "data-width").addContent(cs.getProperty("plumx.data-width"));
            pageMeta.addMetadata("plumx", "data-border").addContent(cs.getProperty("plumx.data-border"));

        }


        // End

        String dspaceVersion = Util.getSourceVersion();
        if (dspaceVersion != null)
        {
            pageMeta.addMetadata("dspace","version").addContent(dspaceVersion);
        }

        String analyticsKey = cs.getProperty("xmlui.google.analytics.key");
        if (analyticsKey != null && analyticsKey.length() > 0)
        {
                analyticsKey = analyticsKey.trim();
                pageMeta.addMetadata("google","analytics").addContent(analyticsKey);
        }

        // add metadata for OpenSearch auto-discovery links if enabled
        if (cs.getBooleanProperty("websvc.opensearch.autolink"))
        {
            pageMeta.addMetadata("opensearch", "shortName").addContent(cs.getProperty("websvc.opensearch.shortname"));
            pageMeta.addMetadata("opensearch", "autolink").addContent( "open-search/description.xml");
        }

        pageMeta.addMetadata("page","contactURL").addContent(contextPath + "/contact");
        pageMeta.addMetadata("page","feedbackURL").addContent(contextPath + "/feedback");

        // Add the locale metadata including language-dependent labels
        Locale[] locales = I18nUtil.getSupportedLocales();
        for (int i=0; i < locales.length; i++)
        {
            pageMeta.addMetadata("page", "supportedLocale").addContent(locales[i].toString());
            // now add the appropriate labels
            pageMeta.addMetadata("supportedLocale", locales[i].toString()).addContent(locales[i].getDisplayName(locales[i]));
        }
         
        pageMeta.addMetadata("page","currentLocale").addContent(context.getCurrentLocale().toString());
        
        DSpaceObject dso = HandleUtil.obtainHandle(objectModel);
        if (dso != null)
        {
            if (dso instanceof Item)
            {
                pageMeta.addMetadata("focus","containerType").addContent("type:item");
                pageMeta.addMetadata("focus","object").addContent("hdl:"+dso.getHandle());
                this.getObjectManager().manageObject(dso);
                dso = ((Item) dso).getOwningCollection();
            }
            
            if (dso instanceof Collection)
            {
                pageMeta.addMetadata("focus","containerType").addContent("type:collection");
                pageMeta.addMetadata("focus","container").addContent("hdl:"+dso.getHandle());
                this.getObjectManager().manageObject(dso);
            }
            
            if (dso instanceof Community)
            {
                pageMeta.addMetadata("focus","containerType").addContent("type:community");
                pageMeta.addMetadata("focus","container").addContent("hdl:"+dso.getHandle());
                this.getObjectManager().manageObject(dso);
            }
        }
    }
}
