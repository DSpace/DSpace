/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * http://www.dspace.org/license/
 */
package org.dspace.app.rest.model;

import java.util.ArrayList;
import java.util.List;

import org.dspace.app.rest.ContentReportsRestController;

/**
 * This class serves as a REST representation of a Filtered Collections Report from the DSpace statistics.
 * The name must match that of the associated resource class (FilteredCollectionsResource) except for
 * the suffix. This is why it is not named something like FilteredCollectionsReportRest.
 *
 * @author Jean-François Morin (Université Laval)
 */
public class FilteredCollectionsRest extends BaseObjectRest<String> {

    private static final long serialVersionUID = -1109226348211060786L;
    /** Type of instances of this class, used by the DSpace REST infrastructure */
    public static final String NAME = "filteredcollectionsreport";
    /** Category of instances of this class, used by the DSpace REST infrastructure */
    public static final String CATEGORY = RestModel.CONTENT_REPORTS;

    /** Collections included in the report */
    private List<FilteredCollectionRest> collections = new ArrayList<>();
    /**
     * Summary generated by adding up data for each filter included in the report.
     * It will be regenerated if any non-sealed collection item is found in
     * the {@link #collections} collection attribute.
     */
    private FilteredCollectionRest summary;

    @Override
    public String getCategory() {
        return CATEGORY;
    }

    /**
     * Return controller class responsible for this Rest object
     *
     * @return Controller class responsible for this Rest object
     */
    @Override
    public Class<?> getController() {
        return ContentReportsRestController.class;
    }

    @Override
    public String getType() {
        return NAME;
    }

    @Override
    public String getTypePlural() {
        return getType();
    }

    /**
     * Returns a defensive copy of the collections included in this report.
     *
     * @return the collections included in this report
     */
    public List<FilteredCollectionRest> getCollections() {
        return new ArrayList<>(collections);
    }

    /**
     * Adds a {@link FilteredCollectionRest} object to this report.
     *
     * @param coll {@link FilteredCollectionRest} to add to this report
     */
    public void addCollection(FilteredCollectionRest coll) {
        summary = null;
        collections.add(coll);
    }

    /**
     * Sets all collections for this report.
     * The contents are copied into this object's internal list, which is protected against
     * further tampering with the provided list.
     *
     * @param collections Values that replace the current ones
     */
    public void setCollections(List<FilteredCollectionRest> collections) {
        summary = null;
        this.collections.clear();
        this.collections.addAll(collections);
    }

    /**
     * Returns the report summary.
     * If the summary has not been computed and/or the reports includes non-sealed collections,
     * it will be regenerated.
     *
     * @return the generated report summary
     */
    public FilteredCollectionRest getSummary() {
        boolean needsRefresh = summary == null || collections.stream().anyMatch(c -> !c.getSealed());
        if (needsRefresh) {
            summary = new FilteredCollectionRest();
            for (var coll : collections) {
                coll.getValues().forEach(summary::addValue);
            }
            int total = collections.stream()
                    .mapToInt(FilteredCollectionRest::getNbTotalItems)
                    .sum();
            summary.setNbTotalItems(total);
            int allFilters = collections.stream()
                    .mapToInt(FilteredCollectionRest::getAllFiltersValue)
                    .sum();
            summary.setAllFiltersValue(allFilters);
            summary.seal();
        }
        return summary;
    }

}
