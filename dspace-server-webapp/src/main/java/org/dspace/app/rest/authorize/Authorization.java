/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * http://www.dspace.org/license/
 */
package org.dspace.app.rest.authorize;

import org.dspace.content.Site;
import org.dspace.discovery.FindableObject;
import org.dspace.discovery.IndexableObject;
import org.dspace.eperson.EPerson;

/**
 * An authorization is the right for a specific {@link EPerson}, eventually null to indicate unauthenticated users, to
 * use a specific {@link AuthorizationFeature} on a defined object. The target object must implement the
 * {@link IndexableObject} interface so to have an unique ID and type
 *
 * @author Andrea Bollini (andrea.bollini at 4science.it)
 */
public class Authorization {
    /**
     * the user authorized to use the feature. <code>null</code> mean unauthenticated user
     */
    private EPerson eperson;

    /**
     * the feature that is authorized to be used
     */
    private AuthorizationFeature feature;

    /**
     * the object where the feature can be used. Not null, for repository wide feature use the {@link Site} object
     */
    private FindableObject object;

    public Authorization() {
    }

    public Authorization(EPerson eperson, AuthorizationFeature feature, FindableObject object) {
        super();
        this.eperson = eperson;
        this.feature = feature;
        this.object = object;
    }


    /**
     * 
     * @return the user authorized to use the feature. <code>null</code> mean unauthenticated user
     */
    public EPerson getEperson() {
        return eperson;
    }

    /**
     * 
     * @param eperson
     *            the user authorized to use the feature. <code>null</code> mean unauthenticated user
     */
    public void setEperson(EPerson eperson) {
        this.eperson = eperson;
    }

    /**
     * 
     * @return the feature that is authorized to be used
     */
    public AuthorizationFeature getFeature() {
        return feature;
    }

    /**
     * 
     * @param feature
     *            the feature that is authorized to be used
     */
    public void setFeature(AuthorizationFeature feature) {
        this.feature = feature;
    }

    /**
     * 
     * @return the object where the feature can be used. Not null, for repository wide feature use the {@link Site}
     *         object
     */
    public FindableObject getObject() {
        return object;
    }

    /**
     * 
     * @param object
     *            the object where the feature can be used. Not null, for repository wide feature use the {@link Site}
     *            object
     */
    public void setObject(FindableObject object) {
        this.object = object;
    }


    /**
     * 
     * @return an unique business identifier generated by concatenation of eperson uuid (if any), feature name and
     *         object unique identifier
     */
    public String getID() {
        StringBuilder sb = new StringBuilder();
        if (eperson != null) {
            sb.append(eperson.getID().toString()).append("_");
        }
        sb.append(feature.getName()).append("_").append(object.getType()).append("_").append(object.getID());
        return sb.toString();
    }

}