#
# The contents of this file are subject to the license and copyright
# detailed in the LICENSE and NOTICE files at the root of the source
# tree and available online at
#
# http://www.dspace.org/license/
#

#
# Spring Boot application.properties
#  Docs (including info on how to override these default settings)
#    http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html
#  For common settings see:
#    http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#
#
# TODO: Eventually would could think of "wiring" this up to use Commons Configuration as well
# See, for example: http://stackoverflow.com/questions/25271537/remote-propertysource
# and https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html

########################
# DSpace Settings
#
# DSpace installation directory
dspace.dir=${dspace.dir}
#dspace.dir=d:/install/dspace7

########################
# DSpace API CORS Settings
#
cors.allowed-origins = *

########################
# Spring Boot Settings
#
# Testing an "application Name"
spring.application.name = DSpace Spring Rest

########################
# Spring DATA Rest settings
#
spring.data.rest.basePath=

########################
# Jackson serialization settings
#
spring.jackson.serialization.fail-on-empty-beans=false

########################
# Internationalization
#
# Base Path for our messages file (i18n)
spring.messages.basename=i18n/messages
spring.messages.encoding=UTF-8

########################
# URI Encoding and Decoding
#
#
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.charset=UTF-8
# Enable http encoding support.
spring.http.encoding.enabled=true
# Force the encoding to the configured charset on HTTP requests and responses.
spring.http.encoding.force=true

###########################
# Embedded Tomcat Settings
#
# Change application port (for embedded Tomcat)
# Spring Boot app will be available at http://localhost:[server.port]/
server.port=8080

# Context path where application should be made available
# (Optional, defaults to root context)
#server.context-path=/spring-data-rest

# This creates a Tomcat context-param named "dspace.dir"
# and sets it to the value of the "dspace.dir" property (listed above)
server.context-parameters.dspace.dir=${dspace.dir}

# This creates a Tomcat context-param named "dspace-config"
# (Used by DSpaceContextListener to load the configurations)
# This is only needed in DSpace 5 or below to initialize ConfigurationManager
#server.context-parameters.dspace-config=${dspace.dir}/config/dspace.cfg

# Error handling settings
# Always include the fullstacktrace in error pages
# (Our Error page hides this stacktrace so it only is visible in HTML source)
# Can be set to "never" if you don't want it.
server.error.include-stacktrace = always

######################
# Spring Boot Autoconfigure
#
# DISABLE a few autoconfiguration scripts, as DSpace configures these already
# * DataSourceAutoConfiguration (DB connection / datasource)
# * FlywayAutoConfiguration (Flyway migrations)
#
# TODO: If we go with Spring boot, we should investigate whether it's worth
# re-enabling these and removing the custom DSpace initialization code
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, \
#							 org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, \
#                             org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, \
							 org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, \
							 org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration

#########################
# Spring Boot Logging levels
#
#logging.level.org.springframework.boot=DEBUG
#logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate=ERROR