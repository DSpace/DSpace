<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.dspace</groupId>
    <artifactId>dspace-spring-rest</artifactId>
    <packaging>war</packaging>
    <name>DSpace Spring Rest (Boot MVC + HATEOAS)</name>
    <description>
      DSpace new Rest API
    </description>

    <!-- 
      A Parent POM that Maven inherits DSpace Default 
      POM attributes from. 
    -->
   <parent>
      <groupId>org.dspace</groupId>
      <artifactId>dspace-parent</artifactId>
      <version>7.0-SNAPSHOT</version>
      <relativePath>..</relativePath>
   </parent>
   
   <properties>
       <!-- This is the path to the root [dspace-src] directory. -->
       <root.basedir>${basedir}/..</root.basedir>
       
       <!-- Default resource delimiter for Spring Boot, so it doesn't clash with Spring ${} placeholders-->
       <resource.delimiter>@</resource.delimiter>
       <!-- Define our starting class for our Spring Boot Application -->
       <start-class>org.dspace.app.rest.Application</start-class>
       <spring-boot.version>1.4.4.RELEASE</spring-boot.version>
       <json-path.version>2.2.0</json-path.version>
       <!-- <springdata.commons>1.13.0.RELEASE</springdata.commons> -->
   </properties>

    <profiles>
        <!-- If Unit Testing is enabled, then setup the Unit Test Environment.
     See also the 'skiptests' profile in Parent POM. -->
        <profile>
            <id>test-environment</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>maven.test.skip</name>
                    <value>false</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- Unit/Integration Testing setup: This plugin unzips the
                         'testEnvironment.zip' file (created by dspace-parent POM), into
                         the 'target/testing/' folder, to essentially create a test
                         install of DSpace, against which Tests can be run. -->
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>2.8</version>
                        <configuration>
                            <outputDirectory>${project.build.directory}/testing</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.dspace</groupId>
                                    <artifactId>dspace-parent</artifactId>
                                    <version>${project.version}</version>
                                    <type>zip</type>
                                    <classifier>testEnvironment</classifier>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                        <executions>
                            <execution>
                                <id>setupTestEnvironment</id>
                                <phase>generate-test-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>setupIntegrationTestEnvironment</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- This plugin allows us to run a Groovy script in our Maven POM
                         (see: http://gmaven.codehaus.org/Executing+Groovy+Code )
                         We are generating a OS-agnostic version (agnostic.build.dir) of
                         the ${project.build.directory} property (full path of target dir).
                         This is needed by the FileWeaver & Surefire plugins (see below)
                         to initialize the Unit Test environment's dspace.cfg file.
                         Otherwise, the Unit Test Framework will not work on Windows OS.
                         This Groovy code was mostly borrowed from:
                         http://stackoverflow.com/questions/3872355/how-to-convert-file-separator-in-maven
                    -->
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <version>2.0</version>
                        <executions>
                            <execution>
                                <id>setproperty</id>
                                <phase>generate-test-resources</phase> <!-- XXX I think this should be 'initialize' - MHW -->
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <source>
                                        project.properties['agnostic.build.dir']=project.build.directory.replace(File.separator,'/');
                                        println("Initializing Maven property 'agnostic.build.dir' to: " + project.properties['agnostic.build.dir']);
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Run Unit Testing! This plugin just kicks off the tests (when enabled). -->
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <!-- Specify the dspace.dir to use for test environment -->
                                <!-- This system property is loaded by AbstractDSpaceTest to initialize the test environment -->
                                <dspace.dir>${agnostic.build.dir}/testing/dspace/</dspace.dir>
                                <!-- Turn off any DSpace logging -->
                                <dspace.log.init.disable>true</dspace.log.init.disable>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>

                    <!-- Run Integration Testing! This plugin just kicks off the tests (when enabled). -->
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <!-- Specify the dspace.dir to use for test environment -->
                                <dspace.dir>${agnostic.build.dir}/testing/dspace/</dspace.dir>
                                <!-- Turn off any DSpace logging -->
                                <dspace.log.init.disable>true</dspace.log.init.disable>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>

        </profile>
    </profiles>

    <dependencies>
        <!-- These next two dependencies build a WAR that is BOTH executable
             AND deployable into an external container (Tomcat).
             See: http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging -->
        <!-- NOTE: For rapid development (if you don't need Solr or other webapps),
             you can temporarily comment these out, and switch <packaging> to "jar".
             This lets you develop in a standalone, runnable JAR application. -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>-->
        <!-- Ensure embedded servlet container doesn't interfere when this
             WAR is deployed to an external Tomcat (i.e. provided). -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>-->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${spring-boot.version}</version>
                        <exclusions>
                                <!-- Temporary exclusions until DS-3135 is fixed. 
                                Once we are using log4j v2, we should update Spring Boot to utilize 
                                it per these instructions: 
                                https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging 
                                -->
                                <exclusion>
                                        <groupId>org.slf4j</groupId>
                                        <artifactId>log4j-over-slf4j</artifactId>
                                </exclusion>
                                <exclusion>
                                        <groupId>org.slf4j</groupId>
                                        <artifactId>jul-to-slf4j</artifactId>
                                </exclusion>
                               <exclusion>
                                        <groupId> ch.qos.logback</groupId>
                                        <artifactId>logback-classic</artifactId>
                                </exclusion>
                        </exclusions>
		</dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
            <version>${spring-boot.version}</version>
        </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <scope>test</scope>
            <version>${json-path.version}</version>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path-assert</artifactId>
            <version>${json-path.version}</version>
            <scope>test</scope>
        </dependency>
		
		<!-- The HAL Browser -->
 		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-browser</artifactId>
			<version>2.5.6.RELEASE</version>
			<!-- if you get a java.util.zip.ZipException: invalid LOC header (bad signature) 
			during the tomcat startup force the use of the previous version as the jar file 
			looks corrupted in the maven repository -->
			<!-- <version>2.5.5.RELEASE</version> -->
		</dependency>

         <!-- Add in Spring Security for AuthN and AuthZ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- Add in log4j support by excluding default logging, and using starter-log4j -->
        <!-- See: http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j</artifactId>
        </dependency>-->

        <!-- DSpace dependencies -->
        <dependency>
            <groupId>org.dspace</groupId>
            <artifactId>dspace-api</artifactId>
            <exclusions>
            	<exclusion>
            		<groupId>com.fasterxml.jackson.core</groupId>
            		<artifactId>jackson-core</artifactId>
            	</exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.dspace</groupId>
            <artifactId>dspace-services</artifactId>
        </dependency>

        <!-- Apache Commons Collections 4.1 (used for MultiValuedMap to store metadata values for views) -->
        <!-- NOTE: Currently DSpace API / Services still used 3.2 and may need upgrading at some point -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.1</version>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>
        <dependency>
            <groupId>com.nimbusds</groupId>
            <artifactId>nimbus-jose-jwt</artifactId>
            <version>4.23</version>
        </dependency>

        <!-- TEST DEPENDENCIES -->
        <dependency> <!-- Keep jmockit before junit -->
            <groupId>org.jmockit</groupId>
            <artifactId>jmockit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.databene</groupId>
            <artifactId>contiperf</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.dspace</groupId>
            <artifactId>dspace-solr</artifactId>
            <classifier>classes</classifier>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-icu</artifactId>
            <version>${solr.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-smartcn</artifactId>
            <version>${solr.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-stempel</artifactId>
            <version>${solr.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

</project>