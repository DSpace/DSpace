# DSpace's Travis CI Configuration
# Builds: https://travis-ci.com/github/DSpace/DSpace
# Travis configuration guide/validation: https://config.travis-ci.com/explore
language: java
# TODO: Upgrade to Bionic
dist: trusty
os: linux

# Define global environment variables (shared across all jobs)
env:
  global:
    # Give Maven 1GB of memory to work with
    - MAVEN_OPTS=-Xmx1024M
    # Tell Coveralls that we are running multiple jobs in parallel & it should aggregate results
    - COVERALLS_PARALLEL=true
    # Suppress Maven "downloading" messages in Travis logs by making them all warnings
    - HIDE_MAVEN_DOWNLOADS="-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"

jdk:
  # DS-3384 Oracle JDK has DocLint enabled by default.
  # Let's use this to catch any newly introduced DocLint issues.
  - oraclejdk11

# Create two jobs to run Unit & Integration tests in parallel.
# These jobs only differ in the TEST_FLAGS defined below,
# and otherwise share all the other configs in this file
jobs:
  include:
    - name: "Run Unit Tests"
      # NOTE: unit tests include deprecated REST API v6 (as it has unit tests)
      env: TEST_FLAGS="-DskipUnitTests=false -Pdspace-rest"
    - name: "Run Integration Tests"
      env: TEST_FLAGS="-DskipIntegrationTests=false"

#before_install:
  # Remove outdated settings.xml from Travis builds. Workaround for https://github.com/travis-ci/travis-ci/issues/4629
#  - rm ~/.m2/settings.xml

# Install all Maven dependencies, including deprecated REST API v6
# This also does a license header check & Checkstyle check (both enabled by default)
# We disable the build of 'dspace-installer' (-P-assembly), as it can be memory intensive
#install: "mvn clean install -Pdspace-rest -P-assembly -B -V"
install: skip

# Build DSpace and run configured tests (see 'jobs' above)
# Notes on flags used:
#  -B            => Maven batch/non-interactive mode (recommended for CI)
#  -P-assembly   => Disable build of dspace-installer in [src]/dspace/
script: "mvn install -B -P-assembly $HIDE_MAVEN_DOWNLOADS $TEST_FLAGS"

# After a successful build and test (see 'script'), send code coverage reports to coveralls.io
# These code coverage reports are generated by jacoco-maven-plugin (during test process above).
after_success:
  # Run "verify", enabling the "coveralls" profile. This sends our reports to coveralls.io (see coveralls-maven-plugin)
  - "cd dspace && mvn verify -P coveralls"

# Send final notification to coveralls after all (parallel) jobs have been completed
# Lets coveralls know it can aggregate all reports sent from all jobs
notifications:
  webhooks: https://coveralls.io/webhook
