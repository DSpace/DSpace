networks:
  dspacenet:
    ipam:
      config:
        # Define a custom subnet for our DSpace network, so that we can easily trust requests from host to container.
        # If you customize this value, be sure to customize the 'proxies.trusted.ipranges' env variable below.
        - subnet: 172.23.0.0/16
services:
  # UMD Customization
  # Nginx server configuration for supporting HTTPS connections from the
  # local development environment
  nginx:
    container_name: nginx
    image: nginx:1.25.2
    ports:
    - "80:80"
    - "443:8443"
    volumes:
    - ./dspace/src/main/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    - ./dspace/src/main/docker/nginx/certs:/etc/nginx/certs:ro
    networks:
      dspacenet:
  # End UMD Customization
  # DSpace (backend) webapp container
  dspace:
    container_name: dspace
    environment:
      # Below syntax may look odd, but it is how to override dspace.cfg settings via env variables.
      # See https://github.com/DSpace/DSpace/blob/main/dspace/config/config-definition.xml
      # __P__ => "." (e.g. dspace__P__dir => dspace.dir)
      # __D__ => "-" (e.g. google__D__metadata => google-metadata)
      # dspace.dir: Must match with Dockerfile's DSPACE_INSTALL directory.
      dspace__P__dir: /dspace
      # Uncomment to set a non-default value for dspace.server.url or dspace.ui.url
      # UMD Customization
      dspace__P__server__P__url: https://api.drum-local.lib.umd.edu/server
      dspace__P__ui__P__url: https://drum-local.lib.umd.edu:4000
      # End UMD Customization
      dspace__P__name: 'DSpace Started with Docker Compose'
      # db.url: Ensure we are using the 'dspacedb' image for our database
      # UMD Customization
      db__P__url: 'jdbc:postgresql://dspacedb:5432/drum'
      # End UMD Customization
      # solr.server: Ensure we are using the 'dspacesolr' image for Solr
      solr__P__server: http://dspacesolr:8983/solr
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      proxies__P__trusted__P__ipranges: '172.23.0'
      LOGGING_CONFIG: /dspace/config/log4j2-container.xml
      # UMD Customization
      JPDA_OPTS: "-agentlib:jdwp=transport=dt_socket,address=0.0.0.0:8000,server=y,suspend=n"
      # End UMD Customization
    # UMD Customization
    image: "docker.lib.umd.edu/drum:${DSPACE_VER:-8_x-dev}"
    # End UMD Customization
    build:
      context: .
      # UMD Customization
      dockerfile: Dockerfile.dev
      # End UMD Customization
    depends_on:
    - dspacedb
    networks:
      - dspacenet
    ports:
    - published: 8080
      target: 8080
    - published: 8000
      target: 8000
    stdin_open: true
    tty: true
    volumes:
    # Keep DSpace assetstore directory between reboots
    - assetstore:/dspace/assetstore
    # Mount local [src]/dspace/config/ to container. This syncs your local configs with container
    # NOTE: Environment variables specified above will OVERRIDE any configs in local.cfg or dspace.cfg
    - ./dspace/config:/dspace/config
    # Ensure that the database is ready BEFORE starting tomcat
    # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
    # 2. Then, run database migration to init database tables
    # 3. Finally, start DSpace
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
      /dspace/bin/dspace database migrate
      java $${JPDA_OPTS} -jar /dspace/webapps/server-boot.jar --dspace.dir=/dspace
  # DSpace PostgreSQL database container
  dspacedb:
    container_name: dspacedb
    # Uses a custom Postgres image with pgcrypto installed
    # UMD Customization
    image: docker.lib.umd.edu/dspace-postgres:${DSPACE_VER:-latest}
    # End UMD Customization
    build:
      # Must build out of subdirectory to have access to install script for pgcrypto
      context: ./dspace/src/main/docker/dspace-postgres-pgcrypto/
    environment:
      PGDATA: /pgdata
      # UMD Customization
      POSTGRES_DB: drum
      POSTGRES_USER: drum
      POSTGRES_PASSWORD: drum
      # End UMD Customization
    networks:
      dspacenet:
    ports:
    - published: 5432
      target: 5432
    stdin_open: true
    tty: true
    volumes:
    # Keep Postgres data directory between reboots
    - pgdata:/pgdata
    # UMD Customization
    - ./postgres-init:/docker-entrypoint-initdb.d
    # End UMD Customization
  # DSpace Solr container
  dspacesolr:
    container_name: dspacesolr
    image: "${DOCKER_OWNER:-dspace}/dspace-solr:${DSPACE_VER:-latest}"
    build:
      context: ./dspace/src/main/docker/dspace-solr/
      # Provide path to Solr configs necessary to build Docker image
      additional_contexts:
        solrconfigs: ./dspace/solr/
      args:
        SOLR_VERSION: "${SOLR_VER:-8.11}"
    networks:
      dspacenet:
    ports:
    - published: 8983
      target: 8983
    stdin_open: true
    tty: true
    working_dir: /var/solr/data
    volumes:
    # Keep Solr data directory between reboots
    - solr_data:/var/solr/data
    # Initialize all DSpace Solr cores then start Solr:
    # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
    # * Second, copy configsets to this core:
    #   Updates to Solr configs require the container to be rebuilt/restarted: `docker compose -p d7 up -d --build dspacesolr`
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      init-var-solr
      precreate-core authority /opt/solr/server/solr/configsets/authority
      cp -r /opt/solr/server/solr/configsets/authority/* authority
      precreate-core oai /opt/solr/server/solr/configsets/oai
      cp -r /opt/solr/server/solr/configsets/oai/* oai
      precreate-core search /opt/solr/server/solr/configsets/search
      cp -r /opt/solr/server/solr/configsets/search/* search
      precreate-core statistics /opt/solr/server/solr/configsets/statistics
      cp -r /opt/solr/server/solr/configsets/statistics/* statistics
      precreate-core qaevent /opt/solr/server/solr/configsets/qaevent
      cp -r /opt/solr/server/solr/configsets/qaevent/* qaevent
      precreate-core suggestion /opt/solr/server/solr/configsets/suggestion
      cp -r /opt/solr/server/solr/configsets/suggestion/* suggestion
      exec solr -f
volumes:
  assetstore:
  pgdata:
  solr_data:
