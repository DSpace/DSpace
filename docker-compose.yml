version: '3.7'
networks:
    traefik:
      external: true
services:
  # DSpace (backend) webapp container
  riunne-DSpace:
    container_name: riunne-dspace
    environment:
      dspace__P__dir: /dspace
      # Uncomment to set a non-default value for dspace.server.url or dspace.ui.url
      dspace__P__server__P__url: http://10.20.1.237:8080/server
      dspace__P__ui__P__url: http://10.20.1.237:4000
      dspace__P__name: 'Repositorio Institucional UNNE'
      # db.url: Ensure we are using the 'dspacedb' image for our database
      db__P__url: 'jdbc:postgresql://10.20.1.237:5432/dspace'
      # solr.server: Ensure we are using the 'dspacesolr' image for Solr
      solr__P__server: http://10.20.1.237:8983/solr
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      #proxies__P__trusted__P__ipranges: '10.0.2'
    image: dspace/dspace:dspace-7.5
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
    - riunnedb
    networks:
      - traefik
    ports:
    - published: 8085
      target: 8085 
    stdin_open: true
    tty: true
    volumes:
    # Keep DSpace assetstore directory between reboots
    - assetstore:/dspace/assetstore
    # Mount local [src]/dspace/config/ to container. This syncs your local configs with container
    # NOTE: Environment variables specified above will OVERRIDE any configs in local.cfg or dspace.cfg
    - ./dspace/config:/dspace/config
    # Ensure that the database is ready BEFORE starting tomcat
    # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
    # 2. Then, run database migration to init database tables
    # 3. Finally, start Tomcat
    - server:/root    

    entrypoint:
    - /bin/bash
    - '-c'
    - |
      while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
      /dspace/bin/dspace database migrate
      catalina.sh run

  # DSpace frontend container
  riunne-angular:
    container_name: riunne-angular
    depends_on:
    - riunne-dspace
    environment:
      DSPACE_UI_SSL: 'false'
      DSPACE_UI_HOST: dspace-angular
      DSPACE_UI_PORT: '4000'
      DSPACE_UI_NAMESPACE: /
      DSPACE_REST_SSL: 'false'
      DSPACE_REST_HOST: 10.20.1.237
      DSPACE_REST_PORT: 8085
      DSPACE_REST_NAMESPACE: /server
    image: dspace/dspace-angular:dspace-7.5
    networks:
      dspacenet:
    ports:
    - published: 4000
      target: 4000
    stdin_open: true
    tty: true
    volumes:
    - app:/app

  # DSpace database container
  riunne-db:
    container_name: riunnedb
    environment:
      PGDATA: /pgdata
    # Uses a custom Postgres image with pgcrypto installed
    image: dspace/dspace-postgres-pgcrypto
    networks:
      - traefik
    ports:
    - published: 5432
      target: 5432
    stdin_open: true
    tty: true
    volumes:
    - pgdata:/pgdata

  # DSpace Solr container
  riunne-solr:
    container_name: riunnesolr
    # Uses official Solr image at https://hub.docker.com/_/solr/
    image: solr:8.11-slim
    networks:
      - traefik
    ports:
    - published: 9083
      target: 9083
    stdin_open: true
    tty: true
    working_dir: /var/solr/data
    volumes:
    # Mount our local Solr core configs so that they are available as Solr configsets on container
    - ./dspace/solr/authority:/opt/solr/server/solr/configsets/authority
    - ./dspace/solr/oai:/opt/solr/server/solr/configsets/oai
    - ./dspace/solr/search:/opt/solr/server/solr/configsets/search
    - ./dspace/solr/statistics:/opt/solr/server/solr/configsets/statistics
    # Keep Solr data directory between reboots
    - solr_data:/var/solr/data
    # Initialize all DSpace Solr cores using the mounted local configsets (see above), then start Solr
    # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
    # * Second, copy updated configs from mounted configsets to this core. If it already existed, this updates core
    #   to the latest configs. If it's a newly created core, this is a no-op.
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      init-var-solr
      precreate-core authority /opt/solr/server/solr/configsets/authority
      cp -r -u /opt/solr/server/solr/configsets/authority/* authority
      precreate-core oai /opt/solr/server/solr/configsets/oai
      cp -r -u /opt/solr/server/solr/configsets/oai/* oai
      precreate-core search /opt/solr/server/solr/configsets/search
      cp -r -u /opt/solr/server/solr/configsets/search/* search
      precreate-core statistics /opt/solr/server/solr/configsets/statistics
      cp -r -u /opt/solr/server/solr/configsets/statistics/* statistics
      exec solr -f

volumes:
  assetstore:
  pgdata:
  solr_data:
  server:
  app:
